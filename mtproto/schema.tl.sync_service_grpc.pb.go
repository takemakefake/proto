//
// WARNING! All changes made in this file will be lost!
// Created from 'scheme.tl' by 'codegen_proto.py'
//
//  Copyright (c) 2017, https://github.com/xxxxx
//  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: schema.tl.sync_service.proto

package mtproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RPCAuth_AuthCheckPhone_FullMethodName              = "/mtproto.RPCAuth/auth_checkPhone"
	RPCAuth_AuthSendCode_FullMethodName                = "/mtproto.RPCAuth/auth_sendCode"
	RPCAuth_AuthSignUp_FullMethodName                  = "/mtproto.RPCAuth/auth_signUp"
	RPCAuth_AuthSignIn_FullMethodName                  = "/mtproto.RPCAuth/auth_signIn"
	RPCAuth_AuthLogOut_FullMethodName                  = "/mtproto.RPCAuth/auth_logOut"
	RPCAuth_AuthResetAuthorizations_FullMethodName     = "/mtproto.RPCAuth/auth_resetAuthorizations"
	RPCAuth_AuthSendInvites_FullMethodName             = "/mtproto.RPCAuth/auth_sendInvites"
	RPCAuth_AuthExportAuthorization_FullMethodName     = "/mtproto.RPCAuth/auth_exportAuthorization"
	RPCAuth_AuthImportAuthorization_FullMethodName     = "/mtproto.RPCAuth/auth_importAuthorization"
	RPCAuth_AuthBindTempAuthKey_FullMethodName         = "/mtproto.RPCAuth/auth_bindTempAuthKey"
	RPCAuth_AuthImportBotAuthorization_FullMethodName  = "/mtproto.RPCAuth/auth_importBotAuthorization"
	RPCAuth_AuthCheckPassword_FullMethodName           = "/mtproto.RPCAuth/auth_checkPassword"
	RPCAuth_AuthRequestPasswordRecovery_FullMethodName = "/mtproto.RPCAuth/auth_requestPasswordRecovery"
	RPCAuth_AuthRecoverPassword_FullMethodName         = "/mtproto.RPCAuth/auth_recoverPassword"
	RPCAuth_AuthResendCode_FullMethodName              = "/mtproto.RPCAuth/auth_resendCode"
	RPCAuth_AuthCancelCode_FullMethodName              = "/mtproto.RPCAuth/auth_cancelCode"
	RPCAuth_AuthDropTempAuthKeys_FullMethodName        = "/mtproto.RPCAuth/auth_dropTempAuthKeys"
)

// RPCAuthClient is the client API for RPCAuth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCAuthClient interface {
	// auth.checkPhone#6fe51dfb phone_number:string = auth.CheckedPhone;
	AuthCheckPhone(ctx context.Context, in *TLAuthCheckPhone, opts ...grpc.CallOption) (*Auth_CheckedPhone, error)
	// auth.sendCode#86aef0ec flags:# allow_flashcall:flags.0?true phone_number:string current_number:flags.0?Bool api_id:int api_hash:string = auth.SentCode;
	AuthSendCode(ctx context.Context, in *TLAuthSendCode, opts ...grpc.CallOption) (*Auth_SentCode, error)
	// auth.signUp#1b067634 phone_number:string phone_code_hash:string phone_code:string first_name:string last_name:string = auth.Authorization;
	AuthSignUp(ctx context.Context, in *TLAuthSignUp, opts ...grpc.CallOption) (*Auth_Authorization, error)
	// auth.signIn#bcd51581 phone_number:string phone_code_hash:string phone_code:string = auth.Authorization;
	AuthSignIn(ctx context.Context, in *TLAuthSignIn, opts ...grpc.CallOption) (*Auth_Authorization, error)
	// auth.logOut#5717da40 = Bool;
	AuthLogOut(ctx context.Context, in *TLAuthLogOut, opts ...grpc.CallOption) (*Bool, error)
	// auth.resetAuthorizations#9fab0d1a = Bool;
	AuthResetAuthorizations(ctx context.Context, in *TLAuthResetAuthorizations, opts ...grpc.CallOption) (*Bool, error)
	// auth.sendInvites#771c1d97 phone_numbers:Vector<string> message:string = Bool;
	AuthSendInvites(ctx context.Context, in *TLAuthSendInvites, opts ...grpc.CallOption) (*Bool, error)
	// auth.exportAuthorization#e5bfffcd dc_id:int = auth.ExportedAuthorization;
	AuthExportAuthorization(ctx context.Context, in *TLAuthExportAuthorization, opts ...grpc.CallOption) (*Auth_ExportedAuthorization, error)
	// auth.importAuthorization#e3ef9613 id:int bytes:bytes = auth.Authorization;
	AuthImportAuthorization(ctx context.Context, in *TLAuthImportAuthorization, opts ...grpc.CallOption) (*Auth_Authorization, error)
	// auth.bindTempAuthKey#cdd42a05 perm_auth_key_id:long nonce:long expires_at:int encrypted_message:bytes = Bool;
	AuthBindTempAuthKey(ctx context.Context, in *TLAuthBindTempAuthKey, opts ...grpc.CallOption) (*Bool, error)
	// auth.importBotAuthorization#67a3ff2c flags:int api_id:int api_hash:string bot_auth_token:string = auth.Authorization;
	AuthImportBotAuthorization(ctx context.Context, in *TLAuthImportBotAuthorization, opts ...grpc.CallOption) (*Auth_Authorization, error)
	// auth.checkPassword#a63011e password_hash:bytes = auth.Authorization;
	AuthCheckPassword(ctx context.Context, in *TLAuthCheckPassword, opts ...grpc.CallOption) (*Auth_Authorization, error)
	// auth.requestPasswordRecovery#d897bc66 = auth.PasswordRecovery;
	AuthRequestPasswordRecovery(ctx context.Context, in *TLAuthRequestPasswordRecovery, opts ...grpc.CallOption) (*Auth_PasswordRecovery, error)
	// auth.recoverPassword#4ea56e92 code:string = auth.Authorization;
	AuthRecoverPassword(ctx context.Context, in *TLAuthRecoverPassword, opts ...grpc.CallOption) (*Auth_Authorization, error)
	// auth.resendCode#3ef1a9bf phone_number:string phone_code_hash:string = auth.SentCode;
	AuthResendCode(ctx context.Context, in *TLAuthResendCode, opts ...grpc.CallOption) (*Auth_SentCode, error)
	// auth.cancelCode#1f040578 phone_number:string phone_code_hash:string = Bool;
	AuthCancelCode(ctx context.Context, in *TLAuthCancelCode, opts ...grpc.CallOption) (*Bool, error)
	// auth.dropTempAuthKeys#8e48a188 except_auth_keys:Vector<long> = Bool;
	AuthDropTempAuthKeys(ctx context.Context, in *TLAuthDropTempAuthKeys, opts ...grpc.CallOption) (*Bool, error)
}

type rPCAuthClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCAuthClient(cc grpc.ClientConnInterface) RPCAuthClient {
	return &rPCAuthClient{cc}
}

func (c *rPCAuthClient) AuthCheckPhone(ctx context.Context, in *TLAuthCheckPhone, opts ...grpc.CallOption) (*Auth_CheckedPhone, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Auth_CheckedPhone)
	err := c.cc.Invoke(ctx, RPCAuth_AuthCheckPhone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthClient) AuthSendCode(ctx context.Context, in *TLAuthSendCode, opts ...grpc.CallOption) (*Auth_SentCode, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Auth_SentCode)
	err := c.cc.Invoke(ctx, RPCAuth_AuthSendCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthClient) AuthSignUp(ctx context.Context, in *TLAuthSignUp, opts ...grpc.CallOption) (*Auth_Authorization, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Auth_Authorization)
	err := c.cc.Invoke(ctx, RPCAuth_AuthSignUp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthClient) AuthSignIn(ctx context.Context, in *TLAuthSignIn, opts ...grpc.CallOption) (*Auth_Authorization, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Auth_Authorization)
	err := c.cc.Invoke(ctx, RPCAuth_AuthSignIn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthClient) AuthLogOut(ctx context.Context, in *TLAuthLogOut, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCAuth_AuthLogOut_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthClient) AuthResetAuthorizations(ctx context.Context, in *TLAuthResetAuthorizations, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCAuth_AuthResetAuthorizations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthClient) AuthSendInvites(ctx context.Context, in *TLAuthSendInvites, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCAuth_AuthSendInvites_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthClient) AuthExportAuthorization(ctx context.Context, in *TLAuthExportAuthorization, opts ...grpc.CallOption) (*Auth_ExportedAuthorization, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Auth_ExportedAuthorization)
	err := c.cc.Invoke(ctx, RPCAuth_AuthExportAuthorization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthClient) AuthImportAuthorization(ctx context.Context, in *TLAuthImportAuthorization, opts ...grpc.CallOption) (*Auth_Authorization, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Auth_Authorization)
	err := c.cc.Invoke(ctx, RPCAuth_AuthImportAuthorization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthClient) AuthBindTempAuthKey(ctx context.Context, in *TLAuthBindTempAuthKey, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCAuth_AuthBindTempAuthKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthClient) AuthImportBotAuthorization(ctx context.Context, in *TLAuthImportBotAuthorization, opts ...grpc.CallOption) (*Auth_Authorization, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Auth_Authorization)
	err := c.cc.Invoke(ctx, RPCAuth_AuthImportBotAuthorization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthClient) AuthCheckPassword(ctx context.Context, in *TLAuthCheckPassword, opts ...grpc.CallOption) (*Auth_Authorization, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Auth_Authorization)
	err := c.cc.Invoke(ctx, RPCAuth_AuthCheckPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthClient) AuthRequestPasswordRecovery(ctx context.Context, in *TLAuthRequestPasswordRecovery, opts ...grpc.CallOption) (*Auth_PasswordRecovery, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Auth_PasswordRecovery)
	err := c.cc.Invoke(ctx, RPCAuth_AuthRequestPasswordRecovery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthClient) AuthRecoverPassword(ctx context.Context, in *TLAuthRecoverPassword, opts ...grpc.CallOption) (*Auth_Authorization, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Auth_Authorization)
	err := c.cc.Invoke(ctx, RPCAuth_AuthRecoverPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthClient) AuthResendCode(ctx context.Context, in *TLAuthResendCode, opts ...grpc.CallOption) (*Auth_SentCode, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Auth_SentCode)
	err := c.cc.Invoke(ctx, RPCAuth_AuthResendCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthClient) AuthCancelCode(ctx context.Context, in *TLAuthCancelCode, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCAuth_AuthCancelCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthClient) AuthDropTempAuthKeys(ctx context.Context, in *TLAuthDropTempAuthKeys, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCAuth_AuthDropTempAuthKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCAuthServer is the server API for RPCAuth service.
// All implementations must embed UnimplementedRPCAuthServer
// for forward compatibility.
type RPCAuthServer interface {
	// auth.checkPhone#6fe51dfb phone_number:string = auth.CheckedPhone;
	AuthCheckPhone(context.Context, *TLAuthCheckPhone) (*Auth_CheckedPhone, error)
	// auth.sendCode#86aef0ec flags:# allow_flashcall:flags.0?true phone_number:string current_number:flags.0?Bool api_id:int api_hash:string = auth.SentCode;
	AuthSendCode(context.Context, *TLAuthSendCode) (*Auth_SentCode, error)
	// auth.signUp#1b067634 phone_number:string phone_code_hash:string phone_code:string first_name:string last_name:string = auth.Authorization;
	AuthSignUp(context.Context, *TLAuthSignUp) (*Auth_Authorization, error)
	// auth.signIn#bcd51581 phone_number:string phone_code_hash:string phone_code:string = auth.Authorization;
	AuthSignIn(context.Context, *TLAuthSignIn) (*Auth_Authorization, error)
	// auth.logOut#5717da40 = Bool;
	AuthLogOut(context.Context, *TLAuthLogOut) (*Bool, error)
	// auth.resetAuthorizations#9fab0d1a = Bool;
	AuthResetAuthorizations(context.Context, *TLAuthResetAuthorizations) (*Bool, error)
	// auth.sendInvites#771c1d97 phone_numbers:Vector<string> message:string = Bool;
	AuthSendInvites(context.Context, *TLAuthSendInvites) (*Bool, error)
	// auth.exportAuthorization#e5bfffcd dc_id:int = auth.ExportedAuthorization;
	AuthExportAuthorization(context.Context, *TLAuthExportAuthorization) (*Auth_ExportedAuthorization, error)
	// auth.importAuthorization#e3ef9613 id:int bytes:bytes = auth.Authorization;
	AuthImportAuthorization(context.Context, *TLAuthImportAuthorization) (*Auth_Authorization, error)
	// auth.bindTempAuthKey#cdd42a05 perm_auth_key_id:long nonce:long expires_at:int encrypted_message:bytes = Bool;
	AuthBindTempAuthKey(context.Context, *TLAuthBindTempAuthKey) (*Bool, error)
	// auth.importBotAuthorization#67a3ff2c flags:int api_id:int api_hash:string bot_auth_token:string = auth.Authorization;
	AuthImportBotAuthorization(context.Context, *TLAuthImportBotAuthorization) (*Auth_Authorization, error)
	// auth.checkPassword#a63011e password_hash:bytes = auth.Authorization;
	AuthCheckPassword(context.Context, *TLAuthCheckPassword) (*Auth_Authorization, error)
	// auth.requestPasswordRecovery#d897bc66 = auth.PasswordRecovery;
	AuthRequestPasswordRecovery(context.Context, *TLAuthRequestPasswordRecovery) (*Auth_PasswordRecovery, error)
	// auth.recoverPassword#4ea56e92 code:string = auth.Authorization;
	AuthRecoverPassword(context.Context, *TLAuthRecoverPassword) (*Auth_Authorization, error)
	// auth.resendCode#3ef1a9bf phone_number:string phone_code_hash:string = auth.SentCode;
	AuthResendCode(context.Context, *TLAuthResendCode) (*Auth_SentCode, error)
	// auth.cancelCode#1f040578 phone_number:string phone_code_hash:string = Bool;
	AuthCancelCode(context.Context, *TLAuthCancelCode) (*Bool, error)
	// auth.dropTempAuthKeys#8e48a188 except_auth_keys:Vector<long> = Bool;
	AuthDropTempAuthKeys(context.Context, *TLAuthDropTempAuthKeys) (*Bool, error)
	mustEmbedUnimplementedRPCAuthServer()
}

// UnimplementedRPCAuthServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCAuthServer struct{}

func (UnimplementedRPCAuthServer) AuthCheckPhone(context.Context, *TLAuthCheckPhone) (*Auth_CheckedPhone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthCheckPhone not implemented")
}
func (UnimplementedRPCAuthServer) AuthSendCode(context.Context, *TLAuthSendCode) (*Auth_SentCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthSendCode not implemented")
}
func (UnimplementedRPCAuthServer) AuthSignUp(context.Context, *TLAuthSignUp) (*Auth_Authorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthSignUp not implemented")
}
func (UnimplementedRPCAuthServer) AuthSignIn(context.Context, *TLAuthSignIn) (*Auth_Authorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthSignIn not implemented")
}
func (UnimplementedRPCAuthServer) AuthLogOut(context.Context, *TLAuthLogOut) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthLogOut not implemented")
}
func (UnimplementedRPCAuthServer) AuthResetAuthorizations(context.Context, *TLAuthResetAuthorizations) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthResetAuthorizations not implemented")
}
func (UnimplementedRPCAuthServer) AuthSendInvites(context.Context, *TLAuthSendInvites) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthSendInvites not implemented")
}
func (UnimplementedRPCAuthServer) AuthExportAuthorization(context.Context, *TLAuthExportAuthorization) (*Auth_ExportedAuthorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthExportAuthorization not implemented")
}
func (UnimplementedRPCAuthServer) AuthImportAuthorization(context.Context, *TLAuthImportAuthorization) (*Auth_Authorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthImportAuthorization not implemented")
}
func (UnimplementedRPCAuthServer) AuthBindTempAuthKey(context.Context, *TLAuthBindTempAuthKey) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthBindTempAuthKey not implemented")
}
func (UnimplementedRPCAuthServer) AuthImportBotAuthorization(context.Context, *TLAuthImportBotAuthorization) (*Auth_Authorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthImportBotAuthorization not implemented")
}
func (UnimplementedRPCAuthServer) AuthCheckPassword(context.Context, *TLAuthCheckPassword) (*Auth_Authorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthCheckPassword not implemented")
}
func (UnimplementedRPCAuthServer) AuthRequestPasswordRecovery(context.Context, *TLAuthRequestPasswordRecovery) (*Auth_PasswordRecovery, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthRequestPasswordRecovery not implemented")
}
func (UnimplementedRPCAuthServer) AuthRecoverPassword(context.Context, *TLAuthRecoverPassword) (*Auth_Authorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthRecoverPassword not implemented")
}
func (UnimplementedRPCAuthServer) AuthResendCode(context.Context, *TLAuthResendCode) (*Auth_SentCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthResendCode not implemented")
}
func (UnimplementedRPCAuthServer) AuthCancelCode(context.Context, *TLAuthCancelCode) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthCancelCode not implemented")
}
func (UnimplementedRPCAuthServer) AuthDropTempAuthKeys(context.Context, *TLAuthDropTempAuthKeys) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthDropTempAuthKeys not implemented")
}
func (UnimplementedRPCAuthServer) mustEmbedUnimplementedRPCAuthServer() {}
func (UnimplementedRPCAuthServer) testEmbeddedByValue()                 {}

// UnsafeRPCAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCAuthServer will
// result in compilation errors.
type UnsafeRPCAuthServer interface {
	mustEmbedUnimplementedRPCAuthServer()
}

func RegisterRPCAuthServer(s grpc.ServiceRegistrar, srv RPCAuthServer) {
	// If the following call pancis, it indicates UnimplementedRPCAuthServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCAuth_ServiceDesc, srv)
}

func _RPCAuth_AuthCheckPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthCheckPhone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServer).AuthCheckPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuth_AuthCheckPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServer).AuthCheckPhone(ctx, req.(*TLAuthCheckPhone))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuth_AuthSendCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthSendCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServer).AuthSendCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuth_AuthSendCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServer).AuthSendCode(ctx, req.(*TLAuthSendCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuth_AuthSignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthSignUp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServer).AuthSignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuth_AuthSignUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServer).AuthSignUp(ctx, req.(*TLAuthSignUp))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuth_AuthSignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthSignIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServer).AuthSignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuth_AuthSignIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServer).AuthSignIn(ctx, req.(*TLAuthSignIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuth_AuthLogOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthLogOut)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServer).AuthLogOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuth_AuthLogOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServer).AuthLogOut(ctx, req.(*TLAuthLogOut))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuth_AuthResetAuthorizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthResetAuthorizations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServer).AuthResetAuthorizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuth_AuthResetAuthorizations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServer).AuthResetAuthorizations(ctx, req.(*TLAuthResetAuthorizations))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuth_AuthSendInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthSendInvites)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServer).AuthSendInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuth_AuthSendInvites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServer).AuthSendInvites(ctx, req.(*TLAuthSendInvites))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuth_AuthExportAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthExportAuthorization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServer).AuthExportAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuth_AuthExportAuthorization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServer).AuthExportAuthorization(ctx, req.(*TLAuthExportAuthorization))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuth_AuthImportAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthImportAuthorization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServer).AuthImportAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuth_AuthImportAuthorization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServer).AuthImportAuthorization(ctx, req.(*TLAuthImportAuthorization))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuth_AuthBindTempAuthKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthBindTempAuthKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServer).AuthBindTempAuthKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuth_AuthBindTempAuthKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServer).AuthBindTempAuthKey(ctx, req.(*TLAuthBindTempAuthKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuth_AuthImportBotAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthImportBotAuthorization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServer).AuthImportBotAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuth_AuthImportBotAuthorization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServer).AuthImportBotAuthorization(ctx, req.(*TLAuthImportBotAuthorization))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuth_AuthCheckPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthCheckPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServer).AuthCheckPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuth_AuthCheckPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServer).AuthCheckPassword(ctx, req.(*TLAuthCheckPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuth_AuthRequestPasswordRecovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthRequestPasswordRecovery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServer).AuthRequestPasswordRecovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuth_AuthRequestPasswordRecovery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServer).AuthRequestPasswordRecovery(ctx, req.(*TLAuthRequestPasswordRecovery))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuth_AuthRecoverPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthRecoverPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServer).AuthRecoverPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuth_AuthRecoverPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServer).AuthRecoverPassword(ctx, req.(*TLAuthRecoverPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuth_AuthResendCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthResendCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServer).AuthResendCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuth_AuthResendCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServer).AuthResendCode(ctx, req.(*TLAuthResendCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuth_AuthCancelCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthCancelCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServer).AuthCancelCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuth_AuthCancelCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServer).AuthCancelCode(ctx, req.(*TLAuthCancelCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuth_AuthDropTempAuthKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthDropTempAuthKeys)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServer).AuthDropTempAuthKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAuth_AuthDropTempAuthKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServer).AuthDropTempAuthKeys(ctx, req.(*TLAuthDropTempAuthKeys))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCAuth_ServiceDesc is the grpc.ServiceDesc for RPCAuth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCAuth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCAuth",
	HandlerType: (*RPCAuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "auth_checkPhone",
			Handler:    _RPCAuth_AuthCheckPhone_Handler,
		},
		{
			MethodName: "auth_sendCode",
			Handler:    _RPCAuth_AuthSendCode_Handler,
		},
		{
			MethodName: "auth_signUp",
			Handler:    _RPCAuth_AuthSignUp_Handler,
		},
		{
			MethodName: "auth_signIn",
			Handler:    _RPCAuth_AuthSignIn_Handler,
		},
		{
			MethodName: "auth_logOut",
			Handler:    _RPCAuth_AuthLogOut_Handler,
		},
		{
			MethodName: "auth_resetAuthorizations",
			Handler:    _RPCAuth_AuthResetAuthorizations_Handler,
		},
		{
			MethodName: "auth_sendInvites",
			Handler:    _RPCAuth_AuthSendInvites_Handler,
		},
		{
			MethodName: "auth_exportAuthorization",
			Handler:    _RPCAuth_AuthExportAuthorization_Handler,
		},
		{
			MethodName: "auth_importAuthorization",
			Handler:    _RPCAuth_AuthImportAuthorization_Handler,
		},
		{
			MethodName: "auth_bindTempAuthKey",
			Handler:    _RPCAuth_AuthBindTempAuthKey_Handler,
		},
		{
			MethodName: "auth_importBotAuthorization",
			Handler:    _RPCAuth_AuthImportBotAuthorization_Handler,
		},
		{
			MethodName: "auth_checkPassword",
			Handler:    _RPCAuth_AuthCheckPassword_Handler,
		},
		{
			MethodName: "auth_requestPasswordRecovery",
			Handler:    _RPCAuth_AuthRequestPasswordRecovery_Handler,
		},
		{
			MethodName: "auth_recoverPassword",
			Handler:    _RPCAuth_AuthRecoverPassword_Handler,
		},
		{
			MethodName: "auth_resendCode",
			Handler:    _RPCAuth_AuthResendCode_Handler,
		},
		{
			MethodName: "auth_cancelCode",
			Handler:    _RPCAuth_AuthCancelCode_Handler,
		},
		{
			MethodName: "auth_dropTempAuthKeys",
			Handler:    _RPCAuth_AuthDropTempAuthKeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCUsers_UsersGetUsers_FullMethodName    = "/mtproto.RPCUsers/users_getUsers"
	RPCUsers_UsersGetFullUser_FullMethodName = "/mtproto.RPCUsers/users_getFullUser"
)

// RPCUsersClient is the client API for RPCUsers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCUsersClient interface {
	// users.getUsers#d91a548 id:Vector<InputUser> = Vector<User>;
	UsersGetUsers(ctx context.Context, in *TLUsersGetUsers, opts ...grpc.CallOption) (*Vector_User, error)
	// users.getFullUser#ca30a5b1 id:InputUser = UserFull;
	UsersGetFullUser(ctx context.Context, in *TLUsersGetFullUser, opts ...grpc.CallOption) (*UserFull, error)
}

type rPCUsersClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCUsersClient(cc grpc.ClientConnInterface) RPCUsersClient {
	return &rPCUsersClient{cc}
}

func (c *rPCUsersClient) UsersGetUsers(ctx context.Context, in *TLUsersGetUsers, opts ...grpc.CallOption) (*Vector_User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_User)
	err := c.cc.Invoke(ctx, RPCUsers_UsersGetUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUsersClient) UsersGetFullUser(ctx context.Context, in *TLUsersGetFullUser, opts ...grpc.CallOption) (*UserFull, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserFull)
	err := c.cc.Invoke(ctx, RPCUsers_UsersGetFullUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCUsersServer is the server API for RPCUsers service.
// All implementations must embed UnimplementedRPCUsersServer
// for forward compatibility.
type RPCUsersServer interface {
	// users.getUsers#d91a548 id:Vector<InputUser> = Vector<User>;
	UsersGetUsers(context.Context, *TLUsersGetUsers) (*Vector_User, error)
	// users.getFullUser#ca30a5b1 id:InputUser = UserFull;
	UsersGetFullUser(context.Context, *TLUsersGetFullUser) (*UserFull, error)
	mustEmbedUnimplementedRPCUsersServer()
}

// UnimplementedRPCUsersServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCUsersServer struct{}

func (UnimplementedRPCUsersServer) UsersGetUsers(context.Context, *TLUsersGetUsers) (*Vector_User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersGetUsers not implemented")
}
func (UnimplementedRPCUsersServer) UsersGetFullUser(context.Context, *TLUsersGetFullUser) (*UserFull, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersGetFullUser not implemented")
}
func (UnimplementedRPCUsersServer) mustEmbedUnimplementedRPCUsersServer() {}
func (UnimplementedRPCUsersServer) testEmbeddedByValue()                  {}

// UnsafeRPCUsersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCUsersServer will
// result in compilation errors.
type UnsafeRPCUsersServer interface {
	mustEmbedUnimplementedRPCUsersServer()
}

func RegisterRPCUsersServer(s grpc.ServiceRegistrar, srv RPCUsersServer) {
	// If the following call pancis, it indicates UnimplementedRPCUsersServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCUsers_ServiceDesc, srv)
}

func _RPCUsers_UsersGetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUsersGetUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUsersServer).UsersGetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUsers_UsersGetUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUsersServer).UsersGetUsers(ctx, req.(*TLUsersGetUsers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUsers_UsersGetFullUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUsersGetFullUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUsersServer).UsersGetFullUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUsers_UsersGetFullUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUsersServer).UsersGetFullUser(ctx, req.(*TLUsersGetFullUser))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCUsers_ServiceDesc is the grpc.ServiceDesc for RPCUsers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCUsers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCUsers",
	HandlerType: (*RPCUsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "users_getUsers",
			Handler:    _RPCUsers_UsersGetUsers_Handler,
		},
		{
			MethodName: "users_getFullUser",
			Handler:    _RPCUsers_UsersGetFullUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCPhotos_PhotosUpdateProfilePhoto_FullMethodName = "/mtproto.RPCPhotos/photos_updateProfilePhoto"
	RPCPhotos_PhotosUploadProfilePhoto_FullMethodName = "/mtproto.RPCPhotos/photos_uploadProfilePhoto"
	RPCPhotos_PhotosDeletePhotos_FullMethodName       = "/mtproto.RPCPhotos/photos_deletePhotos"
	RPCPhotos_PhotosGetUserPhotos_FullMethodName      = "/mtproto.RPCPhotos/photos_getUserPhotos"
)

// RPCPhotosClient is the client API for RPCPhotos service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCPhotosClient interface {
	// photos.updateProfilePhoto#f0bb5152 id:InputPhoto = UserProfilePhoto;
	PhotosUpdateProfilePhoto(ctx context.Context, in *TLPhotosUpdateProfilePhoto, opts ...grpc.CallOption) (*UserProfilePhoto, error)
	// photos.uploadProfilePhoto#4f32c098 file:InputFile = photos.Photo;
	PhotosUploadProfilePhoto(ctx context.Context, in *TLPhotosUploadProfilePhoto, opts ...grpc.CallOption) (*Photos_Photo, error)
	// photos.deletePhotos#87cf7f2f id:Vector<InputPhoto> = Vector<long>;
	PhotosDeletePhotos(ctx context.Context, in *TLPhotosDeletePhotos, opts ...grpc.CallOption) (*VectorLong, error)
	// photos.getUserPhotos#91cd32a8 user_id:InputUser offset:int max_id:long limit:int = photos.Photos;
	PhotosGetUserPhotos(ctx context.Context, in *TLPhotosGetUserPhotos, opts ...grpc.CallOption) (*Photos_Photos, error)
}

type rPCPhotosClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCPhotosClient(cc grpc.ClientConnInterface) RPCPhotosClient {
	return &rPCPhotosClient{cc}
}

func (c *rPCPhotosClient) PhotosUpdateProfilePhoto(ctx context.Context, in *TLPhotosUpdateProfilePhoto, opts ...grpc.CallOption) (*UserProfilePhoto, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserProfilePhoto)
	err := c.cc.Invoke(ctx, RPCPhotos_PhotosUpdateProfilePhoto_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhotosClient) PhotosUploadProfilePhoto(ctx context.Context, in *TLPhotosUploadProfilePhoto, opts ...grpc.CallOption) (*Photos_Photo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Photos_Photo)
	err := c.cc.Invoke(ctx, RPCPhotos_PhotosUploadProfilePhoto_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhotosClient) PhotosDeletePhotos(ctx context.Context, in *TLPhotosDeletePhotos, opts ...grpc.CallOption) (*VectorLong, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VectorLong)
	err := c.cc.Invoke(ctx, RPCPhotos_PhotosDeletePhotos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhotosClient) PhotosGetUserPhotos(ctx context.Context, in *TLPhotosGetUserPhotos, opts ...grpc.CallOption) (*Photos_Photos, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Photos_Photos)
	err := c.cc.Invoke(ctx, RPCPhotos_PhotosGetUserPhotos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCPhotosServer is the server API for RPCPhotos service.
// All implementations must embed UnimplementedRPCPhotosServer
// for forward compatibility.
type RPCPhotosServer interface {
	// photos.updateProfilePhoto#f0bb5152 id:InputPhoto = UserProfilePhoto;
	PhotosUpdateProfilePhoto(context.Context, *TLPhotosUpdateProfilePhoto) (*UserProfilePhoto, error)
	// photos.uploadProfilePhoto#4f32c098 file:InputFile = photos.Photo;
	PhotosUploadProfilePhoto(context.Context, *TLPhotosUploadProfilePhoto) (*Photos_Photo, error)
	// photos.deletePhotos#87cf7f2f id:Vector<InputPhoto> = Vector<long>;
	PhotosDeletePhotos(context.Context, *TLPhotosDeletePhotos) (*VectorLong, error)
	// photos.getUserPhotos#91cd32a8 user_id:InputUser offset:int max_id:long limit:int = photos.Photos;
	PhotosGetUserPhotos(context.Context, *TLPhotosGetUserPhotos) (*Photos_Photos, error)
	mustEmbedUnimplementedRPCPhotosServer()
}

// UnimplementedRPCPhotosServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCPhotosServer struct{}

func (UnimplementedRPCPhotosServer) PhotosUpdateProfilePhoto(context.Context, *TLPhotosUpdateProfilePhoto) (*UserProfilePhoto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhotosUpdateProfilePhoto not implemented")
}
func (UnimplementedRPCPhotosServer) PhotosUploadProfilePhoto(context.Context, *TLPhotosUploadProfilePhoto) (*Photos_Photo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhotosUploadProfilePhoto not implemented")
}
func (UnimplementedRPCPhotosServer) PhotosDeletePhotos(context.Context, *TLPhotosDeletePhotos) (*VectorLong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhotosDeletePhotos not implemented")
}
func (UnimplementedRPCPhotosServer) PhotosGetUserPhotos(context.Context, *TLPhotosGetUserPhotos) (*Photos_Photos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhotosGetUserPhotos not implemented")
}
func (UnimplementedRPCPhotosServer) mustEmbedUnimplementedRPCPhotosServer() {}
func (UnimplementedRPCPhotosServer) testEmbeddedByValue()                   {}

// UnsafeRPCPhotosServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCPhotosServer will
// result in compilation errors.
type UnsafeRPCPhotosServer interface {
	mustEmbedUnimplementedRPCPhotosServer()
}

func RegisterRPCPhotosServer(s grpc.ServiceRegistrar, srv RPCPhotosServer) {
	// If the following call pancis, it indicates UnimplementedRPCPhotosServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCPhotos_ServiceDesc, srv)
}

func _RPCPhotos_PhotosUpdateProfilePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhotosUpdateProfilePhoto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhotosServer).PhotosUpdateProfilePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPhotos_PhotosUpdateProfilePhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhotosServer).PhotosUpdateProfilePhoto(ctx, req.(*TLPhotosUpdateProfilePhoto))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhotos_PhotosUploadProfilePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhotosUploadProfilePhoto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhotosServer).PhotosUploadProfilePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPhotos_PhotosUploadProfilePhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhotosServer).PhotosUploadProfilePhoto(ctx, req.(*TLPhotosUploadProfilePhoto))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhotos_PhotosDeletePhotos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhotosDeletePhotos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhotosServer).PhotosDeletePhotos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPhotos_PhotosDeletePhotos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhotosServer).PhotosDeletePhotos(ctx, req.(*TLPhotosDeletePhotos))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhotos_PhotosGetUserPhotos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhotosGetUserPhotos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhotosServer).PhotosGetUserPhotos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPhotos_PhotosGetUserPhotos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhotosServer).PhotosGetUserPhotos(ctx, req.(*TLPhotosGetUserPhotos))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCPhotos_ServiceDesc is the grpc.ServiceDesc for RPCPhotos service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCPhotos_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCPhotos",
	HandlerType: (*RPCPhotosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "photos_updateProfilePhoto",
			Handler:    _RPCPhotos_PhotosUpdateProfilePhoto_Handler,
		},
		{
			MethodName: "photos_uploadProfilePhoto",
			Handler:    _RPCPhotos_PhotosUploadProfilePhoto_Handler,
		},
		{
			MethodName: "photos_deletePhotos",
			Handler:    _RPCPhotos_PhotosDeletePhotos_Handler,
		},
		{
			MethodName: "photos_getUserPhotos",
			Handler:    _RPCPhotos_PhotosGetUserPhotos_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCPayments_PaymentsGetPaymentForm_FullMethodName        = "/mtproto.RPCPayments/payments_getPaymentForm"
	RPCPayments_PaymentsGetPaymentReceipt_FullMethodName     = "/mtproto.RPCPayments/payments_getPaymentReceipt"
	RPCPayments_PaymentsValidateRequestedInfo_FullMethodName = "/mtproto.RPCPayments/payments_validateRequestedInfo"
	RPCPayments_PaymentsSendPaymentForm_FullMethodName       = "/mtproto.RPCPayments/payments_sendPaymentForm"
	RPCPayments_PaymentsGetSavedInfo_FullMethodName          = "/mtproto.RPCPayments/payments_getSavedInfo"
	RPCPayments_PaymentsClearSavedInfo_FullMethodName        = "/mtproto.RPCPayments/payments_clearSavedInfo"
)

// RPCPaymentsClient is the client API for RPCPayments service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCPaymentsClient interface {
	// payments.getPaymentForm#99f09745 msg_id:int = payments.PaymentForm;
	PaymentsGetPaymentForm(ctx context.Context, in *TLPaymentsGetPaymentForm, opts ...grpc.CallOption) (*Payments_PaymentForm, error)
	// payments.getPaymentReceipt#a092a980 msg_id:int = payments.PaymentReceipt;
	PaymentsGetPaymentReceipt(ctx context.Context, in *TLPaymentsGetPaymentReceipt, opts ...grpc.CallOption) (*Payments_PaymentReceipt, error)
	// payments.validateRequestedInfo#770a8e74 flags:# save:flags.0?true msg_id:int info:PaymentRequestedInfo = payments.ValidatedRequestedInfo;
	PaymentsValidateRequestedInfo(ctx context.Context, in *TLPaymentsValidateRequestedInfo, opts ...grpc.CallOption) (*Payments_ValidatedRequestedInfo, error)
	// payments.sendPaymentForm#2b8879b3 flags:# msg_id:int requested_info_id:flags.0?string shipping_option_id:flags.1?string credentials:InputPaymentCredentials = payments.PaymentResult;
	PaymentsSendPaymentForm(ctx context.Context, in *TLPaymentsSendPaymentForm, opts ...grpc.CallOption) (*Payments_PaymentResult, error)
	// payments.getSavedInfo#227d824b = payments.SavedInfo;
	PaymentsGetSavedInfo(ctx context.Context, in *TLPaymentsGetSavedInfo, opts ...grpc.CallOption) (*Payments_SavedInfo, error)
	// payments.clearSavedInfo#d83d70c1 flags:# credentials:flags.0?true info:flags.1?true = Bool;
	PaymentsClearSavedInfo(ctx context.Context, in *TLPaymentsClearSavedInfo, opts ...grpc.CallOption) (*Bool, error)
}

type rPCPaymentsClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCPaymentsClient(cc grpc.ClientConnInterface) RPCPaymentsClient {
	return &rPCPaymentsClient{cc}
}

func (c *rPCPaymentsClient) PaymentsGetPaymentForm(ctx context.Context, in *TLPaymentsGetPaymentForm, opts ...grpc.CallOption) (*Payments_PaymentForm, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payments_PaymentForm)
	err := c.cc.Invoke(ctx, RPCPayments_PaymentsGetPaymentForm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPaymentsClient) PaymentsGetPaymentReceipt(ctx context.Context, in *TLPaymentsGetPaymentReceipt, opts ...grpc.CallOption) (*Payments_PaymentReceipt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payments_PaymentReceipt)
	err := c.cc.Invoke(ctx, RPCPayments_PaymentsGetPaymentReceipt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPaymentsClient) PaymentsValidateRequestedInfo(ctx context.Context, in *TLPaymentsValidateRequestedInfo, opts ...grpc.CallOption) (*Payments_ValidatedRequestedInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payments_ValidatedRequestedInfo)
	err := c.cc.Invoke(ctx, RPCPayments_PaymentsValidateRequestedInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPaymentsClient) PaymentsSendPaymentForm(ctx context.Context, in *TLPaymentsSendPaymentForm, opts ...grpc.CallOption) (*Payments_PaymentResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payments_PaymentResult)
	err := c.cc.Invoke(ctx, RPCPayments_PaymentsSendPaymentForm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPaymentsClient) PaymentsGetSavedInfo(ctx context.Context, in *TLPaymentsGetSavedInfo, opts ...grpc.CallOption) (*Payments_SavedInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payments_SavedInfo)
	err := c.cc.Invoke(ctx, RPCPayments_PaymentsGetSavedInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPaymentsClient) PaymentsClearSavedInfo(ctx context.Context, in *TLPaymentsClearSavedInfo, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCPayments_PaymentsClearSavedInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCPaymentsServer is the server API for RPCPayments service.
// All implementations must embed UnimplementedRPCPaymentsServer
// for forward compatibility.
type RPCPaymentsServer interface {
	// payments.getPaymentForm#99f09745 msg_id:int = payments.PaymentForm;
	PaymentsGetPaymentForm(context.Context, *TLPaymentsGetPaymentForm) (*Payments_PaymentForm, error)
	// payments.getPaymentReceipt#a092a980 msg_id:int = payments.PaymentReceipt;
	PaymentsGetPaymentReceipt(context.Context, *TLPaymentsGetPaymentReceipt) (*Payments_PaymentReceipt, error)
	// payments.validateRequestedInfo#770a8e74 flags:# save:flags.0?true msg_id:int info:PaymentRequestedInfo = payments.ValidatedRequestedInfo;
	PaymentsValidateRequestedInfo(context.Context, *TLPaymentsValidateRequestedInfo) (*Payments_ValidatedRequestedInfo, error)
	// payments.sendPaymentForm#2b8879b3 flags:# msg_id:int requested_info_id:flags.0?string shipping_option_id:flags.1?string credentials:InputPaymentCredentials = payments.PaymentResult;
	PaymentsSendPaymentForm(context.Context, *TLPaymentsSendPaymentForm) (*Payments_PaymentResult, error)
	// payments.getSavedInfo#227d824b = payments.SavedInfo;
	PaymentsGetSavedInfo(context.Context, *TLPaymentsGetSavedInfo) (*Payments_SavedInfo, error)
	// payments.clearSavedInfo#d83d70c1 flags:# credentials:flags.0?true info:flags.1?true = Bool;
	PaymentsClearSavedInfo(context.Context, *TLPaymentsClearSavedInfo) (*Bool, error)
	mustEmbedUnimplementedRPCPaymentsServer()
}

// UnimplementedRPCPaymentsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCPaymentsServer struct{}

func (UnimplementedRPCPaymentsServer) PaymentsGetPaymentForm(context.Context, *TLPaymentsGetPaymentForm) (*Payments_PaymentForm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsGetPaymentForm not implemented")
}
func (UnimplementedRPCPaymentsServer) PaymentsGetPaymentReceipt(context.Context, *TLPaymentsGetPaymentReceipt) (*Payments_PaymentReceipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsGetPaymentReceipt not implemented")
}
func (UnimplementedRPCPaymentsServer) PaymentsValidateRequestedInfo(context.Context, *TLPaymentsValidateRequestedInfo) (*Payments_ValidatedRequestedInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsValidateRequestedInfo not implemented")
}
func (UnimplementedRPCPaymentsServer) PaymentsSendPaymentForm(context.Context, *TLPaymentsSendPaymentForm) (*Payments_PaymentResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsSendPaymentForm not implemented")
}
func (UnimplementedRPCPaymentsServer) PaymentsGetSavedInfo(context.Context, *TLPaymentsGetSavedInfo) (*Payments_SavedInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsGetSavedInfo not implemented")
}
func (UnimplementedRPCPaymentsServer) PaymentsClearSavedInfo(context.Context, *TLPaymentsClearSavedInfo) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsClearSavedInfo not implemented")
}
func (UnimplementedRPCPaymentsServer) mustEmbedUnimplementedRPCPaymentsServer() {}
func (UnimplementedRPCPaymentsServer) testEmbeddedByValue()                     {}

// UnsafeRPCPaymentsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCPaymentsServer will
// result in compilation errors.
type UnsafeRPCPaymentsServer interface {
	mustEmbedUnimplementedRPCPaymentsServer()
}

func RegisterRPCPaymentsServer(s grpc.ServiceRegistrar, srv RPCPaymentsServer) {
	// If the following call pancis, it indicates UnimplementedRPCPaymentsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCPayments_ServiceDesc, srv)
}

func _RPCPayments_PaymentsGetPaymentForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsGetPaymentForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPaymentsServer).PaymentsGetPaymentForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPayments_PaymentsGetPaymentForm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPaymentsServer).PaymentsGetPaymentForm(ctx, req.(*TLPaymentsGetPaymentForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPayments_PaymentsGetPaymentReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsGetPaymentReceipt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPaymentsServer).PaymentsGetPaymentReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPayments_PaymentsGetPaymentReceipt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPaymentsServer).PaymentsGetPaymentReceipt(ctx, req.(*TLPaymentsGetPaymentReceipt))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPayments_PaymentsValidateRequestedInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsValidateRequestedInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPaymentsServer).PaymentsValidateRequestedInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPayments_PaymentsValidateRequestedInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPaymentsServer).PaymentsValidateRequestedInfo(ctx, req.(*TLPaymentsValidateRequestedInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPayments_PaymentsSendPaymentForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsSendPaymentForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPaymentsServer).PaymentsSendPaymentForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPayments_PaymentsSendPaymentForm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPaymentsServer).PaymentsSendPaymentForm(ctx, req.(*TLPaymentsSendPaymentForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPayments_PaymentsGetSavedInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsGetSavedInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPaymentsServer).PaymentsGetSavedInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPayments_PaymentsGetSavedInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPaymentsServer).PaymentsGetSavedInfo(ctx, req.(*TLPaymentsGetSavedInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPayments_PaymentsClearSavedInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsClearSavedInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPaymentsServer).PaymentsClearSavedInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPayments_PaymentsClearSavedInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPaymentsServer).PaymentsClearSavedInfo(ctx, req.(*TLPaymentsClearSavedInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCPayments_ServiceDesc is the grpc.ServiceDesc for RPCPayments service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCPayments_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCPayments",
	HandlerType: (*RPCPaymentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "payments_getPaymentForm",
			Handler:    _RPCPayments_PaymentsGetPaymentForm_Handler,
		},
		{
			MethodName: "payments_getPaymentReceipt",
			Handler:    _RPCPayments_PaymentsGetPaymentReceipt_Handler,
		},
		{
			MethodName: "payments_validateRequestedInfo",
			Handler:    _RPCPayments_PaymentsValidateRequestedInfo_Handler,
		},
		{
			MethodName: "payments_sendPaymentForm",
			Handler:    _RPCPayments_PaymentsSendPaymentForm_Handler,
		},
		{
			MethodName: "payments_getSavedInfo",
			Handler:    _RPCPayments_PaymentsGetSavedInfo_Handler,
		},
		{
			MethodName: "payments_clearSavedInfo",
			Handler:    _RPCPayments_PaymentsClearSavedInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCPhone_PhoneGetCallConfig_FullMethodName = "/mtproto.RPCPhone/phone_getCallConfig"
	RPCPhone_PhoneRequestCall_FullMethodName   = "/mtproto.RPCPhone/phone_requestCall"
	RPCPhone_PhoneAcceptCall_FullMethodName    = "/mtproto.RPCPhone/phone_acceptCall"
	RPCPhone_PhoneConfirmCall_FullMethodName   = "/mtproto.RPCPhone/phone_confirmCall"
	RPCPhone_PhoneReceivedCall_FullMethodName  = "/mtproto.RPCPhone/phone_receivedCall"
	RPCPhone_PhoneDiscardCall_FullMethodName   = "/mtproto.RPCPhone/phone_discardCall"
	RPCPhone_PhoneSetCallRating_FullMethodName = "/mtproto.RPCPhone/phone_setCallRating"
	RPCPhone_PhoneSaveCallDebug_FullMethodName = "/mtproto.RPCPhone/phone_saveCallDebug"
)

// RPCPhoneClient is the client API for RPCPhone service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCPhoneClient interface {
	// phone.getCallConfig#55451fa9 = DataJSON;
	PhoneGetCallConfig(ctx context.Context, in *TLPhoneGetCallConfig, opts ...grpc.CallOption) (*DataJSON, error)
	// phone.requestCall#5b95b3d4 user_id:InputUser random_id:int g_a_hash:bytes protocol:PhoneCallProtocol = phone.PhoneCall;
	PhoneRequestCall(ctx context.Context, in *TLPhoneRequestCall, opts ...grpc.CallOption) (*Phone_PhoneCall, error)
	// phone.acceptCall#3bd2b4a0 peer:InputPhoneCall g_b:bytes protocol:PhoneCallProtocol = phone.PhoneCall;
	PhoneAcceptCall(ctx context.Context, in *TLPhoneAcceptCall, opts ...grpc.CallOption) (*Phone_PhoneCall, error)
	// phone.confirmCall#2efe1722 peer:InputPhoneCall g_a:bytes key_fingerprint:long protocol:PhoneCallProtocol = phone.PhoneCall;
	PhoneConfirmCall(ctx context.Context, in *TLPhoneConfirmCall, opts ...grpc.CallOption) (*Phone_PhoneCall, error)
	// phone.receivedCall#17d54f61 peer:InputPhoneCall = Bool;
	PhoneReceivedCall(ctx context.Context, in *TLPhoneReceivedCall, opts ...grpc.CallOption) (*Bool, error)
	// phone.discardCall#78d413a6 peer:InputPhoneCall duration:int reason:PhoneCallDiscardReason connection_id:long = Updates;
	PhoneDiscardCall(ctx context.Context, in *TLPhoneDiscardCall, opts ...grpc.CallOption) (*Updates, error)
	// phone.setCallRating#1c536a34 peer:InputPhoneCall rating:int comment:string = Updates;
	PhoneSetCallRating(ctx context.Context, in *TLPhoneSetCallRating, opts ...grpc.CallOption) (*Updates, error)
	// phone.saveCallDebug#277add7e peer:InputPhoneCall debug:DataJSON = Bool;
	PhoneSaveCallDebug(ctx context.Context, in *TLPhoneSaveCallDebug, opts ...grpc.CallOption) (*Bool, error)
}

type rPCPhoneClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCPhoneClient(cc grpc.ClientConnInterface) RPCPhoneClient {
	return &rPCPhoneClient{cc}
}

func (c *rPCPhoneClient) PhoneGetCallConfig(ctx context.Context, in *TLPhoneGetCallConfig, opts ...grpc.CallOption) (*DataJSON, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataJSON)
	err := c.cc.Invoke(ctx, RPCPhone_PhoneGetCallConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhoneClient) PhoneRequestCall(ctx context.Context, in *TLPhoneRequestCall, opts ...grpc.CallOption) (*Phone_PhoneCall, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Phone_PhoneCall)
	err := c.cc.Invoke(ctx, RPCPhone_PhoneRequestCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhoneClient) PhoneAcceptCall(ctx context.Context, in *TLPhoneAcceptCall, opts ...grpc.CallOption) (*Phone_PhoneCall, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Phone_PhoneCall)
	err := c.cc.Invoke(ctx, RPCPhone_PhoneAcceptCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhoneClient) PhoneConfirmCall(ctx context.Context, in *TLPhoneConfirmCall, opts ...grpc.CallOption) (*Phone_PhoneCall, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Phone_PhoneCall)
	err := c.cc.Invoke(ctx, RPCPhone_PhoneConfirmCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhoneClient) PhoneReceivedCall(ctx context.Context, in *TLPhoneReceivedCall, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCPhone_PhoneReceivedCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhoneClient) PhoneDiscardCall(ctx context.Context, in *TLPhoneDiscardCall, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCPhone_PhoneDiscardCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhoneClient) PhoneSetCallRating(ctx context.Context, in *TLPhoneSetCallRating, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCPhone_PhoneSetCallRating_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhoneClient) PhoneSaveCallDebug(ctx context.Context, in *TLPhoneSaveCallDebug, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCPhone_PhoneSaveCallDebug_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCPhoneServer is the server API for RPCPhone service.
// All implementations must embed UnimplementedRPCPhoneServer
// for forward compatibility.
type RPCPhoneServer interface {
	// phone.getCallConfig#55451fa9 = DataJSON;
	PhoneGetCallConfig(context.Context, *TLPhoneGetCallConfig) (*DataJSON, error)
	// phone.requestCall#5b95b3d4 user_id:InputUser random_id:int g_a_hash:bytes protocol:PhoneCallProtocol = phone.PhoneCall;
	PhoneRequestCall(context.Context, *TLPhoneRequestCall) (*Phone_PhoneCall, error)
	// phone.acceptCall#3bd2b4a0 peer:InputPhoneCall g_b:bytes protocol:PhoneCallProtocol = phone.PhoneCall;
	PhoneAcceptCall(context.Context, *TLPhoneAcceptCall) (*Phone_PhoneCall, error)
	// phone.confirmCall#2efe1722 peer:InputPhoneCall g_a:bytes key_fingerprint:long protocol:PhoneCallProtocol = phone.PhoneCall;
	PhoneConfirmCall(context.Context, *TLPhoneConfirmCall) (*Phone_PhoneCall, error)
	// phone.receivedCall#17d54f61 peer:InputPhoneCall = Bool;
	PhoneReceivedCall(context.Context, *TLPhoneReceivedCall) (*Bool, error)
	// phone.discardCall#78d413a6 peer:InputPhoneCall duration:int reason:PhoneCallDiscardReason connection_id:long = Updates;
	PhoneDiscardCall(context.Context, *TLPhoneDiscardCall) (*Updates, error)
	// phone.setCallRating#1c536a34 peer:InputPhoneCall rating:int comment:string = Updates;
	PhoneSetCallRating(context.Context, *TLPhoneSetCallRating) (*Updates, error)
	// phone.saveCallDebug#277add7e peer:InputPhoneCall debug:DataJSON = Bool;
	PhoneSaveCallDebug(context.Context, *TLPhoneSaveCallDebug) (*Bool, error)
	mustEmbedUnimplementedRPCPhoneServer()
}

// UnimplementedRPCPhoneServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCPhoneServer struct{}

func (UnimplementedRPCPhoneServer) PhoneGetCallConfig(context.Context, *TLPhoneGetCallConfig) (*DataJSON, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneGetCallConfig not implemented")
}
func (UnimplementedRPCPhoneServer) PhoneRequestCall(context.Context, *TLPhoneRequestCall) (*Phone_PhoneCall, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneRequestCall not implemented")
}
func (UnimplementedRPCPhoneServer) PhoneAcceptCall(context.Context, *TLPhoneAcceptCall) (*Phone_PhoneCall, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneAcceptCall not implemented")
}
func (UnimplementedRPCPhoneServer) PhoneConfirmCall(context.Context, *TLPhoneConfirmCall) (*Phone_PhoneCall, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneConfirmCall not implemented")
}
func (UnimplementedRPCPhoneServer) PhoneReceivedCall(context.Context, *TLPhoneReceivedCall) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneReceivedCall not implemented")
}
func (UnimplementedRPCPhoneServer) PhoneDiscardCall(context.Context, *TLPhoneDiscardCall) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneDiscardCall not implemented")
}
func (UnimplementedRPCPhoneServer) PhoneSetCallRating(context.Context, *TLPhoneSetCallRating) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneSetCallRating not implemented")
}
func (UnimplementedRPCPhoneServer) PhoneSaveCallDebug(context.Context, *TLPhoneSaveCallDebug) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneSaveCallDebug not implemented")
}
func (UnimplementedRPCPhoneServer) mustEmbedUnimplementedRPCPhoneServer() {}
func (UnimplementedRPCPhoneServer) testEmbeddedByValue()                  {}

// UnsafeRPCPhoneServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCPhoneServer will
// result in compilation errors.
type UnsafeRPCPhoneServer interface {
	mustEmbedUnimplementedRPCPhoneServer()
}

func RegisterRPCPhoneServer(s grpc.ServiceRegistrar, srv RPCPhoneServer) {
	// If the following call pancis, it indicates UnimplementedRPCPhoneServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCPhone_ServiceDesc, srv)
}

func _RPCPhone_PhoneGetCallConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneGetCallConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhoneServer).PhoneGetCallConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPhone_PhoneGetCallConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhoneServer).PhoneGetCallConfig(ctx, req.(*TLPhoneGetCallConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhone_PhoneRequestCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneRequestCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhoneServer).PhoneRequestCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPhone_PhoneRequestCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhoneServer).PhoneRequestCall(ctx, req.(*TLPhoneRequestCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhone_PhoneAcceptCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneAcceptCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhoneServer).PhoneAcceptCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPhone_PhoneAcceptCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhoneServer).PhoneAcceptCall(ctx, req.(*TLPhoneAcceptCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhone_PhoneConfirmCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneConfirmCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhoneServer).PhoneConfirmCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPhone_PhoneConfirmCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhoneServer).PhoneConfirmCall(ctx, req.(*TLPhoneConfirmCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhone_PhoneReceivedCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneReceivedCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhoneServer).PhoneReceivedCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPhone_PhoneReceivedCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhoneServer).PhoneReceivedCall(ctx, req.(*TLPhoneReceivedCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhone_PhoneDiscardCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneDiscardCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhoneServer).PhoneDiscardCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPhone_PhoneDiscardCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhoneServer).PhoneDiscardCall(ctx, req.(*TLPhoneDiscardCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhone_PhoneSetCallRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneSetCallRating)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhoneServer).PhoneSetCallRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPhone_PhoneSetCallRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhoneServer).PhoneSetCallRating(ctx, req.(*TLPhoneSetCallRating))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhone_PhoneSaveCallDebug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneSaveCallDebug)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhoneServer).PhoneSaveCallDebug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCPhone_PhoneSaveCallDebug_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhoneServer).PhoneSaveCallDebug(ctx, req.(*TLPhoneSaveCallDebug))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCPhone_ServiceDesc is the grpc.ServiceDesc for RPCPhone service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCPhone_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCPhone",
	HandlerType: (*RPCPhoneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "phone_getCallConfig",
			Handler:    _RPCPhone_PhoneGetCallConfig_Handler,
		},
		{
			MethodName: "phone_requestCall",
			Handler:    _RPCPhone_PhoneRequestCall_Handler,
		},
		{
			MethodName: "phone_acceptCall",
			Handler:    _RPCPhone_PhoneAcceptCall_Handler,
		},
		{
			MethodName: "phone_confirmCall",
			Handler:    _RPCPhone_PhoneConfirmCall_Handler,
		},
		{
			MethodName: "phone_receivedCall",
			Handler:    _RPCPhone_PhoneReceivedCall_Handler,
		},
		{
			MethodName: "phone_discardCall",
			Handler:    _RPCPhone_PhoneDiscardCall_Handler,
		},
		{
			MethodName: "phone_setCallRating",
			Handler:    _RPCPhone_PhoneSetCallRating_Handler,
		},
		{
			MethodName: "phone_saveCallDebug",
			Handler:    _RPCPhone_PhoneSaveCallDebug_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCContacts_ContactsGetStatuses_FullMethodName        = "/mtproto.RPCContacts/contacts_getStatuses"
	RPCContacts_ContactsGetContacts_FullMethodName        = "/mtproto.RPCContacts/contacts_getContacts"
	RPCContacts_ContactsImportContacts_FullMethodName     = "/mtproto.RPCContacts/contacts_importContacts"
	RPCContacts_ContactsDeleteContact_FullMethodName      = "/mtproto.RPCContacts/contacts_deleteContact"
	RPCContacts_ContactsDeleteContacts_FullMethodName     = "/mtproto.RPCContacts/contacts_deleteContacts"
	RPCContacts_ContactsBlock_FullMethodName              = "/mtproto.RPCContacts/contacts_block"
	RPCContacts_ContactsUnblock_FullMethodName            = "/mtproto.RPCContacts/contacts_unblock"
	RPCContacts_ContactsGetBlocked_FullMethodName         = "/mtproto.RPCContacts/contacts_getBlocked"
	RPCContacts_ContactsExportCard_FullMethodName         = "/mtproto.RPCContacts/contacts_exportCard"
	RPCContacts_ContactsImportCard_FullMethodName         = "/mtproto.RPCContacts/contacts_importCard"
	RPCContacts_ContactsSearch_FullMethodName             = "/mtproto.RPCContacts/contacts_search"
	RPCContacts_ContactsResolveUsername_FullMethodName    = "/mtproto.RPCContacts/contacts_resolveUsername"
	RPCContacts_ContactsGetTopPeers_FullMethodName        = "/mtproto.RPCContacts/contacts_getTopPeers"
	RPCContacts_ContactsResetTopPeerRating_FullMethodName = "/mtproto.RPCContacts/contacts_resetTopPeerRating"
	RPCContacts_ContactsResetSaved_FullMethodName         = "/mtproto.RPCContacts/contacts_resetSaved"
)

// RPCContactsClient is the client API for RPCContacts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCContactsClient interface {
	// contacts.getStatuses#c4a353ee = Vector<ContactStatus>;
	ContactsGetStatuses(ctx context.Context, in *TLContactsGetStatuses, opts ...grpc.CallOption) (*Vector_ContactStatus, error)
	// contacts.getContacts#c023849f hash:int = contacts.Contacts;
	ContactsGetContacts(ctx context.Context, in *TLContactsGetContacts, opts ...grpc.CallOption) (*Contacts_Contacts, error)
	// contacts.importContacts#2c800be5 contacts:Vector<InputContact> = contacts.ImportedContacts;
	ContactsImportContacts(ctx context.Context, in *TLContactsImportContacts, opts ...grpc.CallOption) (*Contacts_ImportedContacts, error)
	// contacts.deleteContact#8e953744 id:InputUser = contacts.Link;
	ContactsDeleteContact(ctx context.Context, in *TLContactsDeleteContact, opts ...grpc.CallOption) (*Contacts_Link, error)
	// contacts.deleteContacts#59ab389e id:Vector<InputUser> = Bool;
	ContactsDeleteContacts(ctx context.Context, in *TLContactsDeleteContacts, opts ...grpc.CallOption) (*Bool, error)
	// contacts.block#332b49fc id:InputUser = Bool;
	ContactsBlock(ctx context.Context, in *TLContactsBlock, opts ...grpc.CallOption) (*Bool, error)
	// contacts.unblock#e54100bd id:InputUser = Bool;
	ContactsUnblock(ctx context.Context, in *TLContactsUnblock, opts ...grpc.CallOption) (*Bool, error)
	// contacts.getBlocked#f57c350f offset:int limit:int = contacts.Blocked;
	ContactsGetBlocked(ctx context.Context, in *TLContactsGetBlocked, opts ...grpc.CallOption) (*Contacts_Blocked, error)
	// contacts.exportCard#84e53737 = Vector<int>;
	ContactsExportCard(ctx context.Context, in *TLContactsExportCard, opts ...grpc.CallOption) (*VectorInt, error)
	// contacts.importCard#4fe196fe export_card:Vector<int> = User;
	ContactsImportCard(ctx context.Context, in *TLContactsImportCard, opts ...grpc.CallOption) (*User, error)
	// contacts.search#11f812d8 q:string limit:int = contacts.Found;
	ContactsSearch(ctx context.Context, in *TLContactsSearch, opts ...grpc.CallOption) (*Contacts_Found, error)
	// contacts.resolveUsername#f93ccba3 username:string = contacts.ResolvedPeer;
	ContactsResolveUsername(ctx context.Context, in *TLContactsResolveUsername, opts ...grpc.CallOption) (*Contacts_ResolvedPeer, error)
	// contacts.getTopPeers#d4982db5 flags:# correspondents:flags.0?true bots_pm:flags.1?true bots_inline:flags.2?true phone_calls:flags.3?true groups:flags.10?true channels:flags.15?true offset:int limit:int hash:int = contacts.TopPeers;
	ContactsGetTopPeers(ctx context.Context, in *TLContactsGetTopPeers, opts ...grpc.CallOption) (*Contacts_TopPeers, error)
	// contacts.resetTopPeerRating#1ae373ac category:TopPeerCategory peer:InputPeer = Bool;
	ContactsResetTopPeerRating(ctx context.Context, in *TLContactsResetTopPeerRating, opts ...grpc.CallOption) (*Bool, error)
	// contacts.resetSaved#879537f1 = Bool;
	ContactsResetSaved(ctx context.Context, in *TLContactsResetSaved, opts ...grpc.CallOption) (*Bool, error)
}

type rPCContactsClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCContactsClient(cc grpc.ClientConnInterface) RPCContactsClient {
	return &rPCContactsClient{cc}
}

func (c *rPCContactsClient) ContactsGetStatuses(ctx context.Context, in *TLContactsGetStatuses, opts ...grpc.CallOption) (*Vector_ContactStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_ContactStatus)
	err := c.cc.Invoke(ctx, RPCContacts_ContactsGetStatuses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsGetContacts(ctx context.Context, in *TLContactsGetContacts, opts ...grpc.CallOption) (*Contacts_Contacts, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Contacts_Contacts)
	err := c.cc.Invoke(ctx, RPCContacts_ContactsGetContacts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsImportContacts(ctx context.Context, in *TLContactsImportContacts, opts ...grpc.CallOption) (*Contacts_ImportedContacts, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Contacts_ImportedContacts)
	err := c.cc.Invoke(ctx, RPCContacts_ContactsImportContacts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsDeleteContact(ctx context.Context, in *TLContactsDeleteContact, opts ...grpc.CallOption) (*Contacts_Link, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Contacts_Link)
	err := c.cc.Invoke(ctx, RPCContacts_ContactsDeleteContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsDeleteContacts(ctx context.Context, in *TLContactsDeleteContacts, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCContacts_ContactsDeleteContacts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsBlock(ctx context.Context, in *TLContactsBlock, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCContacts_ContactsBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsUnblock(ctx context.Context, in *TLContactsUnblock, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCContacts_ContactsUnblock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsGetBlocked(ctx context.Context, in *TLContactsGetBlocked, opts ...grpc.CallOption) (*Contacts_Blocked, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Contacts_Blocked)
	err := c.cc.Invoke(ctx, RPCContacts_ContactsGetBlocked_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsExportCard(ctx context.Context, in *TLContactsExportCard, opts ...grpc.CallOption) (*VectorInt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VectorInt)
	err := c.cc.Invoke(ctx, RPCContacts_ContactsExportCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsImportCard(ctx context.Context, in *TLContactsImportCard, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, RPCContacts_ContactsImportCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsSearch(ctx context.Context, in *TLContactsSearch, opts ...grpc.CallOption) (*Contacts_Found, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Contacts_Found)
	err := c.cc.Invoke(ctx, RPCContacts_ContactsSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsResolveUsername(ctx context.Context, in *TLContactsResolveUsername, opts ...grpc.CallOption) (*Contacts_ResolvedPeer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Contacts_ResolvedPeer)
	err := c.cc.Invoke(ctx, RPCContacts_ContactsResolveUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsGetTopPeers(ctx context.Context, in *TLContactsGetTopPeers, opts ...grpc.CallOption) (*Contacts_TopPeers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Contacts_TopPeers)
	err := c.cc.Invoke(ctx, RPCContacts_ContactsGetTopPeers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsResetTopPeerRating(ctx context.Context, in *TLContactsResetTopPeerRating, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCContacts_ContactsResetTopPeerRating_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsResetSaved(ctx context.Context, in *TLContactsResetSaved, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCContacts_ContactsResetSaved_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCContactsServer is the server API for RPCContacts service.
// All implementations must embed UnimplementedRPCContactsServer
// for forward compatibility.
type RPCContactsServer interface {
	// contacts.getStatuses#c4a353ee = Vector<ContactStatus>;
	ContactsGetStatuses(context.Context, *TLContactsGetStatuses) (*Vector_ContactStatus, error)
	// contacts.getContacts#c023849f hash:int = contacts.Contacts;
	ContactsGetContacts(context.Context, *TLContactsGetContacts) (*Contacts_Contacts, error)
	// contacts.importContacts#2c800be5 contacts:Vector<InputContact> = contacts.ImportedContacts;
	ContactsImportContacts(context.Context, *TLContactsImportContacts) (*Contacts_ImportedContacts, error)
	// contacts.deleteContact#8e953744 id:InputUser = contacts.Link;
	ContactsDeleteContact(context.Context, *TLContactsDeleteContact) (*Contacts_Link, error)
	// contacts.deleteContacts#59ab389e id:Vector<InputUser> = Bool;
	ContactsDeleteContacts(context.Context, *TLContactsDeleteContacts) (*Bool, error)
	// contacts.block#332b49fc id:InputUser = Bool;
	ContactsBlock(context.Context, *TLContactsBlock) (*Bool, error)
	// contacts.unblock#e54100bd id:InputUser = Bool;
	ContactsUnblock(context.Context, *TLContactsUnblock) (*Bool, error)
	// contacts.getBlocked#f57c350f offset:int limit:int = contacts.Blocked;
	ContactsGetBlocked(context.Context, *TLContactsGetBlocked) (*Contacts_Blocked, error)
	// contacts.exportCard#84e53737 = Vector<int>;
	ContactsExportCard(context.Context, *TLContactsExportCard) (*VectorInt, error)
	// contacts.importCard#4fe196fe export_card:Vector<int> = User;
	ContactsImportCard(context.Context, *TLContactsImportCard) (*User, error)
	// contacts.search#11f812d8 q:string limit:int = contacts.Found;
	ContactsSearch(context.Context, *TLContactsSearch) (*Contacts_Found, error)
	// contacts.resolveUsername#f93ccba3 username:string = contacts.ResolvedPeer;
	ContactsResolveUsername(context.Context, *TLContactsResolveUsername) (*Contacts_ResolvedPeer, error)
	// contacts.getTopPeers#d4982db5 flags:# correspondents:flags.0?true bots_pm:flags.1?true bots_inline:flags.2?true phone_calls:flags.3?true groups:flags.10?true channels:flags.15?true offset:int limit:int hash:int = contacts.TopPeers;
	ContactsGetTopPeers(context.Context, *TLContactsGetTopPeers) (*Contacts_TopPeers, error)
	// contacts.resetTopPeerRating#1ae373ac category:TopPeerCategory peer:InputPeer = Bool;
	ContactsResetTopPeerRating(context.Context, *TLContactsResetTopPeerRating) (*Bool, error)
	// contacts.resetSaved#879537f1 = Bool;
	ContactsResetSaved(context.Context, *TLContactsResetSaved) (*Bool, error)
	mustEmbedUnimplementedRPCContactsServer()
}

// UnimplementedRPCContactsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCContactsServer struct{}

func (UnimplementedRPCContactsServer) ContactsGetStatuses(context.Context, *TLContactsGetStatuses) (*Vector_ContactStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsGetStatuses not implemented")
}
func (UnimplementedRPCContactsServer) ContactsGetContacts(context.Context, *TLContactsGetContacts) (*Contacts_Contacts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsGetContacts not implemented")
}
func (UnimplementedRPCContactsServer) ContactsImportContacts(context.Context, *TLContactsImportContacts) (*Contacts_ImportedContacts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsImportContacts not implemented")
}
func (UnimplementedRPCContactsServer) ContactsDeleteContact(context.Context, *TLContactsDeleteContact) (*Contacts_Link, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsDeleteContact not implemented")
}
func (UnimplementedRPCContactsServer) ContactsDeleteContacts(context.Context, *TLContactsDeleteContacts) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsDeleteContacts not implemented")
}
func (UnimplementedRPCContactsServer) ContactsBlock(context.Context, *TLContactsBlock) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsBlock not implemented")
}
func (UnimplementedRPCContactsServer) ContactsUnblock(context.Context, *TLContactsUnblock) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsUnblock not implemented")
}
func (UnimplementedRPCContactsServer) ContactsGetBlocked(context.Context, *TLContactsGetBlocked) (*Contacts_Blocked, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsGetBlocked not implemented")
}
func (UnimplementedRPCContactsServer) ContactsExportCard(context.Context, *TLContactsExportCard) (*VectorInt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsExportCard not implemented")
}
func (UnimplementedRPCContactsServer) ContactsImportCard(context.Context, *TLContactsImportCard) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsImportCard not implemented")
}
func (UnimplementedRPCContactsServer) ContactsSearch(context.Context, *TLContactsSearch) (*Contacts_Found, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsSearch not implemented")
}
func (UnimplementedRPCContactsServer) ContactsResolveUsername(context.Context, *TLContactsResolveUsername) (*Contacts_ResolvedPeer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsResolveUsername not implemented")
}
func (UnimplementedRPCContactsServer) ContactsGetTopPeers(context.Context, *TLContactsGetTopPeers) (*Contacts_TopPeers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsGetTopPeers not implemented")
}
func (UnimplementedRPCContactsServer) ContactsResetTopPeerRating(context.Context, *TLContactsResetTopPeerRating) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsResetTopPeerRating not implemented")
}
func (UnimplementedRPCContactsServer) ContactsResetSaved(context.Context, *TLContactsResetSaved) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsResetSaved not implemented")
}
func (UnimplementedRPCContactsServer) mustEmbedUnimplementedRPCContactsServer() {}
func (UnimplementedRPCContactsServer) testEmbeddedByValue()                     {}

// UnsafeRPCContactsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCContactsServer will
// result in compilation errors.
type UnsafeRPCContactsServer interface {
	mustEmbedUnimplementedRPCContactsServer()
}

func RegisterRPCContactsServer(s grpc.ServiceRegistrar, srv RPCContactsServer) {
	// If the following call pancis, it indicates UnimplementedRPCContactsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCContacts_ServiceDesc, srv)
}

func _RPCContacts_ContactsGetStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsGetStatuses)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsGetStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCContacts_ContactsGetStatuses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsGetStatuses(ctx, req.(*TLContactsGetStatuses))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsGetContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsGetContacts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsGetContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCContacts_ContactsGetContacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsGetContacts(ctx, req.(*TLContactsGetContacts))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsImportContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsImportContacts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsImportContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCContacts_ContactsImportContacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsImportContacts(ctx, req.(*TLContactsImportContacts))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsDeleteContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsDeleteContact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsDeleteContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCContacts_ContactsDeleteContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsDeleteContact(ctx, req.(*TLContactsDeleteContact))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsDeleteContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsDeleteContacts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsDeleteContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCContacts_ContactsDeleteContacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsDeleteContacts(ctx, req.(*TLContactsDeleteContacts))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCContacts_ContactsBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsBlock(ctx, req.(*TLContactsBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsUnblock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsUnblock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsUnblock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCContacts_ContactsUnblock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsUnblock(ctx, req.(*TLContactsUnblock))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsGetBlocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsGetBlocked)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsGetBlocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCContacts_ContactsGetBlocked_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsGetBlocked(ctx, req.(*TLContactsGetBlocked))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsExportCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsExportCard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsExportCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCContacts_ContactsExportCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsExportCard(ctx, req.(*TLContactsExportCard))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsImportCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsImportCard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsImportCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCContacts_ContactsImportCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsImportCard(ctx, req.(*TLContactsImportCard))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCContacts_ContactsSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsSearch(ctx, req.(*TLContactsSearch))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsResolveUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsResolveUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsResolveUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCContacts_ContactsResolveUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsResolveUsername(ctx, req.(*TLContactsResolveUsername))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsGetTopPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsGetTopPeers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsGetTopPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCContacts_ContactsGetTopPeers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsGetTopPeers(ctx, req.(*TLContactsGetTopPeers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsResetTopPeerRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsResetTopPeerRating)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsResetTopPeerRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCContacts_ContactsResetTopPeerRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsResetTopPeerRating(ctx, req.(*TLContactsResetTopPeerRating))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsResetSaved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsResetSaved)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsResetSaved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCContacts_ContactsResetSaved_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsResetSaved(ctx, req.(*TLContactsResetSaved))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCContacts_ServiceDesc is the grpc.ServiceDesc for RPCContacts service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCContacts_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCContacts",
	HandlerType: (*RPCContactsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "contacts_getStatuses",
			Handler:    _RPCContacts_ContactsGetStatuses_Handler,
		},
		{
			MethodName: "contacts_getContacts",
			Handler:    _RPCContacts_ContactsGetContacts_Handler,
		},
		{
			MethodName: "contacts_importContacts",
			Handler:    _RPCContacts_ContactsImportContacts_Handler,
		},
		{
			MethodName: "contacts_deleteContact",
			Handler:    _RPCContacts_ContactsDeleteContact_Handler,
		},
		{
			MethodName: "contacts_deleteContacts",
			Handler:    _RPCContacts_ContactsDeleteContacts_Handler,
		},
		{
			MethodName: "contacts_block",
			Handler:    _RPCContacts_ContactsBlock_Handler,
		},
		{
			MethodName: "contacts_unblock",
			Handler:    _RPCContacts_ContactsUnblock_Handler,
		},
		{
			MethodName: "contacts_getBlocked",
			Handler:    _RPCContacts_ContactsGetBlocked_Handler,
		},
		{
			MethodName: "contacts_exportCard",
			Handler:    _RPCContacts_ContactsExportCard_Handler,
		},
		{
			MethodName: "contacts_importCard",
			Handler:    _RPCContacts_ContactsImportCard_Handler,
		},
		{
			MethodName: "contacts_search",
			Handler:    _RPCContacts_ContactsSearch_Handler,
		},
		{
			MethodName: "contacts_resolveUsername",
			Handler:    _RPCContacts_ContactsResolveUsername_Handler,
		},
		{
			MethodName: "contacts_getTopPeers",
			Handler:    _RPCContacts_ContactsGetTopPeers_Handler,
		},
		{
			MethodName: "contacts_resetTopPeerRating",
			Handler:    _RPCContacts_ContactsResetTopPeerRating_Handler,
		},
		{
			MethodName: "contacts_resetSaved",
			Handler:    _RPCContacts_ContactsResetSaved_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCMessages_MessagesGetMessages_FullMethodName                = "/mtproto.RPCMessages/messages_getMessages"
	RPCMessages_MessagesGetDialogs_FullMethodName                 = "/mtproto.RPCMessages/messages_getDialogs"
	RPCMessages_MessagesGetHistory_FullMethodName                 = "/mtproto.RPCMessages/messages_getHistory"
	RPCMessages_MessagesSearch_FullMethodName                     = "/mtproto.RPCMessages/messages_search"
	RPCMessages_MessagesReadHistory_FullMethodName                = "/mtproto.RPCMessages/messages_readHistory"
	RPCMessages_MessagesDeleteHistory_FullMethodName              = "/mtproto.RPCMessages/messages_deleteHistory"
	RPCMessages_MessagesDeleteMessages_FullMethodName             = "/mtproto.RPCMessages/messages_deleteMessages"
	RPCMessages_MessagesReceivedMessages_FullMethodName           = "/mtproto.RPCMessages/messages_receivedMessages"
	RPCMessages_MessagesSetTyping_FullMethodName                  = "/mtproto.RPCMessages/messages_setTyping"
	RPCMessages_MessagesSendMessage_FullMethodName                = "/mtproto.RPCMessages/messages_sendMessage"
	RPCMessages_MessagesSendMedia_FullMethodName                  = "/mtproto.RPCMessages/messages_sendMedia"
	RPCMessages_MessagesForwardMessages_FullMethodName            = "/mtproto.RPCMessages/messages_forwardMessages"
	RPCMessages_MessagesReportSpam_FullMethodName                 = "/mtproto.RPCMessages/messages_reportSpam"
	RPCMessages_MessagesHideReportSpam_FullMethodName             = "/mtproto.RPCMessages/messages_hideReportSpam"
	RPCMessages_MessagesGetPeerSettings_FullMethodName            = "/mtproto.RPCMessages/messages_getPeerSettings"
	RPCMessages_MessagesGetChats_FullMethodName                   = "/mtproto.RPCMessages/messages_getChats"
	RPCMessages_MessagesGetFullChat_FullMethodName                = "/mtproto.RPCMessages/messages_getFullChat"
	RPCMessages_MessagesEditChatTitle_FullMethodName              = "/mtproto.RPCMessages/messages_editChatTitle"
	RPCMessages_MessagesEditChatPhoto_FullMethodName              = "/mtproto.RPCMessages/messages_editChatPhoto"
	RPCMessages_MessagesAddChatUser_FullMethodName                = "/mtproto.RPCMessages/messages_addChatUser"
	RPCMessages_MessagesDeleteChatUser_FullMethodName             = "/mtproto.RPCMessages/messages_deleteChatUser"
	RPCMessages_MessagesCreateChat_FullMethodName                 = "/mtproto.RPCMessages/messages_createChat"
	RPCMessages_MessagesForwardMessage_FullMethodName             = "/mtproto.RPCMessages/messages_forwardMessage"
	RPCMessages_MessagesGetDhConfig_FullMethodName                = "/mtproto.RPCMessages/messages_getDhConfig"
	RPCMessages_MessagesRequestEncryption_FullMethodName          = "/mtproto.RPCMessages/messages_requestEncryption"
	RPCMessages_MessagesAcceptEncryption_FullMethodName           = "/mtproto.RPCMessages/messages_acceptEncryption"
	RPCMessages_MessagesDiscardEncryption_FullMethodName          = "/mtproto.RPCMessages/messages_discardEncryption"
	RPCMessages_MessagesSetEncryptedTyping_FullMethodName         = "/mtproto.RPCMessages/messages_setEncryptedTyping"
	RPCMessages_MessagesReadEncryptedHistory_FullMethodName       = "/mtproto.RPCMessages/messages_readEncryptedHistory"
	RPCMessages_MessagesSendEncrypted_FullMethodName              = "/mtproto.RPCMessages/messages_sendEncrypted"
	RPCMessages_MessagesSendEncryptedFile_FullMethodName          = "/mtproto.RPCMessages/messages_sendEncryptedFile"
	RPCMessages_MessagesSendEncryptedService_FullMethodName       = "/mtproto.RPCMessages/messages_sendEncryptedService"
	RPCMessages_MessagesReceivedQueue_FullMethodName              = "/mtproto.RPCMessages/messages_receivedQueue"
	RPCMessages_MessagesReportEncryptedSpam_FullMethodName        = "/mtproto.RPCMessages/messages_reportEncryptedSpam"
	RPCMessages_MessagesReadMessageContents_FullMethodName        = "/mtproto.RPCMessages/messages_readMessageContents"
	RPCMessages_MessagesGetAllStickers_FullMethodName             = "/mtproto.RPCMessages/messages_getAllStickers"
	RPCMessages_MessagesGetWebPagePreview_FullMethodName          = "/mtproto.RPCMessages/messages_getWebPagePreview"
	RPCMessages_MessagesExportChatInvite_FullMethodName           = "/mtproto.RPCMessages/messages_exportChatInvite"
	RPCMessages_MessagesCheckChatInvite_FullMethodName            = "/mtproto.RPCMessages/messages_checkChatInvite"
	RPCMessages_MessagesImportChatInvite_FullMethodName           = "/mtproto.RPCMessages/messages_importChatInvite"
	RPCMessages_MessagesGetStickerSet_FullMethodName              = "/mtproto.RPCMessages/messages_getStickerSet"
	RPCMessages_MessagesInstallStickerSet_FullMethodName          = "/mtproto.RPCMessages/messages_installStickerSet"
	RPCMessages_MessagesUninstallStickerSet_FullMethodName        = "/mtproto.RPCMessages/messages_uninstallStickerSet"
	RPCMessages_MessagesStartBot_FullMethodName                   = "/mtproto.RPCMessages/messages_startBot"
	RPCMessages_MessagesGetMessagesViews_FullMethodName           = "/mtproto.RPCMessages/messages_getMessagesViews"
	RPCMessages_MessagesToggleChatAdmins_FullMethodName           = "/mtproto.RPCMessages/messages_toggleChatAdmins"
	RPCMessages_MessagesEditChatAdmin_FullMethodName              = "/mtproto.RPCMessages/messages_editChatAdmin"
	RPCMessages_MessagesMigrateChat_FullMethodName                = "/mtproto.RPCMessages/messages_migrateChat"
	RPCMessages_MessagesSearchGlobal_FullMethodName               = "/mtproto.RPCMessages/messages_searchGlobal"
	RPCMessages_MessagesReorderStickerSets_FullMethodName         = "/mtproto.RPCMessages/messages_reorderStickerSets"
	RPCMessages_MessagesGetDocumentByHash_FullMethodName          = "/mtproto.RPCMessages/messages_getDocumentByHash"
	RPCMessages_MessagesSearchGifs_FullMethodName                 = "/mtproto.RPCMessages/messages_searchGifs"
	RPCMessages_MessagesGetSavedGifs_FullMethodName               = "/mtproto.RPCMessages/messages_getSavedGifs"
	RPCMessages_MessagesSaveGif_FullMethodName                    = "/mtproto.RPCMessages/messages_saveGif"
	RPCMessages_MessagesGetInlineBotResults_FullMethodName        = "/mtproto.RPCMessages/messages_getInlineBotResults"
	RPCMessages_MessagesSetInlineBotResults_FullMethodName        = "/mtproto.RPCMessages/messages_setInlineBotResults"
	RPCMessages_MessagesSendInlineBotResult_FullMethodName        = "/mtproto.RPCMessages/messages_sendInlineBotResult"
	RPCMessages_MessagesGetMessageEditData_FullMethodName         = "/mtproto.RPCMessages/messages_getMessageEditData"
	RPCMessages_MessagesEditMessage_FullMethodName                = "/mtproto.RPCMessages/messages_editMessage"
	RPCMessages_MessagesEditInlineBotMessage_FullMethodName       = "/mtproto.RPCMessages/messages_editInlineBotMessage"
	RPCMessages_MessagesGetBotCallbackAnswer_FullMethodName       = "/mtproto.RPCMessages/messages_getBotCallbackAnswer"
	RPCMessages_MessagesSetBotCallbackAnswer_FullMethodName       = "/mtproto.RPCMessages/messages_setBotCallbackAnswer"
	RPCMessages_MessagesGetPeerDialogs_FullMethodName             = "/mtproto.RPCMessages/messages_getPeerDialogs"
	RPCMessages_MessagesSaveDraft_FullMethodName                  = "/mtproto.RPCMessages/messages_saveDraft"
	RPCMessages_MessagesGetAllDrafts_FullMethodName               = "/mtproto.RPCMessages/messages_getAllDrafts"
	RPCMessages_MessagesGetFeaturedStickers_FullMethodName        = "/mtproto.RPCMessages/messages_getFeaturedStickers"
	RPCMessages_MessagesReadFeaturedStickers_FullMethodName       = "/mtproto.RPCMessages/messages_readFeaturedStickers"
	RPCMessages_MessagesGetRecentStickers_FullMethodName          = "/mtproto.RPCMessages/messages_getRecentStickers"
	RPCMessages_MessagesSaveRecentSticker_FullMethodName          = "/mtproto.RPCMessages/messages_saveRecentSticker"
	RPCMessages_MessagesClearRecentStickers_FullMethodName        = "/mtproto.RPCMessages/messages_clearRecentStickers"
	RPCMessages_MessagesGetArchivedStickers_FullMethodName        = "/mtproto.RPCMessages/messages_getArchivedStickers"
	RPCMessages_MessagesGetMaskStickers_FullMethodName            = "/mtproto.RPCMessages/messages_getMaskStickers"
	RPCMessages_MessagesGetAttachedStickers_FullMethodName        = "/mtproto.RPCMessages/messages_getAttachedStickers"
	RPCMessages_MessagesSetGameScore_FullMethodName               = "/mtproto.RPCMessages/messages_setGameScore"
	RPCMessages_MessagesSetInlineGameScore_FullMethodName         = "/mtproto.RPCMessages/messages_setInlineGameScore"
	RPCMessages_MessagesGetGameHighScores_FullMethodName          = "/mtproto.RPCMessages/messages_getGameHighScores"
	RPCMessages_MessagesGetInlineGameHighScores_FullMethodName    = "/mtproto.RPCMessages/messages_getInlineGameHighScores"
	RPCMessages_MessagesGetCommonChats_FullMethodName             = "/mtproto.RPCMessages/messages_getCommonChats"
	RPCMessages_MessagesGetAllChats_FullMethodName                = "/mtproto.RPCMessages/messages_getAllChats"
	RPCMessages_MessagesGetWebPage_FullMethodName                 = "/mtproto.RPCMessages/messages_getWebPage"
	RPCMessages_MessagesToggleDialogPin_FullMethodName            = "/mtproto.RPCMessages/messages_toggleDialogPin"
	RPCMessages_MessagesReorderPinnedDialogs_FullMethodName       = "/mtproto.RPCMessages/messages_reorderPinnedDialogs"
	RPCMessages_MessagesGetPinnedDialogs_FullMethodName           = "/mtproto.RPCMessages/messages_getPinnedDialogs"
	RPCMessages_MessagesSetBotShippingResults_FullMethodName      = "/mtproto.RPCMessages/messages_setBotShippingResults"
	RPCMessages_MessagesSetBotPrecheckoutResults_FullMethodName   = "/mtproto.RPCMessages/messages_setBotPrecheckoutResults"
	RPCMessages_MessagesUploadMedia_FullMethodName                = "/mtproto.RPCMessages/messages_uploadMedia"
	RPCMessages_MessagesSendScreenshotNotification_FullMethodName = "/mtproto.RPCMessages/messages_sendScreenshotNotification"
	RPCMessages_MessagesGetFavedStickers_FullMethodName           = "/mtproto.RPCMessages/messages_getFavedStickers"
	RPCMessages_MessagesFaveSticker_FullMethodName                = "/mtproto.RPCMessages/messages_faveSticker"
	RPCMessages_MessagesGetUnreadMentions_FullMethodName          = "/mtproto.RPCMessages/messages_getUnreadMentions"
)

// RPCMessagesClient is the client API for RPCMessages service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCMessagesClient interface {
	// messages.getMessages#4222fa74 id:Vector<int> = messages.Messages;
	MessagesGetMessages(ctx context.Context, in *TLMessagesGetMessages, opts ...grpc.CallOption) (*Messages_Messages, error)
	// messages.getDialogs#191ba9c5 flags:# exclude_pinned:flags.0?true offset_date:int offset_id:int offset_peer:InputPeer limit:int = messages.Dialogs;
	MessagesGetDialogs(ctx context.Context, in *TLMessagesGetDialogs, opts ...grpc.CallOption) (*Messages_Dialogs, error)
	// messages.getHistory#afa92846 peer:InputPeer offset_id:int offset_date:int add_offset:int limit:int max_id:int min_id:int = messages.Messages;
	MessagesGetHistory(ctx context.Context, in *TLMessagesGetHistory, opts ...grpc.CallOption) (*Messages_Messages, error)
	// messages.search#39e9ea0 flags:# peer:InputPeer q:string from_id:flags.0?InputUser filter:MessagesFilter min_date:int max_date:int offset_id:int add_offset:int limit:int max_id:int min_id:int = messages.Messages;
	MessagesSearch(ctx context.Context, in *TLMessagesSearch, opts ...grpc.CallOption) (*Messages_Messages, error)
	// messages.readHistory#e306d3a peer:InputPeer max_id:int = messages.AffectedMessages;
	MessagesReadHistory(ctx context.Context, in *TLMessagesReadHistory, opts ...grpc.CallOption) (*Messages_AffectedMessages, error)
	// messages.deleteHistory#1c015b09 flags:# just_clear:flags.0?true peer:InputPeer max_id:int = messages.AffectedHistory;
	MessagesDeleteHistory(ctx context.Context, in *TLMessagesDeleteHistory, opts ...grpc.CallOption) (*Messages_AffectedHistory, error)
	// messages.deleteMessages#e58e95d2 flags:# revoke:flags.0?true id:Vector<int> = messages.AffectedMessages;
	MessagesDeleteMessages(ctx context.Context, in *TLMessagesDeleteMessages, opts ...grpc.CallOption) (*Messages_AffectedMessages, error)
	// messages.receivedMessages#5a954c0 max_id:int = Vector<ReceivedNotifyMessage>;
	MessagesReceivedMessages(ctx context.Context, in *TLMessagesReceivedMessages, opts ...grpc.CallOption) (*Vector_ReceivedNotifyMessage, error)
	// messages.setTyping#a3825e50 peer:InputPeer action:SendMessageAction = Bool;
	MessagesSetTyping(ctx context.Context, in *TLMessagesSetTyping, opts ...grpc.CallOption) (*Bool, error)
	// messages.sendMessage#fa88427a flags:# no_webpage:flags.1?true silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> = Updates;
	MessagesSendMessage(ctx context.Context, in *TLMessagesSendMessage, opts ...grpc.CallOption) (*Updates, error)
	// messages.sendMedia#c8f16791 flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int media:InputMedia random_id:long reply_markup:flags.2?ReplyMarkup = Updates;
	MessagesSendMedia(ctx context.Context, in *TLMessagesSendMedia, opts ...grpc.CallOption) (*Updates, error)
	// messages.forwardMessages#708e0195 flags:# silent:flags.5?true background:flags.6?true with_my_score:flags.8?true from_peer:InputPeer id:Vector<int> random_id:Vector<long> to_peer:InputPeer = Updates;
	MessagesForwardMessages(ctx context.Context, in *TLMessagesForwardMessages, opts ...grpc.CallOption) (*Updates, error)
	// messages.reportSpam#cf1592db peer:InputPeer = Bool;
	MessagesReportSpam(ctx context.Context, in *TLMessagesReportSpam, opts ...grpc.CallOption) (*Bool, error)
	// messages.hideReportSpam#a8f1709b peer:InputPeer = Bool;
	MessagesHideReportSpam(ctx context.Context, in *TLMessagesHideReportSpam, opts ...grpc.CallOption) (*Bool, error)
	// messages.getPeerSettings#3672e09c peer:InputPeer = PeerSettings;
	MessagesGetPeerSettings(ctx context.Context, in *TLMessagesGetPeerSettings, opts ...grpc.CallOption) (*PeerSettings, error)
	// messages.getChats#3c6aa187 id:Vector<int> = messages.Chats;
	MessagesGetChats(ctx context.Context, in *TLMessagesGetChats, opts ...grpc.CallOption) (*Messages_Chats, error)
	// messages.getFullChat#3b831c66 chat_id:int = messages.ChatFull;
	MessagesGetFullChat(ctx context.Context, in *TLMessagesGetFullChat, opts ...grpc.CallOption) (*Messages_ChatFull, error)
	// messages.editChatTitle#dc452855 chat_id:int title:string = Updates;
	MessagesEditChatTitle(ctx context.Context, in *TLMessagesEditChatTitle, opts ...grpc.CallOption) (*Updates, error)
	// messages.editChatPhoto#ca4c79d8 chat_id:int photo:InputChatPhoto = Updates;
	MessagesEditChatPhoto(ctx context.Context, in *TLMessagesEditChatPhoto, opts ...grpc.CallOption) (*Updates, error)
	// messages.addChatUser#f9a0aa09 chat_id:int user_id:InputUser fwd_limit:int = Updates;
	MessagesAddChatUser(ctx context.Context, in *TLMessagesAddChatUser, opts ...grpc.CallOption) (*Updates, error)
	// messages.deleteChatUser#e0611f16 chat_id:int user_id:InputUser = Updates;
	MessagesDeleteChatUser(ctx context.Context, in *TLMessagesDeleteChatUser, opts ...grpc.CallOption) (*Updates, error)
	// messages.createChat#9cb126e users:Vector<InputUser> title:string = Updates;
	MessagesCreateChat(ctx context.Context, in *TLMessagesCreateChat, opts ...grpc.CallOption) (*Updates, error)
	// messages.forwardMessage#33963bf9 peer:InputPeer id:int random_id:long = Updates;
	MessagesForwardMessage(ctx context.Context, in *TLMessagesForwardMessage, opts ...grpc.CallOption) (*Updates, error)
	// messages.getDhConfig#26cf8950 version:int random_length:int = messages.DhConfig;
	MessagesGetDhConfig(ctx context.Context, in *TLMessagesGetDhConfig, opts ...grpc.CallOption) (*Messages_DhConfig, error)
	// messages.requestEncryption#f64daf43 user_id:InputUser random_id:int g_a:bytes = EncryptedChat;
	MessagesRequestEncryption(ctx context.Context, in *TLMessagesRequestEncryption, opts ...grpc.CallOption) (*EncryptedChat, error)
	// messages.acceptEncryption#3dbc0415 peer:InputEncryptedChat g_b:bytes key_fingerprint:long = EncryptedChat;
	MessagesAcceptEncryption(ctx context.Context, in *TLMessagesAcceptEncryption, opts ...grpc.CallOption) (*EncryptedChat, error)
	// messages.discardEncryption#edd923c5 chat_id:int = Bool;
	MessagesDiscardEncryption(ctx context.Context, in *TLMessagesDiscardEncryption, opts ...grpc.CallOption) (*Bool, error)
	// messages.setEncryptedTyping#791451ed peer:InputEncryptedChat typing:Bool = Bool;
	MessagesSetEncryptedTyping(ctx context.Context, in *TLMessagesSetEncryptedTyping, opts ...grpc.CallOption) (*Bool, error)
	// messages.readEncryptedHistory#7f4b690a peer:InputEncryptedChat max_date:int = Bool;
	MessagesReadEncryptedHistory(ctx context.Context, in *TLMessagesReadEncryptedHistory, opts ...grpc.CallOption) (*Bool, error)
	// messages.sendEncrypted#a9776773 peer:InputEncryptedChat random_id:long data:bytes = messages.SentEncryptedMessage;
	MessagesSendEncrypted(ctx context.Context, in *TLMessagesSendEncrypted, opts ...grpc.CallOption) (*Messages_SentEncryptedMessage, error)
	// messages.sendEncryptedFile#9a901b66 peer:InputEncryptedChat random_id:long data:bytes file:InputEncryptedFile = messages.SentEncryptedMessage;
	MessagesSendEncryptedFile(ctx context.Context, in *TLMessagesSendEncryptedFile, opts ...grpc.CallOption) (*Messages_SentEncryptedMessage, error)
	// messages.sendEncryptedService#32d439a4 peer:InputEncryptedChat random_id:long data:bytes = messages.SentEncryptedMessage;
	MessagesSendEncryptedService(ctx context.Context, in *TLMessagesSendEncryptedService, opts ...grpc.CallOption) (*Messages_SentEncryptedMessage, error)
	// messages.receivedQueue#55a5bb66 max_qts:int = Vector<long>;
	MessagesReceivedQueue(ctx context.Context, in *TLMessagesReceivedQueue, opts ...grpc.CallOption) (*VectorLong, error)
	// messages.reportEncryptedSpam#4b0c8c0f peer:InputEncryptedChat = Bool;
	MessagesReportEncryptedSpam(ctx context.Context, in *TLMessagesReportEncryptedSpam, opts ...grpc.CallOption) (*Bool, error)
	// messages.readMessageContents#36a73f77 id:Vector<int> = messages.AffectedMessages;
	MessagesReadMessageContents(ctx context.Context, in *TLMessagesReadMessageContents, opts ...grpc.CallOption) (*Messages_AffectedMessages, error)
	// messages.getAllStickers#1c9618b1 hash:int = messages.AllStickers;
	MessagesGetAllStickers(ctx context.Context, in *TLMessagesGetAllStickers, opts ...grpc.CallOption) (*Messages_AllStickers, error)
	// messages.getWebPagePreview#25223e24 message:string = MessageMedia;
	MessagesGetWebPagePreview(ctx context.Context, in *TLMessagesGetWebPagePreview, opts ...grpc.CallOption) (*MessageMedia, error)
	// messages.exportChatInvite#7d885289 chat_id:int = ExportedChatInvite;
	MessagesExportChatInvite(ctx context.Context, in *TLMessagesExportChatInvite, opts ...grpc.CallOption) (*ExportedChatInvite, error)
	// messages.checkChatInvite#3eadb1bb hash:string = ChatInvite;
	MessagesCheckChatInvite(ctx context.Context, in *TLMessagesCheckChatInvite, opts ...grpc.CallOption) (*ChatInvite, error)
	// messages.importChatInvite#6c50051c hash:string = Updates;
	MessagesImportChatInvite(ctx context.Context, in *TLMessagesImportChatInvite, opts ...grpc.CallOption) (*Updates, error)
	// messages.getStickerSet#2619a90e stickerset:InputStickerSet = messages.StickerSet;
	MessagesGetStickerSet(ctx context.Context, in *TLMessagesGetStickerSet, opts ...grpc.CallOption) (*Messages_StickerSet, error)
	// messages.installStickerSet#c78fe460 stickerset:InputStickerSet archived:Bool = messages.StickerSetInstallResult;
	MessagesInstallStickerSet(ctx context.Context, in *TLMessagesInstallStickerSet, opts ...grpc.CallOption) (*Messages_StickerSetInstallResult, error)
	// messages.uninstallStickerSet#f96e55de stickerset:InputStickerSet = Bool;
	MessagesUninstallStickerSet(ctx context.Context, in *TLMessagesUninstallStickerSet, opts ...grpc.CallOption) (*Bool, error)
	// messages.startBot#e6df7378 bot:InputUser peer:InputPeer random_id:long start_param:string = Updates;
	MessagesStartBot(ctx context.Context, in *TLMessagesStartBot, opts ...grpc.CallOption) (*Updates, error)
	// messages.getMessagesViews#c4c8a55d peer:InputPeer id:Vector<int> increment:Bool = Vector<int>;
	MessagesGetMessagesViews(ctx context.Context, in *TLMessagesGetMessagesViews, opts ...grpc.CallOption) (*VectorInt, error)
	// messages.toggleChatAdmins#ec8bd9e1 chat_id:int enabled:Bool = Updates;
	MessagesToggleChatAdmins(ctx context.Context, in *TLMessagesToggleChatAdmins, opts ...grpc.CallOption) (*Updates, error)
	// messages.editChatAdmin#a9e69f2e chat_id:int user_id:InputUser is_admin:Bool = Bool;
	MessagesEditChatAdmin(ctx context.Context, in *TLMessagesEditChatAdmin, opts ...grpc.CallOption) (*Bool, error)
	// messages.migrateChat#15a3b8e3 chat_id:int = Updates;
	MessagesMigrateChat(ctx context.Context, in *TLMessagesMigrateChat, opts ...grpc.CallOption) (*Updates, error)
	// messages.searchGlobal#9e3cacb0 q:string offset_date:int offset_peer:InputPeer offset_id:int limit:int = messages.Messages;
	MessagesSearchGlobal(ctx context.Context, in *TLMessagesSearchGlobal, opts ...grpc.CallOption) (*Messages_Messages, error)
	// messages.reorderStickerSets#78337739 flags:# masks:flags.0?true order:Vector<long> = Bool;
	MessagesReorderStickerSets(ctx context.Context, in *TLMessagesReorderStickerSets, opts ...grpc.CallOption) (*Bool, error)
	// messages.getDocumentByHash#338e2464 sha256:bytes size:int mime_type:string = Document;
	MessagesGetDocumentByHash(ctx context.Context, in *TLMessagesGetDocumentByHash, opts ...grpc.CallOption) (*Document, error)
	// messages.searchGifs#bf9a776b q:string offset:int = messages.FoundGifs;
	MessagesSearchGifs(ctx context.Context, in *TLMessagesSearchGifs, opts ...grpc.CallOption) (*Messages_FoundGifs, error)
	// messages.getSavedGifs#83bf3d52 hash:int = messages.SavedGifs;
	MessagesGetSavedGifs(ctx context.Context, in *TLMessagesGetSavedGifs, opts ...grpc.CallOption) (*Messages_SavedGifs, error)
	// messages.saveGif#327a30cb id:InputDocument unsave:Bool = Bool;
	MessagesSaveGif(ctx context.Context, in *TLMessagesSaveGif, opts ...grpc.CallOption) (*Bool, error)
	// messages.getInlineBotResults#514e999d flags:# bot:InputUser peer:InputPeer geo_point:flags.0?InputGeoPoint query:string offset:string = messages.BotResults;
	MessagesGetInlineBotResults(ctx context.Context, in *TLMessagesGetInlineBotResults, opts ...grpc.CallOption) (*Messages_BotResults, error)
	// messages.setInlineBotResults#eb5ea206 flags:# gallery:flags.0?true private:flags.1?true query_id:long results:Vector<InputBotInlineResult> cache_time:int next_offset:flags.2?string switch_pm:flags.3?InlineBotSwitchPM = Bool;
	MessagesSetInlineBotResults(ctx context.Context, in *TLMessagesSetInlineBotResults, opts ...grpc.CallOption) (*Bool, error)
	// messages.sendInlineBotResult#b16e06fe flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int random_id:long query_id:long id:string = Updates;
	MessagesSendInlineBotResult(ctx context.Context, in *TLMessagesSendInlineBotResult, opts ...grpc.CallOption) (*Updates, error)
	// messages.getMessageEditData#fda68d36 peer:InputPeer id:int = messages.MessageEditData;
	MessagesGetMessageEditData(ctx context.Context, in *TLMessagesGetMessageEditData, opts ...grpc.CallOption) (*Messages_MessageEditData, error)
	// messages.editMessage#ce91e4ca flags:# no_webpage:flags.1?true peer:InputPeer id:int message:flags.11?string reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> = Updates;
	MessagesEditMessage(ctx context.Context, in *TLMessagesEditMessage, opts ...grpc.CallOption) (*Updates, error)
	// messages.editInlineBotMessage#130c2c85 flags:# no_webpage:flags.1?true id:InputBotInlineMessageID message:flags.11?string reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> = Bool;
	MessagesEditInlineBotMessage(ctx context.Context, in *TLMessagesEditInlineBotMessage, opts ...grpc.CallOption) (*Bool, error)
	// messages.getBotCallbackAnswer#810a9fec flags:# game:flags.1?true peer:InputPeer msg_id:int data:flags.0?bytes = messages.BotCallbackAnswer;
	MessagesGetBotCallbackAnswer(ctx context.Context, in *TLMessagesGetBotCallbackAnswer, opts ...grpc.CallOption) (*Messages_BotCallbackAnswer, error)
	// messages.setBotCallbackAnswer#d58f130a flags:# alert:flags.1?true query_id:long message:flags.0?string url:flags.2?string cache_time:int = Bool;
	MessagesSetBotCallbackAnswer(ctx context.Context, in *TLMessagesSetBotCallbackAnswer, opts ...grpc.CallOption) (*Bool, error)
	// messages.getPeerDialogs#2d9776b9 peers:Vector<InputPeer> = messages.PeerDialogs;
	MessagesGetPeerDialogs(ctx context.Context, in *TLMessagesGetPeerDialogs, opts ...grpc.CallOption) (*Messages_PeerDialogs, error)
	// messages.saveDraft#bc39e14b flags:# no_webpage:flags.1?true reply_to_msg_id:flags.0?int peer:InputPeer message:string entities:flags.3?Vector<MessageEntity> = Bool;
	MessagesSaveDraft(ctx context.Context, in *TLMessagesSaveDraft, opts ...grpc.CallOption) (*Bool, error)
	// messages.getAllDrafts#6a3f8d65 = Updates;
	MessagesGetAllDrafts(ctx context.Context, in *TLMessagesGetAllDrafts, opts ...grpc.CallOption) (*Updates, error)
	// messages.getFeaturedStickers#2dacca4f hash:int = messages.FeaturedStickers;
	MessagesGetFeaturedStickers(ctx context.Context, in *TLMessagesGetFeaturedStickers, opts ...grpc.CallOption) (*Messages_FeaturedStickers, error)
	// messages.readFeaturedStickers#5b118126 id:Vector<long> = Bool;
	MessagesReadFeaturedStickers(ctx context.Context, in *TLMessagesReadFeaturedStickers, opts ...grpc.CallOption) (*Bool, error)
	// messages.getRecentStickers#5ea192c9 flags:# attached:flags.0?true hash:int = messages.RecentStickers;
	MessagesGetRecentStickers(ctx context.Context, in *TLMessagesGetRecentStickers, opts ...grpc.CallOption) (*Messages_RecentStickers, error)
	// messages.saveRecentSticker#392718f8 flags:# attached:flags.0?true id:InputDocument unsave:Bool = Bool;
	MessagesSaveRecentSticker(ctx context.Context, in *TLMessagesSaveRecentSticker, opts ...grpc.CallOption) (*Bool, error)
	// messages.clearRecentStickers#8999602d flags:# attached:flags.0?true = Bool;
	MessagesClearRecentStickers(ctx context.Context, in *TLMessagesClearRecentStickers, opts ...grpc.CallOption) (*Bool, error)
	// messages.getArchivedStickers#57f17692 flags:# masks:flags.0?true offset_id:long limit:int = messages.ArchivedStickers;
	MessagesGetArchivedStickers(ctx context.Context, in *TLMessagesGetArchivedStickers, opts ...grpc.CallOption) (*Messages_ArchivedStickers, error)
	// messages.getMaskStickers#65b8c79f hash:int = messages.AllStickers;
	MessagesGetMaskStickers(ctx context.Context, in *TLMessagesGetMaskStickers, opts ...grpc.CallOption) (*Messages_AllStickers, error)
	// messages.getAttachedStickers#cc5b67cc media:InputStickeredMedia = Vector<StickerSetCovered>;
	MessagesGetAttachedStickers(ctx context.Context, in *TLMessagesGetAttachedStickers, opts ...grpc.CallOption) (*Vector_StickerSetCovered, error)
	// messages.setGameScore#8ef8ecc0 flags:# edit_message:flags.0?true force:flags.1?true peer:InputPeer id:int user_id:InputUser score:int = Updates;
	MessagesSetGameScore(ctx context.Context, in *TLMessagesSetGameScore, opts ...grpc.CallOption) (*Updates, error)
	// messages.setInlineGameScore#15ad9f64 flags:# edit_message:flags.0?true force:flags.1?true id:InputBotInlineMessageID user_id:InputUser score:int = Bool;
	MessagesSetInlineGameScore(ctx context.Context, in *TLMessagesSetInlineGameScore, opts ...grpc.CallOption) (*Bool, error)
	// messages.getGameHighScores#e822649d peer:InputPeer id:int user_id:InputUser = messages.HighScores;
	MessagesGetGameHighScores(ctx context.Context, in *TLMessagesGetGameHighScores, opts ...grpc.CallOption) (*Messages_HighScores, error)
	// messages.getInlineGameHighScores#f635e1b id:InputBotInlineMessageID user_id:InputUser = messages.HighScores;
	MessagesGetInlineGameHighScores(ctx context.Context, in *TLMessagesGetInlineGameHighScores, opts ...grpc.CallOption) (*Messages_HighScores, error)
	// messages.getCommonChats#d0a48c4 user_id:InputUser max_id:int limit:int = messages.Chats;
	MessagesGetCommonChats(ctx context.Context, in *TLMessagesGetCommonChats, opts ...grpc.CallOption) (*Messages_Chats, error)
	// messages.getAllChats#eba80ff0 except_ids:Vector<int> = messages.Chats;
	MessagesGetAllChats(ctx context.Context, in *TLMessagesGetAllChats, opts ...grpc.CallOption) (*Messages_Chats, error)
	// messages.getWebPage#32ca8f91 url:string hash:int = WebPage;
	MessagesGetWebPage(ctx context.Context, in *TLMessagesGetWebPage, opts ...grpc.CallOption) (*WebPage, error)
	// messages.toggleDialogPin#3289be6a flags:# pinned:flags.0?true peer:InputPeer = Bool;
	MessagesToggleDialogPin(ctx context.Context, in *TLMessagesToggleDialogPin, opts ...grpc.CallOption) (*Bool, error)
	// messages.reorderPinnedDialogs#959ff644 flags:# force:flags.0?true order:Vector<InputPeer> = Bool;
	MessagesReorderPinnedDialogs(ctx context.Context, in *TLMessagesReorderPinnedDialogs, opts ...grpc.CallOption) (*Bool, error)
	// messages.getPinnedDialogs#e254d64e = messages.PeerDialogs;
	MessagesGetPinnedDialogs(ctx context.Context, in *TLMessagesGetPinnedDialogs, opts ...grpc.CallOption) (*Messages_PeerDialogs, error)
	// messages.setBotShippingResults#e5f672fa flags:# query_id:long error:flags.0?string shipping_options:flags.1?Vector<ShippingOption> = Bool;
	MessagesSetBotShippingResults(ctx context.Context, in *TLMessagesSetBotShippingResults, opts ...grpc.CallOption) (*Bool, error)
	// messages.setBotPrecheckoutResults#9c2dd95 flags:# success:flags.1?true query_id:long error:flags.0?string = Bool;
	MessagesSetBotPrecheckoutResults(ctx context.Context, in *TLMessagesSetBotPrecheckoutResults, opts ...grpc.CallOption) (*Bool, error)
	// messages.uploadMedia#519bc2b1 peer:InputPeer media:InputMedia = MessageMedia;
	MessagesUploadMedia(ctx context.Context, in *TLMessagesUploadMedia, opts ...grpc.CallOption) (*MessageMedia, error)
	// messages.sendScreenshotNotification#c97df020 peer:InputPeer reply_to_msg_id:int random_id:long = Updates;
	MessagesSendScreenshotNotification(ctx context.Context, in *TLMessagesSendScreenshotNotification, opts ...grpc.CallOption) (*Updates, error)
	// messages.getFavedStickers#21ce0b0e hash:int = messages.FavedStickers;
	MessagesGetFavedStickers(ctx context.Context, in *TLMessagesGetFavedStickers, opts ...grpc.CallOption) (*Messages_FavedStickers, error)
	// messages.faveSticker#b9ffc55b id:InputDocument unfave:Bool = Bool;
	MessagesFaveSticker(ctx context.Context, in *TLMessagesFaveSticker, opts ...grpc.CallOption) (*Bool, error)
	// messages.getUnreadMentions#46578472 peer:InputPeer offset_id:int add_offset:int limit:int max_id:int min_id:int = messages.Messages;
	MessagesGetUnreadMentions(ctx context.Context, in *TLMessagesGetUnreadMentions, opts ...grpc.CallOption) (*Messages_Messages, error)
}

type rPCMessagesClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCMessagesClient(cc grpc.ClientConnInterface) RPCMessagesClient {
	return &rPCMessagesClient{cc}
}

func (c *rPCMessagesClient) MessagesGetMessages(ctx context.Context, in *TLMessagesGetMessages, opts ...grpc.CallOption) (*Messages_Messages, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesGetMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetDialogs(ctx context.Context, in *TLMessagesGetDialogs, opts ...grpc.CallOption) (*Messages_Dialogs, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_Dialogs)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesGetDialogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetHistory(ctx context.Context, in *TLMessagesGetHistory, opts ...grpc.CallOption) (*Messages_Messages, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesGetHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSearch(ctx context.Context, in *TLMessagesSearch, opts ...grpc.CallOption) (*Messages_Messages, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesReadHistory(ctx context.Context, in *TLMessagesReadHistory, opts ...grpc.CallOption) (*Messages_AffectedMessages, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_AffectedMessages)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesReadHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesDeleteHistory(ctx context.Context, in *TLMessagesDeleteHistory, opts ...grpc.CallOption) (*Messages_AffectedHistory, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_AffectedHistory)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesDeleteHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesDeleteMessages(ctx context.Context, in *TLMessagesDeleteMessages, opts ...grpc.CallOption) (*Messages_AffectedMessages, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_AffectedMessages)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesDeleteMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesReceivedMessages(ctx context.Context, in *TLMessagesReceivedMessages, opts ...grpc.CallOption) (*Vector_ReceivedNotifyMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_ReceivedNotifyMessage)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesReceivedMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSetTyping(ctx context.Context, in *TLMessagesSetTyping, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesSetTyping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSendMessage(ctx context.Context, in *TLMessagesSendMessage, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesSendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSendMedia(ctx context.Context, in *TLMessagesSendMedia, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesSendMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesForwardMessages(ctx context.Context, in *TLMessagesForwardMessages, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesForwardMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesReportSpam(ctx context.Context, in *TLMessagesReportSpam, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesReportSpam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesHideReportSpam(ctx context.Context, in *TLMessagesHideReportSpam, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesHideReportSpam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetPeerSettings(ctx context.Context, in *TLMessagesGetPeerSettings, opts ...grpc.CallOption) (*PeerSettings, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PeerSettings)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesGetPeerSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetChats(ctx context.Context, in *TLMessagesGetChats, opts ...grpc.CallOption) (*Messages_Chats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_Chats)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesGetChats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetFullChat(ctx context.Context, in *TLMessagesGetFullChat, opts ...grpc.CallOption) (*Messages_ChatFull, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_ChatFull)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesGetFullChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesEditChatTitle(ctx context.Context, in *TLMessagesEditChatTitle, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesEditChatTitle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesEditChatPhoto(ctx context.Context, in *TLMessagesEditChatPhoto, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesEditChatPhoto_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesAddChatUser(ctx context.Context, in *TLMessagesAddChatUser, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesAddChatUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesDeleteChatUser(ctx context.Context, in *TLMessagesDeleteChatUser, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesDeleteChatUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesCreateChat(ctx context.Context, in *TLMessagesCreateChat, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesCreateChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesForwardMessage(ctx context.Context, in *TLMessagesForwardMessage, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesForwardMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetDhConfig(ctx context.Context, in *TLMessagesGetDhConfig, opts ...grpc.CallOption) (*Messages_DhConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_DhConfig)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesGetDhConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesRequestEncryption(ctx context.Context, in *TLMessagesRequestEncryption, opts ...grpc.CallOption) (*EncryptedChat, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EncryptedChat)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesRequestEncryption_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesAcceptEncryption(ctx context.Context, in *TLMessagesAcceptEncryption, opts ...grpc.CallOption) (*EncryptedChat, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EncryptedChat)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesAcceptEncryption_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesDiscardEncryption(ctx context.Context, in *TLMessagesDiscardEncryption, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesDiscardEncryption_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSetEncryptedTyping(ctx context.Context, in *TLMessagesSetEncryptedTyping, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesSetEncryptedTyping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesReadEncryptedHistory(ctx context.Context, in *TLMessagesReadEncryptedHistory, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesReadEncryptedHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSendEncrypted(ctx context.Context, in *TLMessagesSendEncrypted, opts ...grpc.CallOption) (*Messages_SentEncryptedMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_SentEncryptedMessage)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesSendEncrypted_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSendEncryptedFile(ctx context.Context, in *TLMessagesSendEncryptedFile, opts ...grpc.CallOption) (*Messages_SentEncryptedMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_SentEncryptedMessage)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesSendEncryptedFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSendEncryptedService(ctx context.Context, in *TLMessagesSendEncryptedService, opts ...grpc.CallOption) (*Messages_SentEncryptedMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_SentEncryptedMessage)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesSendEncryptedService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesReceivedQueue(ctx context.Context, in *TLMessagesReceivedQueue, opts ...grpc.CallOption) (*VectorLong, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VectorLong)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesReceivedQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesReportEncryptedSpam(ctx context.Context, in *TLMessagesReportEncryptedSpam, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesReportEncryptedSpam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesReadMessageContents(ctx context.Context, in *TLMessagesReadMessageContents, opts ...grpc.CallOption) (*Messages_AffectedMessages, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_AffectedMessages)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesReadMessageContents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetAllStickers(ctx context.Context, in *TLMessagesGetAllStickers, opts ...grpc.CallOption) (*Messages_AllStickers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_AllStickers)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesGetAllStickers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetWebPagePreview(ctx context.Context, in *TLMessagesGetWebPagePreview, opts ...grpc.CallOption) (*MessageMedia, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageMedia)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesGetWebPagePreview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesExportChatInvite(ctx context.Context, in *TLMessagesExportChatInvite, opts ...grpc.CallOption) (*ExportedChatInvite, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportedChatInvite)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesExportChatInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesCheckChatInvite(ctx context.Context, in *TLMessagesCheckChatInvite, opts ...grpc.CallOption) (*ChatInvite, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChatInvite)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesCheckChatInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesImportChatInvite(ctx context.Context, in *TLMessagesImportChatInvite, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesImportChatInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetStickerSet(ctx context.Context, in *TLMessagesGetStickerSet, opts ...grpc.CallOption) (*Messages_StickerSet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_StickerSet)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesGetStickerSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesInstallStickerSet(ctx context.Context, in *TLMessagesInstallStickerSet, opts ...grpc.CallOption) (*Messages_StickerSetInstallResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_StickerSetInstallResult)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesInstallStickerSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesUninstallStickerSet(ctx context.Context, in *TLMessagesUninstallStickerSet, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesUninstallStickerSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesStartBot(ctx context.Context, in *TLMessagesStartBot, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesStartBot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetMessagesViews(ctx context.Context, in *TLMessagesGetMessagesViews, opts ...grpc.CallOption) (*VectorInt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VectorInt)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesGetMessagesViews_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesToggleChatAdmins(ctx context.Context, in *TLMessagesToggleChatAdmins, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesToggleChatAdmins_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesEditChatAdmin(ctx context.Context, in *TLMessagesEditChatAdmin, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesEditChatAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesMigrateChat(ctx context.Context, in *TLMessagesMigrateChat, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesMigrateChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSearchGlobal(ctx context.Context, in *TLMessagesSearchGlobal, opts ...grpc.CallOption) (*Messages_Messages, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesSearchGlobal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesReorderStickerSets(ctx context.Context, in *TLMessagesReorderStickerSets, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesReorderStickerSets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetDocumentByHash(ctx context.Context, in *TLMessagesGetDocumentByHash, opts ...grpc.CallOption) (*Document, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Document)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesGetDocumentByHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSearchGifs(ctx context.Context, in *TLMessagesSearchGifs, opts ...grpc.CallOption) (*Messages_FoundGifs, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_FoundGifs)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesSearchGifs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetSavedGifs(ctx context.Context, in *TLMessagesGetSavedGifs, opts ...grpc.CallOption) (*Messages_SavedGifs, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_SavedGifs)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesGetSavedGifs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSaveGif(ctx context.Context, in *TLMessagesSaveGif, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesSaveGif_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetInlineBotResults(ctx context.Context, in *TLMessagesGetInlineBotResults, opts ...grpc.CallOption) (*Messages_BotResults, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_BotResults)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesGetInlineBotResults_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSetInlineBotResults(ctx context.Context, in *TLMessagesSetInlineBotResults, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesSetInlineBotResults_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSendInlineBotResult(ctx context.Context, in *TLMessagesSendInlineBotResult, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesSendInlineBotResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetMessageEditData(ctx context.Context, in *TLMessagesGetMessageEditData, opts ...grpc.CallOption) (*Messages_MessageEditData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_MessageEditData)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesGetMessageEditData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesEditMessage(ctx context.Context, in *TLMessagesEditMessage, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesEditMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesEditInlineBotMessage(ctx context.Context, in *TLMessagesEditInlineBotMessage, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesEditInlineBotMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetBotCallbackAnswer(ctx context.Context, in *TLMessagesGetBotCallbackAnswer, opts ...grpc.CallOption) (*Messages_BotCallbackAnswer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_BotCallbackAnswer)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesGetBotCallbackAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSetBotCallbackAnswer(ctx context.Context, in *TLMessagesSetBotCallbackAnswer, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesSetBotCallbackAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetPeerDialogs(ctx context.Context, in *TLMessagesGetPeerDialogs, opts ...grpc.CallOption) (*Messages_PeerDialogs, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_PeerDialogs)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesGetPeerDialogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSaveDraft(ctx context.Context, in *TLMessagesSaveDraft, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesSaveDraft_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetAllDrafts(ctx context.Context, in *TLMessagesGetAllDrafts, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesGetAllDrafts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetFeaturedStickers(ctx context.Context, in *TLMessagesGetFeaturedStickers, opts ...grpc.CallOption) (*Messages_FeaturedStickers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_FeaturedStickers)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesGetFeaturedStickers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesReadFeaturedStickers(ctx context.Context, in *TLMessagesReadFeaturedStickers, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesReadFeaturedStickers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetRecentStickers(ctx context.Context, in *TLMessagesGetRecentStickers, opts ...grpc.CallOption) (*Messages_RecentStickers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_RecentStickers)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesGetRecentStickers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSaveRecentSticker(ctx context.Context, in *TLMessagesSaveRecentSticker, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesSaveRecentSticker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesClearRecentStickers(ctx context.Context, in *TLMessagesClearRecentStickers, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesClearRecentStickers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetArchivedStickers(ctx context.Context, in *TLMessagesGetArchivedStickers, opts ...grpc.CallOption) (*Messages_ArchivedStickers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_ArchivedStickers)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesGetArchivedStickers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetMaskStickers(ctx context.Context, in *TLMessagesGetMaskStickers, opts ...grpc.CallOption) (*Messages_AllStickers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_AllStickers)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesGetMaskStickers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetAttachedStickers(ctx context.Context, in *TLMessagesGetAttachedStickers, opts ...grpc.CallOption) (*Vector_StickerSetCovered, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_StickerSetCovered)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesGetAttachedStickers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSetGameScore(ctx context.Context, in *TLMessagesSetGameScore, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesSetGameScore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSetInlineGameScore(ctx context.Context, in *TLMessagesSetInlineGameScore, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesSetInlineGameScore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetGameHighScores(ctx context.Context, in *TLMessagesGetGameHighScores, opts ...grpc.CallOption) (*Messages_HighScores, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_HighScores)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesGetGameHighScores_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetInlineGameHighScores(ctx context.Context, in *TLMessagesGetInlineGameHighScores, opts ...grpc.CallOption) (*Messages_HighScores, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_HighScores)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesGetInlineGameHighScores_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetCommonChats(ctx context.Context, in *TLMessagesGetCommonChats, opts ...grpc.CallOption) (*Messages_Chats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_Chats)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesGetCommonChats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetAllChats(ctx context.Context, in *TLMessagesGetAllChats, opts ...grpc.CallOption) (*Messages_Chats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_Chats)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesGetAllChats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetWebPage(ctx context.Context, in *TLMessagesGetWebPage, opts ...grpc.CallOption) (*WebPage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WebPage)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesGetWebPage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesToggleDialogPin(ctx context.Context, in *TLMessagesToggleDialogPin, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesToggleDialogPin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesReorderPinnedDialogs(ctx context.Context, in *TLMessagesReorderPinnedDialogs, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesReorderPinnedDialogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetPinnedDialogs(ctx context.Context, in *TLMessagesGetPinnedDialogs, opts ...grpc.CallOption) (*Messages_PeerDialogs, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_PeerDialogs)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesGetPinnedDialogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSetBotShippingResults(ctx context.Context, in *TLMessagesSetBotShippingResults, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesSetBotShippingResults_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSetBotPrecheckoutResults(ctx context.Context, in *TLMessagesSetBotPrecheckoutResults, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesSetBotPrecheckoutResults_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesUploadMedia(ctx context.Context, in *TLMessagesUploadMedia, opts ...grpc.CallOption) (*MessageMedia, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageMedia)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesUploadMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSendScreenshotNotification(ctx context.Context, in *TLMessagesSendScreenshotNotification, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesSendScreenshotNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetFavedStickers(ctx context.Context, in *TLMessagesGetFavedStickers, opts ...grpc.CallOption) (*Messages_FavedStickers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_FavedStickers)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesGetFavedStickers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesFaveSticker(ctx context.Context, in *TLMessagesFaveSticker, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesFaveSticker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetUnreadMentions(ctx context.Context, in *TLMessagesGetUnreadMentions, opts ...grpc.CallOption) (*Messages_Messages, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, RPCMessages_MessagesGetUnreadMentions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCMessagesServer is the server API for RPCMessages service.
// All implementations must embed UnimplementedRPCMessagesServer
// for forward compatibility.
type RPCMessagesServer interface {
	// messages.getMessages#4222fa74 id:Vector<int> = messages.Messages;
	MessagesGetMessages(context.Context, *TLMessagesGetMessages) (*Messages_Messages, error)
	// messages.getDialogs#191ba9c5 flags:# exclude_pinned:flags.0?true offset_date:int offset_id:int offset_peer:InputPeer limit:int = messages.Dialogs;
	MessagesGetDialogs(context.Context, *TLMessagesGetDialogs) (*Messages_Dialogs, error)
	// messages.getHistory#afa92846 peer:InputPeer offset_id:int offset_date:int add_offset:int limit:int max_id:int min_id:int = messages.Messages;
	MessagesGetHistory(context.Context, *TLMessagesGetHistory) (*Messages_Messages, error)
	// messages.search#39e9ea0 flags:# peer:InputPeer q:string from_id:flags.0?InputUser filter:MessagesFilter min_date:int max_date:int offset_id:int add_offset:int limit:int max_id:int min_id:int = messages.Messages;
	MessagesSearch(context.Context, *TLMessagesSearch) (*Messages_Messages, error)
	// messages.readHistory#e306d3a peer:InputPeer max_id:int = messages.AffectedMessages;
	MessagesReadHistory(context.Context, *TLMessagesReadHistory) (*Messages_AffectedMessages, error)
	// messages.deleteHistory#1c015b09 flags:# just_clear:flags.0?true peer:InputPeer max_id:int = messages.AffectedHistory;
	MessagesDeleteHistory(context.Context, *TLMessagesDeleteHistory) (*Messages_AffectedHistory, error)
	// messages.deleteMessages#e58e95d2 flags:# revoke:flags.0?true id:Vector<int> = messages.AffectedMessages;
	MessagesDeleteMessages(context.Context, *TLMessagesDeleteMessages) (*Messages_AffectedMessages, error)
	// messages.receivedMessages#5a954c0 max_id:int = Vector<ReceivedNotifyMessage>;
	MessagesReceivedMessages(context.Context, *TLMessagesReceivedMessages) (*Vector_ReceivedNotifyMessage, error)
	// messages.setTyping#a3825e50 peer:InputPeer action:SendMessageAction = Bool;
	MessagesSetTyping(context.Context, *TLMessagesSetTyping) (*Bool, error)
	// messages.sendMessage#fa88427a flags:# no_webpage:flags.1?true silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> = Updates;
	MessagesSendMessage(context.Context, *TLMessagesSendMessage) (*Updates, error)
	// messages.sendMedia#c8f16791 flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int media:InputMedia random_id:long reply_markup:flags.2?ReplyMarkup = Updates;
	MessagesSendMedia(context.Context, *TLMessagesSendMedia) (*Updates, error)
	// messages.forwardMessages#708e0195 flags:# silent:flags.5?true background:flags.6?true with_my_score:flags.8?true from_peer:InputPeer id:Vector<int> random_id:Vector<long> to_peer:InputPeer = Updates;
	MessagesForwardMessages(context.Context, *TLMessagesForwardMessages) (*Updates, error)
	// messages.reportSpam#cf1592db peer:InputPeer = Bool;
	MessagesReportSpam(context.Context, *TLMessagesReportSpam) (*Bool, error)
	// messages.hideReportSpam#a8f1709b peer:InputPeer = Bool;
	MessagesHideReportSpam(context.Context, *TLMessagesHideReportSpam) (*Bool, error)
	// messages.getPeerSettings#3672e09c peer:InputPeer = PeerSettings;
	MessagesGetPeerSettings(context.Context, *TLMessagesGetPeerSettings) (*PeerSettings, error)
	// messages.getChats#3c6aa187 id:Vector<int> = messages.Chats;
	MessagesGetChats(context.Context, *TLMessagesGetChats) (*Messages_Chats, error)
	// messages.getFullChat#3b831c66 chat_id:int = messages.ChatFull;
	MessagesGetFullChat(context.Context, *TLMessagesGetFullChat) (*Messages_ChatFull, error)
	// messages.editChatTitle#dc452855 chat_id:int title:string = Updates;
	MessagesEditChatTitle(context.Context, *TLMessagesEditChatTitle) (*Updates, error)
	// messages.editChatPhoto#ca4c79d8 chat_id:int photo:InputChatPhoto = Updates;
	MessagesEditChatPhoto(context.Context, *TLMessagesEditChatPhoto) (*Updates, error)
	// messages.addChatUser#f9a0aa09 chat_id:int user_id:InputUser fwd_limit:int = Updates;
	MessagesAddChatUser(context.Context, *TLMessagesAddChatUser) (*Updates, error)
	// messages.deleteChatUser#e0611f16 chat_id:int user_id:InputUser = Updates;
	MessagesDeleteChatUser(context.Context, *TLMessagesDeleteChatUser) (*Updates, error)
	// messages.createChat#9cb126e users:Vector<InputUser> title:string = Updates;
	MessagesCreateChat(context.Context, *TLMessagesCreateChat) (*Updates, error)
	// messages.forwardMessage#33963bf9 peer:InputPeer id:int random_id:long = Updates;
	MessagesForwardMessage(context.Context, *TLMessagesForwardMessage) (*Updates, error)
	// messages.getDhConfig#26cf8950 version:int random_length:int = messages.DhConfig;
	MessagesGetDhConfig(context.Context, *TLMessagesGetDhConfig) (*Messages_DhConfig, error)
	// messages.requestEncryption#f64daf43 user_id:InputUser random_id:int g_a:bytes = EncryptedChat;
	MessagesRequestEncryption(context.Context, *TLMessagesRequestEncryption) (*EncryptedChat, error)
	// messages.acceptEncryption#3dbc0415 peer:InputEncryptedChat g_b:bytes key_fingerprint:long = EncryptedChat;
	MessagesAcceptEncryption(context.Context, *TLMessagesAcceptEncryption) (*EncryptedChat, error)
	// messages.discardEncryption#edd923c5 chat_id:int = Bool;
	MessagesDiscardEncryption(context.Context, *TLMessagesDiscardEncryption) (*Bool, error)
	// messages.setEncryptedTyping#791451ed peer:InputEncryptedChat typing:Bool = Bool;
	MessagesSetEncryptedTyping(context.Context, *TLMessagesSetEncryptedTyping) (*Bool, error)
	// messages.readEncryptedHistory#7f4b690a peer:InputEncryptedChat max_date:int = Bool;
	MessagesReadEncryptedHistory(context.Context, *TLMessagesReadEncryptedHistory) (*Bool, error)
	// messages.sendEncrypted#a9776773 peer:InputEncryptedChat random_id:long data:bytes = messages.SentEncryptedMessage;
	MessagesSendEncrypted(context.Context, *TLMessagesSendEncrypted) (*Messages_SentEncryptedMessage, error)
	// messages.sendEncryptedFile#9a901b66 peer:InputEncryptedChat random_id:long data:bytes file:InputEncryptedFile = messages.SentEncryptedMessage;
	MessagesSendEncryptedFile(context.Context, *TLMessagesSendEncryptedFile) (*Messages_SentEncryptedMessage, error)
	// messages.sendEncryptedService#32d439a4 peer:InputEncryptedChat random_id:long data:bytes = messages.SentEncryptedMessage;
	MessagesSendEncryptedService(context.Context, *TLMessagesSendEncryptedService) (*Messages_SentEncryptedMessage, error)
	// messages.receivedQueue#55a5bb66 max_qts:int = Vector<long>;
	MessagesReceivedQueue(context.Context, *TLMessagesReceivedQueue) (*VectorLong, error)
	// messages.reportEncryptedSpam#4b0c8c0f peer:InputEncryptedChat = Bool;
	MessagesReportEncryptedSpam(context.Context, *TLMessagesReportEncryptedSpam) (*Bool, error)
	// messages.readMessageContents#36a73f77 id:Vector<int> = messages.AffectedMessages;
	MessagesReadMessageContents(context.Context, *TLMessagesReadMessageContents) (*Messages_AffectedMessages, error)
	// messages.getAllStickers#1c9618b1 hash:int = messages.AllStickers;
	MessagesGetAllStickers(context.Context, *TLMessagesGetAllStickers) (*Messages_AllStickers, error)
	// messages.getWebPagePreview#25223e24 message:string = MessageMedia;
	MessagesGetWebPagePreview(context.Context, *TLMessagesGetWebPagePreview) (*MessageMedia, error)
	// messages.exportChatInvite#7d885289 chat_id:int = ExportedChatInvite;
	MessagesExportChatInvite(context.Context, *TLMessagesExportChatInvite) (*ExportedChatInvite, error)
	// messages.checkChatInvite#3eadb1bb hash:string = ChatInvite;
	MessagesCheckChatInvite(context.Context, *TLMessagesCheckChatInvite) (*ChatInvite, error)
	// messages.importChatInvite#6c50051c hash:string = Updates;
	MessagesImportChatInvite(context.Context, *TLMessagesImportChatInvite) (*Updates, error)
	// messages.getStickerSet#2619a90e stickerset:InputStickerSet = messages.StickerSet;
	MessagesGetStickerSet(context.Context, *TLMessagesGetStickerSet) (*Messages_StickerSet, error)
	// messages.installStickerSet#c78fe460 stickerset:InputStickerSet archived:Bool = messages.StickerSetInstallResult;
	MessagesInstallStickerSet(context.Context, *TLMessagesInstallStickerSet) (*Messages_StickerSetInstallResult, error)
	// messages.uninstallStickerSet#f96e55de stickerset:InputStickerSet = Bool;
	MessagesUninstallStickerSet(context.Context, *TLMessagesUninstallStickerSet) (*Bool, error)
	// messages.startBot#e6df7378 bot:InputUser peer:InputPeer random_id:long start_param:string = Updates;
	MessagesStartBot(context.Context, *TLMessagesStartBot) (*Updates, error)
	// messages.getMessagesViews#c4c8a55d peer:InputPeer id:Vector<int> increment:Bool = Vector<int>;
	MessagesGetMessagesViews(context.Context, *TLMessagesGetMessagesViews) (*VectorInt, error)
	// messages.toggleChatAdmins#ec8bd9e1 chat_id:int enabled:Bool = Updates;
	MessagesToggleChatAdmins(context.Context, *TLMessagesToggleChatAdmins) (*Updates, error)
	// messages.editChatAdmin#a9e69f2e chat_id:int user_id:InputUser is_admin:Bool = Bool;
	MessagesEditChatAdmin(context.Context, *TLMessagesEditChatAdmin) (*Bool, error)
	// messages.migrateChat#15a3b8e3 chat_id:int = Updates;
	MessagesMigrateChat(context.Context, *TLMessagesMigrateChat) (*Updates, error)
	// messages.searchGlobal#9e3cacb0 q:string offset_date:int offset_peer:InputPeer offset_id:int limit:int = messages.Messages;
	MessagesSearchGlobal(context.Context, *TLMessagesSearchGlobal) (*Messages_Messages, error)
	// messages.reorderStickerSets#78337739 flags:# masks:flags.0?true order:Vector<long> = Bool;
	MessagesReorderStickerSets(context.Context, *TLMessagesReorderStickerSets) (*Bool, error)
	// messages.getDocumentByHash#338e2464 sha256:bytes size:int mime_type:string = Document;
	MessagesGetDocumentByHash(context.Context, *TLMessagesGetDocumentByHash) (*Document, error)
	// messages.searchGifs#bf9a776b q:string offset:int = messages.FoundGifs;
	MessagesSearchGifs(context.Context, *TLMessagesSearchGifs) (*Messages_FoundGifs, error)
	// messages.getSavedGifs#83bf3d52 hash:int = messages.SavedGifs;
	MessagesGetSavedGifs(context.Context, *TLMessagesGetSavedGifs) (*Messages_SavedGifs, error)
	// messages.saveGif#327a30cb id:InputDocument unsave:Bool = Bool;
	MessagesSaveGif(context.Context, *TLMessagesSaveGif) (*Bool, error)
	// messages.getInlineBotResults#514e999d flags:# bot:InputUser peer:InputPeer geo_point:flags.0?InputGeoPoint query:string offset:string = messages.BotResults;
	MessagesGetInlineBotResults(context.Context, *TLMessagesGetInlineBotResults) (*Messages_BotResults, error)
	// messages.setInlineBotResults#eb5ea206 flags:# gallery:flags.0?true private:flags.1?true query_id:long results:Vector<InputBotInlineResult> cache_time:int next_offset:flags.2?string switch_pm:flags.3?InlineBotSwitchPM = Bool;
	MessagesSetInlineBotResults(context.Context, *TLMessagesSetInlineBotResults) (*Bool, error)
	// messages.sendInlineBotResult#b16e06fe flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int random_id:long query_id:long id:string = Updates;
	MessagesSendInlineBotResult(context.Context, *TLMessagesSendInlineBotResult) (*Updates, error)
	// messages.getMessageEditData#fda68d36 peer:InputPeer id:int = messages.MessageEditData;
	MessagesGetMessageEditData(context.Context, *TLMessagesGetMessageEditData) (*Messages_MessageEditData, error)
	// messages.editMessage#ce91e4ca flags:# no_webpage:flags.1?true peer:InputPeer id:int message:flags.11?string reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> = Updates;
	MessagesEditMessage(context.Context, *TLMessagesEditMessage) (*Updates, error)
	// messages.editInlineBotMessage#130c2c85 flags:# no_webpage:flags.1?true id:InputBotInlineMessageID message:flags.11?string reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> = Bool;
	MessagesEditInlineBotMessage(context.Context, *TLMessagesEditInlineBotMessage) (*Bool, error)
	// messages.getBotCallbackAnswer#810a9fec flags:# game:flags.1?true peer:InputPeer msg_id:int data:flags.0?bytes = messages.BotCallbackAnswer;
	MessagesGetBotCallbackAnswer(context.Context, *TLMessagesGetBotCallbackAnswer) (*Messages_BotCallbackAnswer, error)
	// messages.setBotCallbackAnswer#d58f130a flags:# alert:flags.1?true query_id:long message:flags.0?string url:flags.2?string cache_time:int = Bool;
	MessagesSetBotCallbackAnswer(context.Context, *TLMessagesSetBotCallbackAnswer) (*Bool, error)
	// messages.getPeerDialogs#2d9776b9 peers:Vector<InputPeer> = messages.PeerDialogs;
	MessagesGetPeerDialogs(context.Context, *TLMessagesGetPeerDialogs) (*Messages_PeerDialogs, error)
	// messages.saveDraft#bc39e14b flags:# no_webpage:flags.1?true reply_to_msg_id:flags.0?int peer:InputPeer message:string entities:flags.3?Vector<MessageEntity> = Bool;
	MessagesSaveDraft(context.Context, *TLMessagesSaveDraft) (*Bool, error)
	// messages.getAllDrafts#6a3f8d65 = Updates;
	MessagesGetAllDrafts(context.Context, *TLMessagesGetAllDrafts) (*Updates, error)
	// messages.getFeaturedStickers#2dacca4f hash:int = messages.FeaturedStickers;
	MessagesGetFeaturedStickers(context.Context, *TLMessagesGetFeaturedStickers) (*Messages_FeaturedStickers, error)
	// messages.readFeaturedStickers#5b118126 id:Vector<long> = Bool;
	MessagesReadFeaturedStickers(context.Context, *TLMessagesReadFeaturedStickers) (*Bool, error)
	// messages.getRecentStickers#5ea192c9 flags:# attached:flags.0?true hash:int = messages.RecentStickers;
	MessagesGetRecentStickers(context.Context, *TLMessagesGetRecentStickers) (*Messages_RecentStickers, error)
	// messages.saveRecentSticker#392718f8 flags:# attached:flags.0?true id:InputDocument unsave:Bool = Bool;
	MessagesSaveRecentSticker(context.Context, *TLMessagesSaveRecentSticker) (*Bool, error)
	// messages.clearRecentStickers#8999602d flags:# attached:flags.0?true = Bool;
	MessagesClearRecentStickers(context.Context, *TLMessagesClearRecentStickers) (*Bool, error)
	// messages.getArchivedStickers#57f17692 flags:# masks:flags.0?true offset_id:long limit:int = messages.ArchivedStickers;
	MessagesGetArchivedStickers(context.Context, *TLMessagesGetArchivedStickers) (*Messages_ArchivedStickers, error)
	// messages.getMaskStickers#65b8c79f hash:int = messages.AllStickers;
	MessagesGetMaskStickers(context.Context, *TLMessagesGetMaskStickers) (*Messages_AllStickers, error)
	// messages.getAttachedStickers#cc5b67cc media:InputStickeredMedia = Vector<StickerSetCovered>;
	MessagesGetAttachedStickers(context.Context, *TLMessagesGetAttachedStickers) (*Vector_StickerSetCovered, error)
	// messages.setGameScore#8ef8ecc0 flags:# edit_message:flags.0?true force:flags.1?true peer:InputPeer id:int user_id:InputUser score:int = Updates;
	MessagesSetGameScore(context.Context, *TLMessagesSetGameScore) (*Updates, error)
	// messages.setInlineGameScore#15ad9f64 flags:# edit_message:flags.0?true force:flags.1?true id:InputBotInlineMessageID user_id:InputUser score:int = Bool;
	MessagesSetInlineGameScore(context.Context, *TLMessagesSetInlineGameScore) (*Bool, error)
	// messages.getGameHighScores#e822649d peer:InputPeer id:int user_id:InputUser = messages.HighScores;
	MessagesGetGameHighScores(context.Context, *TLMessagesGetGameHighScores) (*Messages_HighScores, error)
	// messages.getInlineGameHighScores#f635e1b id:InputBotInlineMessageID user_id:InputUser = messages.HighScores;
	MessagesGetInlineGameHighScores(context.Context, *TLMessagesGetInlineGameHighScores) (*Messages_HighScores, error)
	// messages.getCommonChats#d0a48c4 user_id:InputUser max_id:int limit:int = messages.Chats;
	MessagesGetCommonChats(context.Context, *TLMessagesGetCommonChats) (*Messages_Chats, error)
	// messages.getAllChats#eba80ff0 except_ids:Vector<int> = messages.Chats;
	MessagesGetAllChats(context.Context, *TLMessagesGetAllChats) (*Messages_Chats, error)
	// messages.getWebPage#32ca8f91 url:string hash:int = WebPage;
	MessagesGetWebPage(context.Context, *TLMessagesGetWebPage) (*WebPage, error)
	// messages.toggleDialogPin#3289be6a flags:# pinned:flags.0?true peer:InputPeer = Bool;
	MessagesToggleDialogPin(context.Context, *TLMessagesToggleDialogPin) (*Bool, error)
	// messages.reorderPinnedDialogs#959ff644 flags:# force:flags.0?true order:Vector<InputPeer> = Bool;
	MessagesReorderPinnedDialogs(context.Context, *TLMessagesReorderPinnedDialogs) (*Bool, error)
	// messages.getPinnedDialogs#e254d64e = messages.PeerDialogs;
	MessagesGetPinnedDialogs(context.Context, *TLMessagesGetPinnedDialogs) (*Messages_PeerDialogs, error)
	// messages.setBotShippingResults#e5f672fa flags:# query_id:long error:flags.0?string shipping_options:flags.1?Vector<ShippingOption> = Bool;
	MessagesSetBotShippingResults(context.Context, *TLMessagesSetBotShippingResults) (*Bool, error)
	// messages.setBotPrecheckoutResults#9c2dd95 flags:# success:flags.1?true query_id:long error:flags.0?string = Bool;
	MessagesSetBotPrecheckoutResults(context.Context, *TLMessagesSetBotPrecheckoutResults) (*Bool, error)
	// messages.uploadMedia#519bc2b1 peer:InputPeer media:InputMedia = MessageMedia;
	MessagesUploadMedia(context.Context, *TLMessagesUploadMedia) (*MessageMedia, error)
	// messages.sendScreenshotNotification#c97df020 peer:InputPeer reply_to_msg_id:int random_id:long = Updates;
	MessagesSendScreenshotNotification(context.Context, *TLMessagesSendScreenshotNotification) (*Updates, error)
	// messages.getFavedStickers#21ce0b0e hash:int = messages.FavedStickers;
	MessagesGetFavedStickers(context.Context, *TLMessagesGetFavedStickers) (*Messages_FavedStickers, error)
	// messages.faveSticker#b9ffc55b id:InputDocument unfave:Bool = Bool;
	MessagesFaveSticker(context.Context, *TLMessagesFaveSticker) (*Bool, error)
	// messages.getUnreadMentions#46578472 peer:InputPeer offset_id:int add_offset:int limit:int max_id:int min_id:int = messages.Messages;
	MessagesGetUnreadMentions(context.Context, *TLMessagesGetUnreadMentions) (*Messages_Messages, error)
	mustEmbedUnimplementedRPCMessagesServer()
}

// UnimplementedRPCMessagesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCMessagesServer struct{}

func (UnimplementedRPCMessagesServer) MessagesGetMessages(context.Context, *TLMessagesGetMessages) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetMessages not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesGetDialogs(context.Context, *TLMessagesGetDialogs) (*Messages_Dialogs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetDialogs not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesGetHistory(context.Context, *TLMessagesGetHistory) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetHistory not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesSearch(context.Context, *TLMessagesSearch) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSearch not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesReadHistory(context.Context, *TLMessagesReadHistory) (*Messages_AffectedMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReadHistory not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesDeleteHistory(context.Context, *TLMessagesDeleteHistory) (*Messages_AffectedHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesDeleteHistory not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesDeleteMessages(context.Context, *TLMessagesDeleteMessages) (*Messages_AffectedMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesDeleteMessages not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesReceivedMessages(context.Context, *TLMessagesReceivedMessages) (*Vector_ReceivedNotifyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReceivedMessages not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesSetTyping(context.Context, *TLMessagesSetTyping) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSetTyping not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesSendMessage(context.Context, *TLMessagesSendMessage) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendMessage not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesSendMedia(context.Context, *TLMessagesSendMedia) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendMedia not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesForwardMessages(context.Context, *TLMessagesForwardMessages) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesForwardMessages not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesReportSpam(context.Context, *TLMessagesReportSpam) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReportSpam not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesHideReportSpam(context.Context, *TLMessagesHideReportSpam) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesHideReportSpam not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesGetPeerSettings(context.Context, *TLMessagesGetPeerSettings) (*PeerSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetPeerSettings not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesGetChats(context.Context, *TLMessagesGetChats) (*Messages_Chats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetChats not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesGetFullChat(context.Context, *TLMessagesGetFullChat) (*Messages_ChatFull, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetFullChat not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesEditChatTitle(context.Context, *TLMessagesEditChatTitle) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesEditChatTitle not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesEditChatPhoto(context.Context, *TLMessagesEditChatPhoto) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesEditChatPhoto not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesAddChatUser(context.Context, *TLMessagesAddChatUser) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesAddChatUser not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesDeleteChatUser(context.Context, *TLMessagesDeleteChatUser) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesDeleteChatUser not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesCreateChat(context.Context, *TLMessagesCreateChat) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesCreateChat not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesForwardMessage(context.Context, *TLMessagesForwardMessage) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesForwardMessage not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesGetDhConfig(context.Context, *TLMessagesGetDhConfig) (*Messages_DhConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetDhConfig not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesRequestEncryption(context.Context, *TLMessagesRequestEncryption) (*EncryptedChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesRequestEncryption not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesAcceptEncryption(context.Context, *TLMessagesAcceptEncryption) (*EncryptedChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesAcceptEncryption not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesDiscardEncryption(context.Context, *TLMessagesDiscardEncryption) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesDiscardEncryption not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesSetEncryptedTyping(context.Context, *TLMessagesSetEncryptedTyping) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSetEncryptedTyping not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesReadEncryptedHistory(context.Context, *TLMessagesReadEncryptedHistory) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReadEncryptedHistory not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesSendEncrypted(context.Context, *TLMessagesSendEncrypted) (*Messages_SentEncryptedMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendEncrypted not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesSendEncryptedFile(context.Context, *TLMessagesSendEncryptedFile) (*Messages_SentEncryptedMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendEncryptedFile not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesSendEncryptedService(context.Context, *TLMessagesSendEncryptedService) (*Messages_SentEncryptedMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendEncryptedService not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesReceivedQueue(context.Context, *TLMessagesReceivedQueue) (*VectorLong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReceivedQueue not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesReportEncryptedSpam(context.Context, *TLMessagesReportEncryptedSpam) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReportEncryptedSpam not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesReadMessageContents(context.Context, *TLMessagesReadMessageContents) (*Messages_AffectedMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReadMessageContents not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesGetAllStickers(context.Context, *TLMessagesGetAllStickers) (*Messages_AllStickers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetAllStickers not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesGetWebPagePreview(context.Context, *TLMessagesGetWebPagePreview) (*MessageMedia, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetWebPagePreview not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesExportChatInvite(context.Context, *TLMessagesExportChatInvite) (*ExportedChatInvite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesExportChatInvite not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesCheckChatInvite(context.Context, *TLMessagesCheckChatInvite) (*ChatInvite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesCheckChatInvite not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesImportChatInvite(context.Context, *TLMessagesImportChatInvite) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesImportChatInvite not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesGetStickerSet(context.Context, *TLMessagesGetStickerSet) (*Messages_StickerSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetStickerSet not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesInstallStickerSet(context.Context, *TLMessagesInstallStickerSet) (*Messages_StickerSetInstallResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesInstallStickerSet not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesUninstallStickerSet(context.Context, *TLMessagesUninstallStickerSet) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesUninstallStickerSet not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesStartBot(context.Context, *TLMessagesStartBot) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesStartBot not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesGetMessagesViews(context.Context, *TLMessagesGetMessagesViews) (*VectorInt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetMessagesViews not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesToggleChatAdmins(context.Context, *TLMessagesToggleChatAdmins) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesToggleChatAdmins not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesEditChatAdmin(context.Context, *TLMessagesEditChatAdmin) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesEditChatAdmin not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesMigrateChat(context.Context, *TLMessagesMigrateChat) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesMigrateChat not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesSearchGlobal(context.Context, *TLMessagesSearchGlobal) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSearchGlobal not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesReorderStickerSets(context.Context, *TLMessagesReorderStickerSets) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReorderStickerSets not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesGetDocumentByHash(context.Context, *TLMessagesGetDocumentByHash) (*Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetDocumentByHash not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesSearchGifs(context.Context, *TLMessagesSearchGifs) (*Messages_FoundGifs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSearchGifs not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesGetSavedGifs(context.Context, *TLMessagesGetSavedGifs) (*Messages_SavedGifs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetSavedGifs not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesSaveGif(context.Context, *TLMessagesSaveGif) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSaveGif not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesGetInlineBotResults(context.Context, *TLMessagesGetInlineBotResults) (*Messages_BotResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetInlineBotResults not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesSetInlineBotResults(context.Context, *TLMessagesSetInlineBotResults) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSetInlineBotResults not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesSendInlineBotResult(context.Context, *TLMessagesSendInlineBotResult) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendInlineBotResult not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesGetMessageEditData(context.Context, *TLMessagesGetMessageEditData) (*Messages_MessageEditData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetMessageEditData not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesEditMessage(context.Context, *TLMessagesEditMessage) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesEditMessage not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesEditInlineBotMessage(context.Context, *TLMessagesEditInlineBotMessage) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesEditInlineBotMessage not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesGetBotCallbackAnswer(context.Context, *TLMessagesGetBotCallbackAnswer) (*Messages_BotCallbackAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetBotCallbackAnswer not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesSetBotCallbackAnswer(context.Context, *TLMessagesSetBotCallbackAnswer) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSetBotCallbackAnswer not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesGetPeerDialogs(context.Context, *TLMessagesGetPeerDialogs) (*Messages_PeerDialogs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetPeerDialogs not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesSaveDraft(context.Context, *TLMessagesSaveDraft) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSaveDraft not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesGetAllDrafts(context.Context, *TLMessagesGetAllDrafts) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetAllDrafts not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesGetFeaturedStickers(context.Context, *TLMessagesGetFeaturedStickers) (*Messages_FeaturedStickers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetFeaturedStickers not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesReadFeaturedStickers(context.Context, *TLMessagesReadFeaturedStickers) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReadFeaturedStickers not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesGetRecentStickers(context.Context, *TLMessagesGetRecentStickers) (*Messages_RecentStickers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetRecentStickers not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesSaveRecentSticker(context.Context, *TLMessagesSaveRecentSticker) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSaveRecentSticker not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesClearRecentStickers(context.Context, *TLMessagesClearRecentStickers) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesClearRecentStickers not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesGetArchivedStickers(context.Context, *TLMessagesGetArchivedStickers) (*Messages_ArchivedStickers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetArchivedStickers not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesGetMaskStickers(context.Context, *TLMessagesGetMaskStickers) (*Messages_AllStickers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetMaskStickers not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesGetAttachedStickers(context.Context, *TLMessagesGetAttachedStickers) (*Vector_StickerSetCovered, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetAttachedStickers not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesSetGameScore(context.Context, *TLMessagesSetGameScore) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSetGameScore not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesSetInlineGameScore(context.Context, *TLMessagesSetInlineGameScore) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSetInlineGameScore not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesGetGameHighScores(context.Context, *TLMessagesGetGameHighScores) (*Messages_HighScores, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetGameHighScores not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesGetInlineGameHighScores(context.Context, *TLMessagesGetInlineGameHighScores) (*Messages_HighScores, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetInlineGameHighScores not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesGetCommonChats(context.Context, *TLMessagesGetCommonChats) (*Messages_Chats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetCommonChats not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesGetAllChats(context.Context, *TLMessagesGetAllChats) (*Messages_Chats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetAllChats not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesGetWebPage(context.Context, *TLMessagesGetWebPage) (*WebPage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetWebPage not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesToggleDialogPin(context.Context, *TLMessagesToggleDialogPin) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesToggleDialogPin not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesReorderPinnedDialogs(context.Context, *TLMessagesReorderPinnedDialogs) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReorderPinnedDialogs not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesGetPinnedDialogs(context.Context, *TLMessagesGetPinnedDialogs) (*Messages_PeerDialogs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetPinnedDialogs not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesSetBotShippingResults(context.Context, *TLMessagesSetBotShippingResults) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSetBotShippingResults not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesSetBotPrecheckoutResults(context.Context, *TLMessagesSetBotPrecheckoutResults) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSetBotPrecheckoutResults not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesUploadMedia(context.Context, *TLMessagesUploadMedia) (*MessageMedia, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesUploadMedia not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesSendScreenshotNotification(context.Context, *TLMessagesSendScreenshotNotification) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendScreenshotNotification not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesGetFavedStickers(context.Context, *TLMessagesGetFavedStickers) (*Messages_FavedStickers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetFavedStickers not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesFaveSticker(context.Context, *TLMessagesFaveSticker) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesFaveSticker not implemented")
}
func (UnimplementedRPCMessagesServer) MessagesGetUnreadMentions(context.Context, *TLMessagesGetUnreadMentions) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetUnreadMentions not implemented")
}
func (UnimplementedRPCMessagesServer) mustEmbedUnimplementedRPCMessagesServer() {}
func (UnimplementedRPCMessagesServer) testEmbeddedByValue()                     {}

// UnsafeRPCMessagesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCMessagesServer will
// result in compilation errors.
type UnsafeRPCMessagesServer interface {
	mustEmbedUnimplementedRPCMessagesServer()
}

func RegisterRPCMessagesServer(s grpc.ServiceRegistrar, srv RPCMessagesServer) {
	// If the following call pancis, it indicates UnimplementedRPCMessagesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCMessages_ServiceDesc, srv)
}

func _RPCMessages_MessagesGetMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesGetMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetMessages(ctx, req.(*TLMessagesGetMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesGetDialogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetDialogs(ctx, req.(*TLMessagesGetDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesGetHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetHistory(ctx, req.(*TLMessagesGetHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSearch(ctx, req.(*TLMessagesSearch))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesReadHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReadHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesReadHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesReadHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesReadHistory(ctx, req.(*TLMessagesReadHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesDeleteHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesDeleteHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesDeleteHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesDeleteHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesDeleteHistory(ctx, req.(*TLMessagesDeleteHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesDeleteMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesDeleteMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesDeleteMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesDeleteMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesDeleteMessages(ctx, req.(*TLMessagesDeleteMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesReceivedMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReceivedMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesReceivedMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesReceivedMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesReceivedMessages(ctx, req.(*TLMessagesReceivedMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSetTyping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSetTyping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSetTyping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesSetTyping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSetTyping(ctx, req.(*TLMessagesSetTyping))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesSendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSendMessage(ctx, req.(*TLMessagesSendMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSendMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSendMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesSendMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSendMedia(ctx, req.(*TLMessagesSendMedia))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesForwardMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesForwardMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesForwardMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesForwardMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesForwardMessages(ctx, req.(*TLMessagesForwardMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesReportSpam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReportSpam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesReportSpam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesReportSpam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesReportSpam(ctx, req.(*TLMessagesReportSpam))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesHideReportSpam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesHideReportSpam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesHideReportSpam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesHideReportSpam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesHideReportSpam(ctx, req.(*TLMessagesHideReportSpam))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetPeerSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetPeerSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetPeerSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesGetPeerSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetPeerSettings(ctx, req.(*TLMessagesGetPeerSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetChats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesGetChats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetChats(ctx, req.(*TLMessagesGetChats))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetFullChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetFullChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetFullChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesGetFullChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetFullChat(ctx, req.(*TLMessagesGetFullChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesEditChatTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesEditChatTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesEditChatTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesEditChatTitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesEditChatTitle(ctx, req.(*TLMessagesEditChatTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesEditChatPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesEditChatPhoto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesEditChatPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesEditChatPhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesEditChatPhoto(ctx, req.(*TLMessagesEditChatPhoto))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesAddChatUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesAddChatUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesAddChatUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesAddChatUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesAddChatUser(ctx, req.(*TLMessagesAddChatUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesDeleteChatUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesDeleteChatUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesDeleteChatUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesDeleteChatUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesDeleteChatUser(ctx, req.(*TLMessagesDeleteChatUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesCreateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesCreateChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesCreateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesCreateChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesCreateChat(ctx, req.(*TLMessagesCreateChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesForwardMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesForwardMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesForwardMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesForwardMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesForwardMessage(ctx, req.(*TLMessagesForwardMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetDhConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetDhConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetDhConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesGetDhConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetDhConfig(ctx, req.(*TLMessagesGetDhConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesRequestEncryption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesRequestEncryption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesRequestEncryption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesRequestEncryption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesRequestEncryption(ctx, req.(*TLMessagesRequestEncryption))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesAcceptEncryption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesAcceptEncryption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesAcceptEncryption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesAcceptEncryption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesAcceptEncryption(ctx, req.(*TLMessagesAcceptEncryption))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesDiscardEncryption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesDiscardEncryption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesDiscardEncryption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesDiscardEncryption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesDiscardEncryption(ctx, req.(*TLMessagesDiscardEncryption))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSetEncryptedTyping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSetEncryptedTyping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSetEncryptedTyping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesSetEncryptedTyping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSetEncryptedTyping(ctx, req.(*TLMessagesSetEncryptedTyping))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesReadEncryptedHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReadEncryptedHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesReadEncryptedHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesReadEncryptedHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesReadEncryptedHistory(ctx, req.(*TLMessagesReadEncryptedHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSendEncrypted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendEncrypted)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSendEncrypted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesSendEncrypted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSendEncrypted(ctx, req.(*TLMessagesSendEncrypted))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSendEncryptedFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendEncryptedFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSendEncryptedFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesSendEncryptedFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSendEncryptedFile(ctx, req.(*TLMessagesSendEncryptedFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSendEncryptedService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendEncryptedService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSendEncryptedService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesSendEncryptedService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSendEncryptedService(ctx, req.(*TLMessagesSendEncryptedService))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesReceivedQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReceivedQueue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesReceivedQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesReceivedQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesReceivedQueue(ctx, req.(*TLMessagesReceivedQueue))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesReportEncryptedSpam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReportEncryptedSpam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesReportEncryptedSpam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesReportEncryptedSpam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesReportEncryptedSpam(ctx, req.(*TLMessagesReportEncryptedSpam))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesReadMessageContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReadMessageContents)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesReadMessageContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesReadMessageContents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesReadMessageContents(ctx, req.(*TLMessagesReadMessageContents))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetAllStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetAllStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetAllStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesGetAllStickers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetAllStickers(ctx, req.(*TLMessagesGetAllStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetWebPagePreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetWebPagePreview)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetWebPagePreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesGetWebPagePreview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetWebPagePreview(ctx, req.(*TLMessagesGetWebPagePreview))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesExportChatInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesExportChatInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesExportChatInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesExportChatInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesExportChatInvite(ctx, req.(*TLMessagesExportChatInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesCheckChatInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesCheckChatInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesCheckChatInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesCheckChatInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesCheckChatInvite(ctx, req.(*TLMessagesCheckChatInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesImportChatInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesImportChatInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesImportChatInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesImportChatInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesImportChatInvite(ctx, req.(*TLMessagesImportChatInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetStickerSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesGetStickerSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetStickerSet(ctx, req.(*TLMessagesGetStickerSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesInstallStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesInstallStickerSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesInstallStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesInstallStickerSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesInstallStickerSet(ctx, req.(*TLMessagesInstallStickerSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesUninstallStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesUninstallStickerSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesUninstallStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesUninstallStickerSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesUninstallStickerSet(ctx, req.(*TLMessagesUninstallStickerSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesStartBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesStartBot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesStartBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesStartBot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesStartBot(ctx, req.(*TLMessagesStartBot))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetMessagesViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetMessagesViews)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetMessagesViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesGetMessagesViews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetMessagesViews(ctx, req.(*TLMessagesGetMessagesViews))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesToggleChatAdmins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesToggleChatAdmins)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesToggleChatAdmins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesToggleChatAdmins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesToggleChatAdmins(ctx, req.(*TLMessagesToggleChatAdmins))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesEditChatAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesEditChatAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesEditChatAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesEditChatAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesEditChatAdmin(ctx, req.(*TLMessagesEditChatAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesMigrateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesMigrateChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesMigrateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesMigrateChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesMigrateChat(ctx, req.(*TLMessagesMigrateChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSearchGlobal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSearchGlobal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSearchGlobal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesSearchGlobal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSearchGlobal(ctx, req.(*TLMessagesSearchGlobal))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesReorderStickerSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReorderStickerSets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesReorderStickerSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesReorderStickerSets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesReorderStickerSets(ctx, req.(*TLMessagesReorderStickerSets))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetDocumentByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetDocumentByHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetDocumentByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesGetDocumentByHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetDocumentByHash(ctx, req.(*TLMessagesGetDocumentByHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSearchGifs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSearchGifs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSearchGifs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesSearchGifs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSearchGifs(ctx, req.(*TLMessagesSearchGifs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetSavedGifs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetSavedGifs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetSavedGifs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesGetSavedGifs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetSavedGifs(ctx, req.(*TLMessagesGetSavedGifs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSaveGif_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSaveGif)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSaveGif(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesSaveGif_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSaveGif(ctx, req.(*TLMessagesSaveGif))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetInlineBotResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetInlineBotResults)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetInlineBotResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesGetInlineBotResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetInlineBotResults(ctx, req.(*TLMessagesGetInlineBotResults))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSetInlineBotResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSetInlineBotResults)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSetInlineBotResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesSetInlineBotResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSetInlineBotResults(ctx, req.(*TLMessagesSetInlineBotResults))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSendInlineBotResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendInlineBotResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSendInlineBotResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesSendInlineBotResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSendInlineBotResult(ctx, req.(*TLMessagesSendInlineBotResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetMessageEditData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetMessageEditData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetMessageEditData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesGetMessageEditData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetMessageEditData(ctx, req.(*TLMessagesGetMessageEditData))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesEditMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesEditMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesEditMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesEditMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesEditMessage(ctx, req.(*TLMessagesEditMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesEditInlineBotMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesEditInlineBotMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesEditInlineBotMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesEditInlineBotMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesEditInlineBotMessage(ctx, req.(*TLMessagesEditInlineBotMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetBotCallbackAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetBotCallbackAnswer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetBotCallbackAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesGetBotCallbackAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetBotCallbackAnswer(ctx, req.(*TLMessagesGetBotCallbackAnswer))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSetBotCallbackAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSetBotCallbackAnswer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSetBotCallbackAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesSetBotCallbackAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSetBotCallbackAnswer(ctx, req.(*TLMessagesSetBotCallbackAnswer))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetPeerDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetPeerDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetPeerDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesGetPeerDialogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetPeerDialogs(ctx, req.(*TLMessagesGetPeerDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSaveDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSaveDraft)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSaveDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesSaveDraft_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSaveDraft(ctx, req.(*TLMessagesSaveDraft))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetAllDrafts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetAllDrafts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetAllDrafts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesGetAllDrafts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetAllDrafts(ctx, req.(*TLMessagesGetAllDrafts))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetFeaturedStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetFeaturedStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetFeaturedStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesGetFeaturedStickers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetFeaturedStickers(ctx, req.(*TLMessagesGetFeaturedStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesReadFeaturedStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReadFeaturedStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesReadFeaturedStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesReadFeaturedStickers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesReadFeaturedStickers(ctx, req.(*TLMessagesReadFeaturedStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetRecentStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetRecentStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetRecentStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesGetRecentStickers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetRecentStickers(ctx, req.(*TLMessagesGetRecentStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSaveRecentSticker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSaveRecentSticker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSaveRecentSticker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesSaveRecentSticker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSaveRecentSticker(ctx, req.(*TLMessagesSaveRecentSticker))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesClearRecentStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesClearRecentStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesClearRecentStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesClearRecentStickers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesClearRecentStickers(ctx, req.(*TLMessagesClearRecentStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetArchivedStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetArchivedStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetArchivedStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesGetArchivedStickers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetArchivedStickers(ctx, req.(*TLMessagesGetArchivedStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetMaskStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetMaskStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetMaskStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesGetMaskStickers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetMaskStickers(ctx, req.(*TLMessagesGetMaskStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetAttachedStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetAttachedStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetAttachedStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesGetAttachedStickers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetAttachedStickers(ctx, req.(*TLMessagesGetAttachedStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSetGameScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSetGameScore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSetGameScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesSetGameScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSetGameScore(ctx, req.(*TLMessagesSetGameScore))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSetInlineGameScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSetInlineGameScore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSetInlineGameScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesSetInlineGameScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSetInlineGameScore(ctx, req.(*TLMessagesSetInlineGameScore))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetGameHighScores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetGameHighScores)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetGameHighScores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesGetGameHighScores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetGameHighScores(ctx, req.(*TLMessagesGetGameHighScores))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetInlineGameHighScores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetInlineGameHighScores)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetInlineGameHighScores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesGetInlineGameHighScores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetInlineGameHighScores(ctx, req.(*TLMessagesGetInlineGameHighScores))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetCommonChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetCommonChats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetCommonChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesGetCommonChats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetCommonChats(ctx, req.(*TLMessagesGetCommonChats))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetAllChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetAllChats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetAllChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesGetAllChats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetAllChats(ctx, req.(*TLMessagesGetAllChats))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetWebPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetWebPage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetWebPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesGetWebPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetWebPage(ctx, req.(*TLMessagesGetWebPage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesToggleDialogPin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesToggleDialogPin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesToggleDialogPin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesToggleDialogPin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesToggleDialogPin(ctx, req.(*TLMessagesToggleDialogPin))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesReorderPinnedDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReorderPinnedDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesReorderPinnedDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesReorderPinnedDialogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesReorderPinnedDialogs(ctx, req.(*TLMessagesReorderPinnedDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetPinnedDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetPinnedDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetPinnedDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesGetPinnedDialogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetPinnedDialogs(ctx, req.(*TLMessagesGetPinnedDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSetBotShippingResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSetBotShippingResults)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSetBotShippingResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesSetBotShippingResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSetBotShippingResults(ctx, req.(*TLMessagesSetBotShippingResults))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSetBotPrecheckoutResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSetBotPrecheckoutResults)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSetBotPrecheckoutResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesSetBotPrecheckoutResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSetBotPrecheckoutResults(ctx, req.(*TLMessagesSetBotPrecheckoutResults))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesUploadMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesUploadMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesUploadMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesUploadMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesUploadMedia(ctx, req.(*TLMessagesUploadMedia))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSendScreenshotNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendScreenshotNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSendScreenshotNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesSendScreenshotNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSendScreenshotNotification(ctx, req.(*TLMessagesSendScreenshotNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetFavedStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetFavedStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetFavedStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesGetFavedStickers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetFavedStickers(ctx, req.(*TLMessagesGetFavedStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesFaveSticker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesFaveSticker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesFaveSticker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesFaveSticker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesFaveSticker(ctx, req.(*TLMessagesFaveSticker))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetUnreadMentions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetUnreadMentions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetUnreadMentions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessages_MessagesGetUnreadMentions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetUnreadMentions(ctx, req.(*TLMessagesGetUnreadMentions))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCMessages_ServiceDesc is the grpc.ServiceDesc for RPCMessages service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCMessages_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCMessages",
	HandlerType: (*RPCMessagesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "messages_getMessages",
			Handler:    _RPCMessages_MessagesGetMessages_Handler,
		},
		{
			MethodName: "messages_getDialogs",
			Handler:    _RPCMessages_MessagesGetDialogs_Handler,
		},
		{
			MethodName: "messages_getHistory",
			Handler:    _RPCMessages_MessagesGetHistory_Handler,
		},
		{
			MethodName: "messages_search",
			Handler:    _RPCMessages_MessagesSearch_Handler,
		},
		{
			MethodName: "messages_readHistory",
			Handler:    _RPCMessages_MessagesReadHistory_Handler,
		},
		{
			MethodName: "messages_deleteHistory",
			Handler:    _RPCMessages_MessagesDeleteHistory_Handler,
		},
		{
			MethodName: "messages_deleteMessages",
			Handler:    _RPCMessages_MessagesDeleteMessages_Handler,
		},
		{
			MethodName: "messages_receivedMessages",
			Handler:    _RPCMessages_MessagesReceivedMessages_Handler,
		},
		{
			MethodName: "messages_setTyping",
			Handler:    _RPCMessages_MessagesSetTyping_Handler,
		},
		{
			MethodName: "messages_sendMessage",
			Handler:    _RPCMessages_MessagesSendMessage_Handler,
		},
		{
			MethodName: "messages_sendMedia",
			Handler:    _RPCMessages_MessagesSendMedia_Handler,
		},
		{
			MethodName: "messages_forwardMessages",
			Handler:    _RPCMessages_MessagesForwardMessages_Handler,
		},
		{
			MethodName: "messages_reportSpam",
			Handler:    _RPCMessages_MessagesReportSpam_Handler,
		},
		{
			MethodName: "messages_hideReportSpam",
			Handler:    _RPCMessages_MessagesHideReportSpam_Handler,
		},
		{
			MethodName: "messages_getPeerSettings",
			Handler:    _RPCMessages_MessagesGetPeerSettings_Handler,
		},
		{
			MethodName: "messages_getChats",
			Handler:    _RPCMessages_MessagesGetChats_Handler,
		},
		{
			MethodName: "messages_getFullChat",
			Handler:    _RPCMessages_MessagesGetFullChat_Handler,
		},
		{
			MethodName: "messages_editChatTitle",
			Handler:    _RPCMessages_MessagesEditChatTitle_Handler,
		},
		{
			MethodName: "messages_editChatPhoto",
			Handler:    _RPCMessages_MessagesEditChatPhoto_Handler,
		},
		{
			MethodName: "messages_addChatUser",
			Handler:    _RPCMessages_MessagesAddChatUser_Handler,
		},
		{
			MethodName: "messages_deleteChatUser",
			Handler:    _RPCMessages_MessagesDeleteChatUser_Handler,
		},
		{
			MethodName: "messages_createChat",
			Handler:    _RPCMessages_MessagesCreateChat_Handler,
		},
		{
			MethodName: "messages_forwardMessage",
			Handler:    _RPCMessages_MessagesForwardMessage_Handler,
		},
		{
			MethodName: "messages_getDhConfig",
			Handler:    _RPCMessages_MessagesGetDhConfig_Handler,
		},
		{
			MethodName: "messages_requestEncryption",
			Handler:    _RPCMessages_MessagesRequestEncryption_Handler,
		},
		{
			MethodName: "messages_acceptEncryption",
			Handler:    _RPCMessages_MessagesAcceptEncryption_Handler,
		},
		{
			MethodName: "messages_discardEncryption",
			Handler:    _RPCMessages_MessagesDiscardEncryption_Handler,
		},
		{
			MethodName: "messages_setEncryptedTyping",
			Handler:    _RPCMessages_MessagesSetEncryptedTyping_Handler,
		},
		{
			MethodName: "messages_readEncryptedHistory",
			Handler:    _RPCMessages_MessagesReadEncryptedHistory_Handler,
		},
		{
			MethodName: "messages_sendEncrypted",
			Handler:    _RPCMessages_MessagesSendEncrypted_Handler,
		},
		{
			MethodName: "messages_sendEncryptedFile",
			Handler:    _RPCMessages_MessagesSendEncryptedFile_Handler,
		},
		{
			MethodName: "messages_sendEncryptedService",
			Handler:    _RPCMessages_MessagesSendEncryptedService_Handler,
		},
		{
			MethodName: "messages_receivedQueue",
			Handler:    _RPCMessages_MessagesReceivedQueue_Handler,
		},
		{
			MethodName: "messages_reportEncryptedSpam",
			Handler:    _RPCMessages_MessagesReportEncryptedSpam_Handler,
		},
		{
			MethodName: "messages_readMessageContents",
			Handler:    _RPCMessages_MessagesReadMessageContents_Handler,
		},
		{
			MethodName: "messages_getAllStickers",
			Handler:    _RPCMessages_MessagesGetAllStickers_Handler,
		},
		{
			MethodName: "messages_getWebPagePreview",
			Handler:    _RPCMessages_MessagesGetWebPagePreview_Handler,
		},
		{
			MethodName: "messages_exportChatInvite",
			Handler:    _RPCMessages_MessagesExportChatInvite_Handler,
		},
		{
			MethodName: "messages_checkChatInvite",
			Handler:    _RPCMessages_MessagesCheckChatInvite_Handler,
		},
		{
			MethodName: "messages_importChatInvite",
			Handler:    _RPCMessages_MessagesImportChatInvite_Handler,
		},
		{
			MethodName: "messages_getStickerSet",
			Handler:    _RPCMessages_MessagesGetStickerSet_Handler,
		},
		{
			MethodName: "messages_installStickerSet",
			Handler:    _RPCMessages_MessagesInstallStickerSet_Handler,
		},
		{
			MethodName: "messages_uninstallStickerSet",
			Handler:    _RPCMessages_MessagesUninstallStickerSet_Handler,
		},
		{
			MethodName: "messages_startBot",
			Handler:    _RPCMessages_MessagesStartBot_Handler,
		},
		{
			MethodName: "messages_getMessagesViews",
			Handler:    _RPCMessages_MessagesGetMessagesViews_Handler,
		},
		{
			MethodName: "messages_toggleChatAdmins",
			Handler:    _RPCMessages_MessagesToggleChatAdmins_Handler,
		},
		{
			MethodName: "messages_editChatAdmin",
			Handler:    _RPCMessages_MessagesEditChatAdmin_Handler,
		},
		{
			MethodName: "messages_migrateChat",
			Handler:    _RPCMessages_MessagesMigrateChat_Handler,
		},
		{
			MethodName: "messages_searchGlobal",
			Handler:    _RPCMessages_MessagesSearchGlobal_Handler,
		},
		{
			MethodName: "messages_reorderStickerSets",
			Handler:    _RPCMessages_MessagesReorderStickerSets_Handler,
		},
		{
			MethodName: "messages_getDocumentByHash",
			Handler:    _RPCMessages_MessagesGetDocumentByHash_Handler,
		},
		{
			MethodName: "messages_searchGifs",
			Handler:    _RPCMessages_MessagesSearchGifs_Handler,
		},
		{
			MethodName: "messages_getSavedGifs",
			Handler:    _RPCMessages_MessagesGetSavedGifs_Handler,
		},
		{
			MethodName: "messages_saveGif",
			Handler:    _RPCMessages_MessagesSaveGif_Handler,
		},
		{
			MethodName: "messages_getInlineBotResults",
			Handler:    _RPCMessages_MessagesGetInlineBotResults_Handler,
		},
		{
			MethodName: "messages_setInlineBotResults",
			Handler:    _RPCMessages_MessagesSetInlineBotResults_Handler,
		},
		{
			MethodName: "messages_sendInlineBotResult",
			Handler:    _RPCMessages_MessagesSendInlineBotResult_Handler,
		},
		{
			MethodName: "messages_getMessageEditData",
			Handler:    _RPCMessages_MessagesGetMessageEditData_Handler,
		},
		{
			MethodName: "messages_editMessage",
			Handler:    _RPCMessages_MessagesEditMessage_Handler,
		},
		{
			MethodName: "messages_editInlineBotMessage",
			Handler:    _RPCMessages_MessagesEditInlineBotMessage_Handler,
		},
		{
			MethodName: "messages_getBotCallbackAnswer",
			Handler:    _RPCMessages_MessagesGetBotCallbackAnswer_Handler,
		},
		{
			MethodName: "messages_setBotCallbackAnswer",
			Handler:    _RPCMessages_MessagesSetBotCallbackAnswer_Handler,
		},
		{
			MethodName: "messages_getPeerDialogs",
			Handler:    _RPCMessages_MessagesGetPeerDialogs_Handler,
		},
		{
			MethodName: "messages_saveDraft",
			Handler:    _RPCMessages_MessagesSaveDraft_Handler,
		},
		{
			MethodName: "messages_getAllDrafts",
			Handler:    _RPCMessages_MessagesGetAllDrafts_Handler,
		},
		{
			MethodName: "messages_getFeaturedStickers",
			Handler:    _RPCMessages_MessagesGetFeaturedStickers_Handler,
		},
		{
			MethodName: "messages_readFeaturedStickers",
			Handler:    _RPCMessages_MessagesReadFeaturedStickers_Handler,
		},
		{
			MethodName: "messages_getRecentStickers",
			Handler:    _RPCMessages_MessagesGetRecentStickers_Handler,
		},
		{
			MethodName: "messages_saveRecentSticker",
			Handler:    _RPCMessages_MessagesSaveRecentSticker_Handler,
		},
		{
			MethodName: "messages_clearRecentStickers",
			Handler:    _RPCMessages_MessagesClearRecentStickers_Handler,
		},
		{
			MethodName: "messages_getArchivedStickers",
			Handler:    _RPCMessages_MessagesGetArchivedStickers_Handler,
		},
		{
			MethodName: "messages_getMaskStickers",
			Handler:    _RPCMessages_MessagesGetMaskStickers_Handler,
		},
		{
			MethodName: "messages_getAttachedStickers",
			Handler:    _RPCMessages_MessagesGetAttachedStickers_Handler,
		},
		{
			MethodName: "messages_setGameScore",
			Handler:    _RPCMessages_MessagesSetGameScore_Handler,
		},
		{
			MethodName: "messages_setInlineGameScore",
			Handler:    _RPCMessages_MessagesSetInlineGameScore_Handler,
		},
		{
			MethodName: "messages_getGameHighScores",
			Handler:    _RPCMessages_MessagesGetGameHighScores_Handler,
		},
		{
			MethodName: "messages_getInlineGameHighScores",
			Handler:    _RPCMessages_MessagesGetInlineGameHighScores_Handler,
		},
		{
			MethodName: "messages_getCommonChats",
			Handler:    _RPCMessages_MessagesGetCommonChats_Handler,
		},
		{
			MethodName: "messages_getAllChats",
			Handler:    _RPCMessages_MessagesGetAllChats_Handler,
		},
		{
			MethodName: "messages_getWebPage",
			Handler:    _RPCMessages_MessagesGetWebPage_Handler,
		},
		{
			MethodName: "messages_toggleDialogPin",
			Handler:    _RPCMessages_MessagesToggleDialogPin_Handler,
		},
		{
			MethodName: "messages_reorderPinnedDialogs",
			Handler:    _RPCMessages_MessagesReorderPinnedDialogs_Handler,
		},
		{
			MethodName: "messages_getPinnedDialogs",
			Handler:    _RPCMessages_MessagesGetPinnedDialogs_Handler,
		},
		{
			MethodName: "messages_setBotShippingResults",
			Handler:    _RPCMessages_MessagesSetBotShippingResults_Handler,
		},
		{
			MethodName: "messages_setBotPrecheckoutResults",
			Handler:    _RPCMessages_MessagesSetBotPrecheckoutResults_Handler,
		},
		{
			MethodName: "messages_uploadMedia",
			Handler:    _RPCMessages_MessagesUploadMedia_Handler,
		},
		{
			MethodName: "messages_sendScreenshotNotification",
			Handler:    _RPCMessages_MessagesSendScreenshotNotification_Handler,
		},
		{
			MethodName: "messages_getFavedStickers",
			Handler:    _RPCMessages_MessagesGetFavedStickers_Handler,
		},
		{
			MethodName: "messages_faveSticker",
			Handler:    _RPCMessages_MessagesFaveSticker_Handler,
		},
		{
			MethodName: "messages_getUnreadMentions",
			Handler:    _RPCMessages_MessagesGetUnreadMentions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCUpload_UploadSaveFilePart_FullMethodName     = "/mtproto.RPCUpload/upload_saveFilePart"
	RPCUpload_UploadGetFile_FullMethodName          = "/mtproto.RPCUpload/upload_getFile"
	RPCUpload_UploadSaveBigFilePart_FullMethodName  = "/mtproto.RPCUpload/upload_saveBigFilePart"
	RPCUpload_UploadGetWebFile_FullMethodName       = "/mtproto.RPCUpload/upload_getWebFile"
	RPCUpload_UploadGetCdnFile_FullMethodName       = "/mtproto.RPCUpload/upload_getCdnFile"
	RPCUpload_UploadReuploadCdnFile_FullMethodName  = "/mtproto.RPCUpload/upload_reuploadCdnFile"
	RPCUpload_UploadGetCdnFileHashes_FullMethodName = "/mtproto.RPCUpload/upload_getCdnFileHashes"
)

// RPCUploadClient is the client API for RPCUpload service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCUploadClient interface {
	// upload.saveFilePart#b304a621 file_id:long file_part:int bytes:bytes = Bool;
	UploadSaveFilePart(ctx context.Context, in *TLUploadSaveFilePart, opts ...grpc.CallOption) (*Bool, error)
	// upload.getFile#e3a6cfb5 location:InputFileLocation offset:int limit:int = upload.File;
	UploadGetFile(ctx context.Context, in *TLUploadGetFile, opts ...grpc.CallOption) (*Upload_File, error)
	// upload.saveBigFilePart#de7b673d file_id:long file_part:int file_total_parts:int bytes:bytes = Bool;
	UploadSaveBigFilePart(ctx context.Context, in *TLUploadSaveBigFilePart, opts ...grpc.CallOption) (*Bool, error)
	// upload.getWebFile#24e6818d location:InputWebFileLocation offset:int limit:int = upload.WebFile;
	UploadGetWebFile(ctx context.Context, in *TLUploadGetWebFile, opts ...grpc.CallOption) (*Upload_WebFile, error)
	// upload.getCdnFile#2000bcc3 file_token:bytes offset:int limit:int = upload.CdnFile;
	UploadGetCdnFile(ctx context.Context, in *TLUploadGetCdnFile, opts ...grpc.CallOption) (*Upload_CdnFile, error)
	// upload.reuploadCdnFile#1af91c09 file_token:bytes request_token:bytes = Vector<CdnFileHash>;
	UploadReuploadCdnFile(ctx context.Context, in *TLUploadReuploadCdnFile, opts ...grpc.CallOption) (*Vector_CdnFileHash, error)
	// upload.getCdnFileHashes#f715c87b file_token:bytes offset:int = Vector<CdnFileHash>;
	UploadGetCdnFileHashes(ctx context.Context, in *TLUploadGetCdnFileHashes, opts ...grpc.CallOption) (*Vector_CdnFileHash, error)
}

type rPCUploadClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCUploadClient(cc grpc.ClientConnInterface) RPCUploadClient {
	return &rPCUploadClient{cc}
}

func (c *rPCUploadClient) UploadSaveFilePart(ctx context.Context, in *TLUploadSaveFilePart, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCUpload_UploadSaveFilePart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUploadClient) UploadGetFile(ctx context.Context, in *TLUploadGetFile, opts ...grpc.CallOption) (*Upload_File, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Upload_File)
	err := c.cc.Invoke(ctx, RPCUpload_UploadGetFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUploadClient) UploadSaveBigFilePart(ctx context.Context, in *TLUploadSaveBigFilePart, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCUpload_UploadSaveBigFilePart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUploadClient) UploadGetWebFile(ctx context.Context, in *TLUploadGetWebFile, opts ...grpc.CallOption) (*Upload_WebFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Upload_WebFile)
	err := c.cc.Invoke(ctx, RPCUpload_UploadGetWebFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUploadClient) UploadGetCdnFile(ctx context.Context, in *TLUploadGetCdnFile, opts ...grpc.CallOption) (*Upload_CdnFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Upload_CdnFile)
	err := c.cc.Invoke(ctx, RPCUpload_UploadGetCdnFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUploadClient) UploadReuploadCdnFile(ctx context.Context, in *TLUploadReuploadCdnFile, opts ...grpc.CallOption) (*Vector_CdnFileHash, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_CdnFileHash)
	err := c.cc.Invoke(ctx, RPCUpload_UploadReuploadCdnFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUploadClient) UploadGetCdnFileHashes(ctx context.Context, in *TLUploadGetCdnFileHashes, opts ...grpc.CallOption) (*Vector_CdnFileHash, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_CdnFileHash)
	err := c.cc.Invoke(ctx, RPCUpload_UploadGetCdnFileHashes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCUploadServer is the server API for RPCUpload service.
// All implementations must embed UnimplementedRPCUploadServer
// for forward compatibility.
type RPCUploadServer interface {
	// upload.saveFilePart#b304a621 file_id:long file_part:int bytes:bytes = Bool;
	UploadSaveFilePart(context.Context, *TLUploadSaveFilePart) (*Bool, error)
	// upload.getFile#e3a6cfb5 location:InputFileLocation offset:int limit:int = upload.File;
	UploadGetFile(context.Context, *TLUploadGetFile) (*Upload_File, error)
	// upload.saveBigFilePart#de7b673d file_id:long file_part:int file_total_parts:int bytes:bytes = Bool;
	UploadSaveBigFilePart(context.Context, *TLUploadSaveBigFilePart) (*Bool, error)
	// upload.getWebFile#24e6818d location:InputWebFileLocation offset:int limit:int = upload.WebFile;
	UploadGetWebFile(context.Context, *TLUploadGetWebFile) (*Upload_WebFile, error)
	// upload.getCdnFile#2000bcc3 file_token:bytes offset:int limit:int = upload.CdnFile;
	UploadGetCdnFile(context.Context, *TLUploadGetCdnFile) (*Upload_CdnFile, error)
	// upload.reuploadCdnFile#1af91c09 file_token:bytes request_token:bytes = Vector<CdnFileHash>;
	UploadReuploadCdnFile(context.Context, *TLUploadReuploadCdnFile) (*Vector_CdnFileHash, error)
	// upload.getCdnFileHashes#f715c87b file_token:bytes offset:int = Vector<CdnFileHash>;
	UploadGetCdnFileHashes(context.Context, *TLUploadGetCdnFileHashes) (*Vector_CdnFileHash, error)
	mustEmbedUnimplementedRPCUploadServer()
}

// UnimplementedRPCUploadServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCUploadServer struct{}

func (UnimplementedRPCUploadServer) UploadSaveFilePart(context.Context, *TLUploadSaveFilePart) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadSaveFilePart not implemented")
}
func (UnimplementedRPCUploadServer) UploadGetFile(context.Context, *TLUploadGetFile) (*Upload_File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadGetFile not implemented")
}
func (UnimplementedRPCUploadServer) UploadSaveBigFilePart(context.Context, *TLUploadSaveBigFilePart) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadSaveBigFilePart not implemented")
}
func (UnimplementedRPCUploadServer) UploadGetWebFile(context.Context, *TLUploadGetWebFile) (*Upload_WebFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadGetWebFile not implemented")
}
func (UnimplementedRPCUploadServer) UploadGetCdnFile(context.Context, *TLUploadGetCdnFile) (*Upload_CdnFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadGetCdnFile not implemented")
}
func (UnimplementedRPCUploadServer) UploadReuploadCdnFile(context.Context, *TLUploadReuploadCdnFile) (*Vector_CdnFileHash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadReuploadCdnFile not implemented")
}
func (UnimplementedRPCUploadServer) UploadGetCdnFileHashes(context.Context, *TLUploadGetCdnFileHashes) (*Vector_CdnFileHash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadGetCdnFileHashes not implemented")
}
func (UnimplementedRPCUploadServer) mustEmbedUnimplementedRPCUploadServer() {}
func (UnimplementedRPCUploadServer) testEmbeddedByValue()                   {}

// UnsafeRPCUploadServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCUploadServer will
// result in compilation errors.
type UnsafeRPCUploadServer interface {
	mustEmbedUnimplementedRPCUploadServer()
}

func RegisterRPCUploadServer(s grpc.ServiceRegistrar, srv RPCUploadServer) {
	// If the following call pancis, it indicates UnimplementedRPCUploadServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCUpload_ServiceDesc, srv)
}

func _RPCUpload_UploadSaveFilePart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUploadSaveFilePart)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUploadServer).UploadSaveFilePart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUpload_UploadSaveFilePart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUploadServer).UploadSaveFilePart(ctx, req.(*TLUploadSaveFilePart))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUpload_UploadGetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUploadGetFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUploadServer).UploadGetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUpload_UploadGetFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUploadServer).UploadGetFile(ctx, req.(*TLUploadGetFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUpload_UploadSaveBigFilePart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUploadSaveBigFilePart)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUploadServer).UploadSaveBigFilePart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUpload_UploadSaveBigFilePart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUploadServer).UploadSaveBigFilePart(ctx, req.(*TLUploadSaveBigFilePart))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUpload_UploadGetWebFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUploadGetWebFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUploadServer).UploadGetWebFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUpload_UploadGetWebFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUploadServer).UploadGetWebFile(ctx, req.(*TLUploadGetWebFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUpload_UploadGetCdnFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUploadGetCdnFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUploadServer).UploadGetCdnFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUpload_UploadGetCdnFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUploadServer).UploadGetCdnFile(ctx, req.(*TLUploadGetCdnFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUpload_UploadReuploadCdnFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUploadReuploadCdnFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUploadServer).UploadReuploadCdnFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUpload_UploadReuploadCdnFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUploadServer).UploadReuploadCdnFile(ctx, req.(*TLUploadReuploadCdnFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUpload_UploadGetCdnFileHashes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUploadGetCdnFileHashes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUploadServer).UploadGetCdnFileHashes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUpload_UploadGetCdnFileHashes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUploadServer).UploadGetCdnFileHashes(ctx, req.(*TLUploadGetCdnFileHashes))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCUpload_ServiceDesc is the grpc.ServiceDesc for RPCUpload service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCUpload_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCUpload",
	HandlerType: (*RPCUploadServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "upload_saveFilePart",
			Handler:    _RPCUpload_UploadSaveFilePart_Handler,
		},
		{
			MethodName: "upload_getFile",
			Handler:    _RPCUpload_UploadGetFile_Handler,
		},
		{
			MethodName: "upload_saveBigFilePart",
			Handler:    _RPCUpload_UploadSaveBigFilePart_Handler,
		},
		{
			MethodName: "upload_getWebFile",
			Handler:    _RPCUpload_UploadGetWebFile_Handler,
		},
		{
			MethodName: "upload_getCdnFile",
			Handler:    _RPCUpload_UploadGetCdnFile_Handler,
		},
		{
			MethodName: "upload_reuploadCdnFile",
			Handler:    _RPCUpload_UploadReuploadCdnFile_Handler,
		},
		{
			MethodName: "upload_getCdnFileHashes",
			Handler:    _RPCUpload_UploadGetCdnFileHashes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCStickers_StickersCreateStickerSet_FullMethodName      = "/mtproto.RPCStickers/stickers_createStickerSet"
	RPCStickers_StickersRemoveStickerFromSet_FullMethodName  = "/mtproto.RPCStickers/stickers_removeStickerFromSet"
	RPCStickers_StickersChangeStickerPosition_FullMethodName = "/mtproto.RPCStickers/stickers_changeStickerPosition"
	RPCStickers_StickersAddStickerToSet_FullMethodName       = "/mtproto.RPCStickers/stickers_addStickerToSet"
)

// RPCStickersClient is the client API for RPCStickers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCStickersClient interface {
	// stickers.createStickerSet#9bd86e6a flags:# masks:flags.0?true user_id:InputUser title:string short_name:string stickers:Vector<InputStickerSetItem> = messages.StickerSet;
	StickersCreateStickerSet(ctx context.Context, in *TLStickersCreateStickerSet, opts ...grpc.CallOption) (*Messages_StickerSet, error)
	// stickers.removeStickerFromSet#f7760f51 sticker:InputDocument = messages.StickerSet;
	StickersRemoveStickerFromSet(ctx context.Context, in *TLStickersRemoveStickerFromSet, opts ...grpc.CallOption) (*Messages_StickerSet, error)
	// stickers.changeStickerPosition#ffb6d4ca sticker:InputDocument position:int = messages.StickerSet;
	StickersChangeStickerPosition(ctx context.Context, in *TLStickersChangeStickerPosition, opts ...grpc.CallOption) (*Messages_StickerSet, error)
	// stickers.addStickerToSet#8653febe stickerset:InputStickerSet sticker:InputStickerSetItem = messages.StickerSet;
	StickersAddStickerToSet(ctx context.Context, in *TLStickersAddStickerToSet, opts ...grpc.CallOption) (*Messages_StickerSet, error)
}

type rPCStickersClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCStickersClient(cc grpc.ClientConnInterface) RPCStickersClient {
	return &rPCStickersClient{cc}
}

func (c *rPCStickersClient) StickersCreateStickerSet(ctx context.Context, in *TLStickersCreateStickerSet, opts ...grpc.CallOption) (*Messages_StickerSet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_StickerSet)
	err := c.cc.Invoke(ctx, RPCStickers_StickersCreateStickerSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStickersClient) StickersRemoveStickerFromSet(ctx context.Context, in *TLStickersRemoveStickerFromSet, opts ...grpc.CallOption) (*Messages_StickerSet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_StickerSet)
	err := c.cc.Invoke(ctx, RPCStickers_StickersRemoveStickerFromSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStickersClient) StickersChangeStickerPosition(ctx context.Context, in *TLStickersChangeStickerPosition, opts ...grpc.CallOption) (*Messages_StickerSet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_StickerSet)
	err := c.cc.Invoke(ctx, RPCStickers_StickersChangeStickerPosition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStickersClient) StickersAddStickerToSet(ctx context.Context, in *TLStickersAddStickerToSet, opts ...grpc.CallOption) (*Messages_StickerSet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_StickerSet)
	err := c.cc.Invoke(ctx, RPCStickers_StickersAddStickerToSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCStickersServer is the server API for RPCStickers service.
// All implementations must embed UnimplementedRPCStickersServer
// for forward compatibility.
type RPCStickersServer interface {
	// stickers.createStickerSet#9bd86e6a flags:# masks:flags.0?true user_id:InputUser title:string short_name:string stickers:Vector<InputStickerSetItem> = messages.StickerSet;
	StickersCreateStickerSet(context.Context, *TLStickersCreateStickerSet) (*Messages_StickerSet, error)
	// stickers.removeStickerFromSet#f7760f51 sticker:InputDocument = messages.StickerSet;
	StickersRemoveStickerFromSet(context.Context, *TLStickersRemoveStickerFromSet) (*Messages_StickerSet, error)
	// stickers.changeStickerPosition#ffb6d4ca sticker:InputDocument position:int = messages.StickerSet;
	StickersChangeStickerPosition(context.Context, *TLStickersChangeStickerPosition) (*Messages_StickerSet, error)
	// stickers.addStickerToSet#8653febe stickerset:InputStickerSet sticker:InputStickerSetItem = messages.StickerSet;
	StickersAddStickerToSet(context.Context, *TLStickersAddStickerToSet) (*Messages_StickerSet, error)
	mustEmbedUnimplementedRPCStickersServer()
}

// UnimplementedRPCStickersServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCStickersServer struct{}

func (UnimplementedRPCStickersServer) StickersCreateStickerSet(context.Context, *TLStickersCreateStickerSet) (*Messages_StickerSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StickersCreateStickerSet not implemented")
}
func (UnimplementedRPCStickersServer) StickersRemoveStickerFromSet(context.Context, *TLStickersRemoveStickerFromSet) (*Messages_StickerSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StickersRemoveStickerFromSet not implemented")
}
func (UnimplementedRPCStickersServer) StickersChangeStickerPosition(context.Context, *TLStickersChangeStickerPosition) (*Messages_StickerSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StickersChangeStickerPosition not implemented")
}
func (UnimplementedRPCStickersServer) StickersAddStickerToSet(context.Context, *TLStickersAddStickerToSet) (*Messages_StickerSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StickersAddStickerToSet not implemented")
}
func (UnimplementedRPCStickersServer) mustEmbedUnimplementedRPCStickersServer() {}
func (UnimplementedRPCStickersServer) testEmbeddedByValue()                     {}

// UnsafeRPCStickersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCStickersServer will
// result in compilation errors.
type UnsafeRPCStickersServer interface {
	mustEmbedUnimplementedRPCStickersServer()
}

func RegisterRPCStickersServer(s grpc.ServiceRegistrar, srv RPCStickersServer) {
	// If the following call pancis, it indicates UnimplementedRPCStickersServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCStickers_ServiceDesc, srv)
}

func _RPCStickers_StickersCreateStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStickersCreateStickerSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServer).StickersCreateStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStickers_StickersCreateStickerSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServer).StickersCreateStickerSet(ctx, req.(*TLStickersCreateStickerSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStickers_StickersRemoveStickerFromSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStickersRemoveStickerFromSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServer).StickersRemoveStickerFromSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStickers_StickersRemoveStickerFromSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServer).StickersRemoveStickerFromSet(ctx, req.(*TLStickersRemoveStickerFromSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStickers_StickersChangeStickerPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStickersChangeStickerPosition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServer).StickersChangeStickerPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStickers_StickersChangeStickerPosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServer).StickersChangeStickerPosition(ctx, req.(*TLStickersChangeStickerPosition))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStickers_StickersAddStickerToSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStickersAddStickerToSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServer).StickersAddStickerToSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStickers_StickersAddStickerToSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServer).StickersAddStickerToSet(ctx, req.(*TLStickersAddStickerToSet))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCStickers_ServiceDesc is the grpc.ServiceDesc for RPCStickers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCStickers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCStickers",
	HandlerType: (*RPCStickersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "stickers_createStickerSet",
			Handler:    _RPCStickers_StickersCreateStickerSet_Handler,
		},
		{
			MethodName: "stickers_removeStickerFromSet",
			Handler:    _RPCStickers_StickersRemoveStickerFromSet_Handler,
		},
		{
			MethodName: "stickers_changeStickerPosition",
			Handler:    _RPCStickers_StickersChangeStickerPosition_Handler,
		},
		{
			MethodName: "stickers_addStickerToSet",
			Handler:    _RPCStickers_StickersAddStickerToSet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCHelp_HelpGetConfig_FullMethodName           = "/mtproto.RPCHelp/help_getConfig"
	RPCHelp_HelpGetNearestDc_FullMethodName        = "/mtproto.RPCHelp/help_getNearestDc"
	RPCHelp_HelpGetAppUpdate_FullMethodName        = "/mtproto.RPCHelp/help_getAppUpdate"
	RPCHelp_HelpSaveAppLog_FullMethodName          = "/mtproto.RPCHelp/help_saveAppLog"
	RPCHelp_HelpGetInviteText_FullMethodName       = "/mtproto.RPCHelp/help_getInviteText"
	RPCHelp_HelpGetSupport_FullMethodName          = "/mtproto.RPCHelp/help_getSupport"
	RPCHelp_HelpGetAppChangelog_FullMethodName     = "/mtproto.RPCHelp/help_getAppChangelog"
	RPCHelp_HelpGetTermsOfService_FullMethodName   = "/mtproto.RPCHelp/help_getTermsOfService"
	RPCHelp_HelpSetBotUpdatesStatus_FullMethodName = "/mtproto.RPCHelp/help_setBotUpdatesStatus"
	RPCHelp_HelpGetCdnConfig_FullMethodName        = "/mtproto.RPCHelp/help_getCdnConfig"
)

// RPCHelpClient is the client API for RPCHelp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCHelpClient interface {
	// help.getConfig#c4f9186b = Config;
	HelpGetConfig(ctx context.Context, in *TLHelpGetConfig, opts ...grpc.CallOption) (*Config, error)
	// help.getNearestDc#1fb33026 = NearestDc;
	HelpGetNearestDc(ctx context.Context, in *TLHelpGetNearestDc, opts ...grpc.CallOption) (*NearestDc, error)
	// help.getAppUpdate#ae2de196 = help.AppUpdate;
	HelpGetAppUpdate(ctx context.Context, in *TLHelpGetAppUpdate, opts ...grpc.CallOption) (*Help_AppUpdate, error)
	// help.saveAppLog#6f02f748 events:Vector<InputAppEvent> = Bool;
	HelpSaveAppLog(ctx context.Context, in *TLHelpSaveAppLog, opts ...grpc.CallOption) (*Bool, error)
	// help.getInviteText#4d392343 = help.InviteText;
	HelpGetInviteText(ctx context.Context, in *TLHelpGetInviteText, opts ...grpc.CallOption) (*Help_InviteText, error)
	// help.getSupport#9cdf08cd = help.Support;
	HelpGetSupport(ctx context.Context, in *TLHelpGetSupport, opts ...grpc.CallOption) (*Help_Support, error)
	// help.getAppChangelog#9010ef6f prev_app_version:string = Updates;
	HelpGetAppChangelog(ctx context.Context, in *TLHelpGetAppChangelog, opts ...grpc.CallOption) (*Updates, error)
	// help.getTermsOfService#350170f3 = help.TermsOfService;
	HelpGetTermsOfService(ctx context.Context, in *TLHelpGetTermsOfService, opts ...grpc.CallOption) (*Help_TermsOfService, error)
	// help.setBotUpdatesStatus#ec22cfcd pending_updates_count:int message:string = Bool;
	HelpSetBotUpdatesStatus(ctx context.Context, in *TLHelpSetBotUpdatesStatus, opts ...grpc.CallOption) (*Bool, error)
	// help.getCdnConfig#52029342 = CdnConfig;
	HelpGetCdnConfig(ctx context.Context, in *TLHelpGetCdnConfig, opts ...grpc.CallOption) (*CdnConfig, error)
}

type rPCHelpClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCHelpClient(cc grpc.ClientConnInterface) RPCHelpClient {
	return &rPCHelpClient{cc}
}

func (c *rPCHelpClient) HelpGetConfig(ctx context.Context, in *TLHelpGetConfig, opts ...grpc.CallOption) (*Config, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Config)
	err := c.cc.Invoke(ctx, RPCHelp_HelpGetConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpClient) HelpGetNearestDc(ctx context.Context, in *TLHelpGetNearestDc, opts ...grpc.CallOption) (*NearestDc, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NearestDc)
	err := c.cc.Invoke(ctx, RPCHelp_HelpGetNearestDc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpClient) HelpGetAppUpdate(ctx context.Context, in *TLHelpGetAppUpdate, opts ...grpc.CallOption) (*Help_AppUpdate, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Help_AppUpdate)
	err := c.cc.Invoke(ctx, RPCHelp_HelpGetAppUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpClient) HelpSaveAppLog(ctx context.Context, in *TLHelpSaveAppLog, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCHelp_HelpSaveAppLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpClient) HelpGetInviteText(ctx context.Context, in *TLHelpGetInviteText, opts ...grpc.CallOption) (*Help_InviteText, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Help_InviteText)
	err := c.cc.Invoke(ctx, RPCHelp_HelpGetInviteText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpClient) HelpGetSupport(ctx context.Context, in *TLHelpGetSupport, opts ...grpc.CallOption) (*Help_Support, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Help_Support)
	err := c.cc.Invoke(ctx, RPCHelp_HelpGetSupport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpClient) HelpGetAppChangelog(ctx context.Context, in *TLHelpGetAppChangelog, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCHelp_HelpGetAppChangelog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpClient) HelpGetTermsOfService(ctx context.Context, in *TLHelpGetTermsOfService, opts ...grpc.CallOption) (*Help_TermsOfService, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Help_TermsOfService)
	err := c.cc.Invoke(ctx, RPCHelp_HelpGetTermsOfService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpClient) HelpSetBotUpdatesStatus(ctx context.Context, in *TLHelpSetBotUpdatesStatus, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCHelp_HelpSetBotUpdatesStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpClient) HelpGetCdnConfig(ctx context.Context, in *TLHelpGetCdnConfig, opts ...grpc.CallOption) (*CdnConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CdnConfig)
	err := c.cc.Invoke(ctx, RPCHelp_HelpGetCdnConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCHelpServer is the server API for RPCHelp service.
// All implementations must embed UnimplementedRPCHelpServer
// for forward compatibility.
type RPCHelpServer interface {
	// help.getConfig#c4f9186b = Config;
	HelpGetConfig(context.Context, *TLHelpGetConfig) (*Config, error)
	// help.getNearestDc#1fb33026 = NearestDc;
	HelpGetNearestDc(context.Context, *TLHelpGetNearestDc) (*NearestDc, error)
	// help.getAppUpdate#ae2de196 = help.AppUpdate;
	HelpGetAppUpdate(context.Context, *TLHelpGetAppUpdate) (*Help_AppUpdate, error)
	// help.saveAppLog#6f02f748 events:Vector<InputAppEvent> = Bool;
	HelpSaveAppLog(context.Context, *TLHelpSaveAppLog) (*Bool, error)
	// help.getInviteText#4d392343 = help.InviteText;
	HelpGetInviteText(context.Context, *TLHelpGetInviteText) (*Help_InviteText, error)
	// help.getSupport#9cdf08cd = help.Support;
	HelpGetSupport(context.Context, *TLHelpGetSupport) (*Help_Support, error)
	// help.getAppChangelog#9010ef6f prev_app_version:string = Updates;
	HelpGetAppChangelog(context.Context, *TLHelpGetAppChangelog) (*Updates, error)
	// help.getTermsOfService#350170f3 = help.TermsOfService;
	HelpGetTermsOfService(context.Context, *TLHelpGetTermsOfService) (*Help_TermsOfService, error)
	// help.setBotUpdatesStatus#ec22cfcd pending_updates_count:int message:string = Bool;
	HelpSetBotUpdatesStatus(context.Context, *TLHelpSetBotUpdatesStatus) (*Bool, error)
	// help.getCdnConfig#52029342 = CdnConfig;
	HelpGetCdnConfig(context.Context, *TLHelpGetCdnConfig) (*CdnConfig, error)
	mustEmbedUnimplementedRPCHelpServer()
}

// UnimplementedRPCHelpServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCHelpServer struct{}

func (UnimplementedRPCHelpServer) HelpGetConfig(context.Context, *TLHelpGetConfig) (*Config, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetConfig not implemented")
}
func (UnimplementedRPCHelpServer) HelpGetNearestDc(context.Context, *TLHelpGetNearestDc) (*NearestDc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetNearestDc not implemented")
}
func (UnimplementedRPCHelpServer) HelpGetAppUpdate(context.Context, *TLHelpGetAppUpdate) (*Help_AppUpdate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetAppUpdate not implemented")
}
func (UnimplementedRPCHelpServer) HelpSaveAppLog(context.Context, *TLHelpSaveAppLog) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpSaveAppLog not implemented")
}
func (UnimplementedRPCHelpServer) HelpGetInviteText(context.Context, *TLHelpGetInviteText) (*Help_InviteText, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetInviteText not implemented")
}
func (UnimplementedRPCHelpServer) HelpGetSupport(context.Context, *TLHelpGetSupport) (*Help_Support, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetSupport not implemented")
}
func (UnimplementedRPCHelpServer) HelpGetAppChangelog(context.Context, *TLHelpGetAppChangelog) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetAppChangelog not implemented")
}
func (UnimplementedRPCHelpServer) HelpGetTermsOfService(context.Context, *TLHelpGetTermsOfService) (*Help_TermsOfService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetTermsOfService not implemented")
}
func (UnimplementedRPCHelpServer) HelpSetBotUpdatesStatus(context.Context, *TLHelpSetBotUpdatesStatus) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpSetBotUpdatesStatus not implemented")
}
func (UnimplementedRPCHelpServer) HelpGetCdnConfig(context.Context, *TLHelpGetCdnConfig) (*CdnConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetCdnConfig not implemented")
}
func (UnimplementedRPCHelpServer) mustEmbedUnimplementedRPCHelpServer() {}
func (UnimplementedRPCHelpServer) testEmbeddedByValue()                 {}

// UnsafeRPCHelpServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCHelpServer will
// result in compilation errors.
type UnsafeRPCHelpServer interface {
	mustEmbedUnimplementedRPCHelpServer()
}

func RegisterRPCHelpServer(s grpc.ServiceRegistrar, srv RPCHelpServer) {
	// If the following call pancis, it indicates UnimplementedRPCHelpServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCHelp_ServiceDesc, srv)
}

func _RPCHelp_HelpGetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServer).HelpGetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCHelp_HelpGetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServer).HelpGetConfig(ctx, req.(*TLHelpGetConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelp_HelpGetNearestDc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetNearestDc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServer).HelpGetNearestDc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCHelp_HelpGetNearestDc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServer).HelpGetNearestDc(ctx, req.(*TLHelpGetNearestDc))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelp_HelpGetAppUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetAppUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServer).HelpGetAppUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCHelp_HelpGetAppUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServer).HelpGetAppUpdate(ctx, req.(*TLHelpGetAppUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelp_HelpSaveAppLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpSaveAppLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServer).HelpSaveAppLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCHelp_HelpSaveAppLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServer).HelpSaveAppLog(ctx, req.(*TLHelpSaveAppLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelp_HelpGetInviteText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetInviteText)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServer).HelpGetInviteText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCHelp_HelpGetInviteText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServer).HelpGetInviteText(ctx, req.(*TLHelpGetInviteText))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelp_HelpGetSupport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetSupport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServer).HelpGetSupport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCHelp_HelpGetSupport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServer).HelpGetSupport(ctx, req.(*TLHelpGetSupport))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelp_HelpGetAppChangelog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetAppChangelog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServer).HelpGetAppChangelog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCHelp_HelpGetAppChangelog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServer).HelpGetAppChangelog(ctx, req.(*TLHelpGetAppChangelog))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelp_HelpGetTermsOfService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetTermsOfService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServer).HelpGetTermsOfService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCHelp_HelpGetTermsOfService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServer).HelpGetTermsOfService(ctx, req.(*TLHelpGetTermsOfService))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelp_HelpSetBotUpdatesStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpSetBotUpdatesStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServer).HelpSetBotUpdatesStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCHelp_HelpSetBotUpdatesStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServer).HelpSetBotUpdatesStatus(ctx, req.(*TLHelpSetBotUpdatesStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelp_HelpGetCdnConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetCdnConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServer).HelpGetCdnConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCHelp_HelpGetCdnConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServer).HelpGetCdnConfig(ctx, req.(*TLHelpGetCdnConfig))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCHelp_ServiceDesc is the grpc.ServiceDesc for RPCHelp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCHelp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCHelp",
	HandlerType: (*RPCHelpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "help_getConfig",
			Handler:    _RPCHelp_HelpGetConfig_Handler,
		},
		{
			MethodName: "help_getNearestDc",
			Handler:    _RPCHelp_HelpGetNearestDc_Handler,
		},
		{
			MethodName: "help_getAppUpdate",
			Handler:    _RPCHelp_HelpGetAppUpdate_Handler,
		},
		{
			MethodName: "help_saveAppLog",
			Handler:    _RPCHelp_HelpSaveAppLog_Handler,
		},
		{
			MethodName: "help_getInviteText",
			Handler:    _RPCHelp_HelpGetInviteText_Handler,
		},
		{
			MethodName: "help_getSupport",
			Handler:    _RPCHelp_HelpGetSupport_Handler,
		},
		{
			MethodName: "help_getAppChangelog",
			Handler:    _RPCHelp_HelpGetAppChangelog_Handler,
		},
		{
			MethodName: "help_getTermsOfService",
			Handler:    _RPCHelp_HelpGetTermsOfService_Handler,
		},
		{
			MethodName: "help_setBotUpdatesStatus",
			Handler:    _RPCHelp_HelpSetBotUpdatesStatus_Handler,
		},
		{
			MethodName: "help_getCdnConfig",
			Handler:    _RPCHelp_HelpGetCdnConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCChannels_ChannelsReadHistory_FullMethodName              = "/mtproto.RPCChannels/channels_readHistory"
	RPCChannels_ChannelsDeleteMessages_FullMethodName           = "/mtproto.RPCChannels/channels_deleteMessages"
	RPCChannels_ChannelsDeleteUserHistory_FullMethodName        = "/mtproto.RPCChannels/channels_deleteUserHistory"
	RPCChannels_ChannelsReportSpam_FullMethodName               = "/mtproto.RPCChannels/channels_reportSpam"
	RPCChannels_ChannelsGetMessages_FullMethodName              = "/mtproto.RPCChannels/channels_getMessages"
	RPCChannels_ChannelsGetParticipants_FullMethodName          = "/mtproto.RPCChannels/channels_getParticipants"
	RPCChannels_ChannelsGetParticipant_FullMethodName           = "/mtproto.RPCChannels/channels_getParticipant"
	RPCChannels_ChannelsGetChannels_FullMethodName              = "/mtproto.RPCChannels/channels_getChannels"
	RPCChannels_ChannelsGetFullChannel_FullMethodName           = "/mtproto.RPCChannels/channels_getFullChannel"
	RPCChannels_ChannelsCreateChannel_FullMethodName            = "/mtproto.RPCChannels/channels_createChannel"
	RPCChannels_ChannelsEditAbout_FullMethodName                = "/mtproto.RPCChannels/channels_editAbout"
	RPCChannels_ChannelsEditAdmin_FullMethodName                = "/mtproto.RPCChannels/channels_editAdmin"
	RPCChannels_ChannelsEditTitle_FullMethodName                = "/mtproto.RPCChannels/channels_editTitle"
	RPCChannels_ChannelsEditPhoto_FullMethodName                = "/mtproto.RPCChannels/channels_editPhoto"
	RPCChannels_ChannelsCheckUsername_FullMethodName            = "/mtproto.RPCChannels/channels_checkUsername"
	RPCChannels_ChannelsUpdateUsername_FullMethodName           = "/mtproto.RPCChannels/channels_updateUsername"
	RPCChannels_ChannelsJoinChannel_FullMethodName              = "/mtproto.RPCChannels/channels_joinChannel"
	RPCChannels_ChannelsLeaveChannel_FullMethodName             = "/mtproto.RPCChannels/channels_leaveChannel"
	RPCChannels_ChannelsInviteToChannel_FullMethodName          = "/mtproto.RPCChannels/channels_inviteToChannel"
	RPCChannels_ChannelsExportInvite_FullMethodName             = "/mtproto.RPCChannels/channels_exportInvite"
	RPCChannels_ChannelsDeleteChannel_FullMethodName            = "/mtproto.RPCChannels/channels_deleteChannel"
	RPCChannels_ChannelsToggleInvites_FullMethodName            = "/mtproto.RPCChannels/channels_toggleInvites"
	RPCChannels_ChannelsExportMessageLink_FullMethodName        = "/mtproto.RPCChannels/channels_exportMessageLink"
	RPCChannels_ChannelsToggleSignatures_FullMethodName         = "/mtproto.RPCChannels/channels_toggleSignatures"
	RPCChannels_ChannelsUpdatePinnedMessage_FullMethodName      = "/mtproto.RPCChannels/channels_updatePinnedMessage"
	RPCChannels_ChannelsGetAdminedPublicChannels_FullMethodName = "/mtproto.RPCChannels/channels_getAdminedPublicChannels"
	RPCChannels_ChannelsEditBanned_FullMethodName               = "/mtproto.RPCChannels/channels_editBanned"
	RPCChannels_ChannelsGetAdminLog_FullMethodName              = "/mtproto.RPCChannels/channels_getAdminLog"
	RPCChannels_ChannelsSetStickers_FullMethodName              = "/mtproto.RPCChannels/channels_setStickers"
	RPCChannels_ChannelsReadMessageContents_FullMethodName      = "/mtproto.RPCChannels/channels_readMessageContents"
)

// RPCChannelsClient is the client API for RPCChannels service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCChannelsClient interface {
	// channels.readHistory#cc104937 channel:InputChannel max_id:int = Bool;
	ChannelsReadHistory(ctx context.Context, in *TLChannelsReadHistory, opts ...grpc.CallOption) (*Bool, error)
	// channels.deleteMessages#84c1fd4e channel:InputChannel id:Vector<int> = messages.AffectedMessages;
	ChannelsDeleteMessages(ctx context.Context, in *TLChannelsDeleteMessages, opts ...grpc.CallOption) (*Messages_AffectedMessages, error)
	// channels.deleteUserHistory#d10dd71b channel:InputChannel user_id:InputUser = messages.AffectedHistory;
	ChannelsDeleteUserHistory(ctx context.Context, in *TLChannelsDeleteUserHistory, opts ...grpc.CallOption) (*Messages_AffectedHistory, error)
	// channels.reportSpam#fe087810 channel:InputChannel user_id:InputUser id:Vector<int> = Bool;
	ChannelsReportSpam(ctx context.Context, in *TLChannelsReportSpam, opts ...grpc.CallOption) (*Bool, error)
	// channels.getMessages#93d7b347 channel:InputChannel id:Vector<int> = messages.Messages;
	ChannelsGetMessages(ctx context.Context, in *TLChannelsGetMessages, opts ...grpc.CallOption) (*Messages_Messages, error)
	// channels.getParticipants#24d98f92 channel:InputChannel filter:ChannelParticipantsFilter offset:int limit:int = channels.ChannelParticipants;
	ChannelsGetParticipants(ctx context.Context, in *TLChannelsGetParticipants, opts ...grpc.CallOption) (*Channels_ChannelParticipants, error)
	// channels.getParticipant#546dd7a6 channel:InputChannel user_id:InputUser = channels.ChannelParticipant;
	ChannelsGetParticipant(ctx context.Context, in *TLChannelsGetParticipant, opts ...grpc.CallOption) (*Channels_ChannelParticipant, error)
	// channels.getChannels#a7f6bbb id:Vector<InputChannel> = messages.Chats;
	ChannelsGetChannels(ctx context.Context, in *TLChannelsGetChannels, opts ...grpc.CallOption) (*Messages_Chats, error)
	// channels.getFullChannel#8736a09 channel:InputChannel = messages.ChatFull;
	ChannelsGetFullChannel(ctx context.Context, in *TLChannelsGetFullChannel, opts ...grpc.CallOption) (*Messages_ChatFull, error)
	// channels.createChannel#f4893d7f flags:# broadcast:flags.0?true megagroup:flags.1?true title:string about:string = Updates;
	ChannelsCreateChannel(ctx context.Context, in *TLChannelsCreateChannel, opts ...grpc.CallOption) (*Updates, error)
	// channels.editAbout#13e27f1e channel:InputChannel about:string = Bool;
	ChannelsEditAbout(ctx context.Context, in *TLChannelsEditAbout, opts ...grpc.CallOption) (*Bool, error)
	// channels.editAdmin#20b88214 channel:InputChannel user_id:InputUser admin_rights:ChannelAdminRights = Updates;
	ChannelsEditAdmin(ctx context.Context, in *TLChannelsEditAdmin, opts ...grpc.CallOption) (*Updates, error)
	// channels.editTitle#566decd0 channel:InputChannel title:string = Updates;
	ChannelsEditTitle(ctx context.Context, in *TLChannelsEditTitle, opts ...grpc.CallOption) (*Updates, error)
	// channels.editPhoto#f12e57c9 channel:InputChannel photo:InputChatPhoto = Updates;
	ChannelsEditPhoto(ctx context.Context, in *TLChannelsEditPhoto, opts ...grpc.CallOption) (*Updates, error)
	// channels.checkUsername#10e6bd2c channel:InputChannel username:string = Bool;
	ChannelsCheckUsername(ctx context.Context, in *TLChannelsCheckUsername, opts ...grpc.CallOption) (*Bool, error)
	// channels.updateUsername#3514b3de channel:InputChannel username:string = Bool;
	ChannelsUpdateUsername(ctx context.Context, in *TLChannelsUpdateUsername, opts ...grpc.CallOption) (*Bool, error)
	// channels.joinChannel#24b524c5 channel:InputChannel = Updates;
	ChannelsJoinChannel(ctx context.Context, in *TLChannelsJoinChannel, opts ...grpc.CallOption) (*Updates, error)
	// channels.leaveChannel#f836aa95 channel:InputChannel = Updates;
	ChannelsLeaveChannel(ctx context.Context, in *TLChannelsLeaveChannel, opts ...grpc.CallOption) (*Updates, error)
	// channels.inviteToChannel#199f3a6c channel:InputChannel users:Vector<InputUser> = Updates;
	ChannelsInviteToChannel(ctx context.Context, in *TLChannelsInviteToChannel, opts ...grpc.CallOption) (*Updates, error)
	// channels.exportInvite#c7560885 channel:InputChannel = ExportedChatInvite;
	ChannelsExportInvite(ctx context.Context, in *TLChannelsExportInvite, opts ...grpc.CallOption) (*ExportedChatInvite, error)
	// channels.deleteChannel#c0111fe3 channel:InputChannel = Updates;
	ChannelsDeleteChannel(ctx context.Context, in *TLChannelsDeleteChannel, opts ...grpc.CallOption) (*Updates, error)
	// channels.toggleInvites#49609307 channel:InputChannel enabled:Bool = Updates;
	ChannelsToggleInvites(ctx context.Context, in *TLChannelsToggleInvites, opts ...grpc.CallOption) (*Updates, error)
	// channels.exportMessageLink#c846d22d channel:InputChannel id:int = ExportedMessageLink;
	ChannelsExportMessageLink(ctx context.Context, in *TLChannelsExportMessageLink, opts ...grpc.CallOption) (*ExportedMessageLink, error)
	// channels.toggleSignatures#1f69b606 channel:InputChannel enabled:Bool = Updates;
	ChannelsToggleSignatures(ctx context.Context, in *TLChannelsToggleSignatures, opts ...grpc.CallOption) (*Updates, error)
	// channels.updatePinnedMessage#a72ded52 flags:# silent:flags.0?true channel:InputChannel id:int = Updates;
	ChannelsUpdatePinnedMessage(ctx context.Context, in *TLChannelsUpdatePinnedMessage, opts ...grpc.CallOption) (*Updates, error)
	// channels.getAdminedPublicChannels#8d8d82d7 = messages.Chats;
	ChannelsGetAdminedPublicChannels(ctx context.Context, in *TLChannelsGetAdminedPublicChannels, opts ...grpc.CallOption) (*Messages_Chats, error)
	// channels.editBanned#bfd915cd channel:InputChannel user_id:InputUser banned_rights:ChannelBannedRights = Updates;
	ChannelsEditBanned(ctx context.Context, in *TLChannelsEditBanned, opts ...grpc.CallOption) (*Updates, error)
	// channels.getAdminLog#33ddf480 flags:# channel:InputChannel q:string events_filter:flags.0?ChannelAdminLogEventsFilter admins:flags.1?Vector<InputUser> max_id:long min_id:long limit:int = channels.AdminLogResults;
	ChannelsGetAdminLog(ctx context.Context, in *TLChannelsGetAdminLog, opts ...grpc.CallOption) (*Channels_AdminLogResults, error)
	// channels.setStickers#ea8ca4f9 channel:InputChannel stickerset:InputStickerSet = Bool;
	ChannelsSetStickers(ctx context.Context, in *TLChannelsSetStickers, opts ...grpc.CallOption) (*Bool, error)
	// channels.readMessageContents#eab5dc38 channel:InputChannel id:Vector<int> = Bool;
	ChannelsReadMessageContents(ctx context.Context, in *TLChannelsReadMessageContents, opts ...grpc.CallOption) (*Bool, error)
}

type rPCChannelsClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCChannelsClient(cc grpc.ClientConnInterface) RPCChannelsClient {
	return &rPCChannelsClient{cc}
}

func (c *rPCChannelsClient) ChannelsReadHistory(ctx context.Context, in *TLChannelsReadHistory, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsReadHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsDeleteMessages(ctx context.Context, in *TLChannelsDeleteMessages, opts ...grpc.CallOption) (*Messages_AffectedMessages, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_AffectedMessages)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsDeleteMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsDeleteUserHistory(ctx context.Context, in *TLChannelsDeleteUserHistory, opts ...grpc.CallOption) (*Messages_AffectedHistory, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_AffectedHistory)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsDeleteUserHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsReportSpam(ctx context.Context, in *TLChannelsReportSpam, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsReportSpam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsGetMessages(ctx context.Context, in *TLChannelsGetMessages, opts ...grpc.CallOption) (*Messages_Messages, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsGetMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsGetParticipants(ctx context.Context, in *TLChannelsGetParticipants, opts ...grpc.CallOption) (*Channels_ChannelParticipants, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Channels_ChannelParticipants)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsGetParticipants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsGetParticipant(ctx context.Context, in *TLChannelsGetParticipant, opts ...grpc.CallOption) (*Channels_ChannelParticipant, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Channels_ChannelParticipant)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsGetParticipant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsGetChannels(ctx context.Context, in *TLChannelsGetChannels, opts ...grpc.CallOption) (*Messages_Chats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_Chats)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsGetChannels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsGetFullChannel(ctx context.Context, in *TLChannelsGetFullChannel, opts ...grpc.CallOption) (*Messages_ChatFull, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_ChatFull)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsGetFullChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsCreateChannel(ctx context.Context, in *TLChannelsCreateChannel, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsCreateChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsEditAbout(ctx context.Context, in *TLChannelsEditAbout, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsEditAbout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsEditAdmin(ctx context.Context, in *TLChannelsEditAdmin, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsEditAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsEditTitle(ctx context.Context, in *TLChannelsEditTitle, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsEditTitle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsEditPhoto(ctx context.Context, in *TLChannelsEditPhoto, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsEditPhoto_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsCheckUsername(ctx context.Context, in *TLChannelsCheckUsername, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsCheckUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsUpdateUsername(ctx context.Context, in *TLChannelsUpdateUsername, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsUpdateUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsJoinChannel(ctx context.Context, in *TLChannelsJoinChannel, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsJoinChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsLeaveChannel(ctx context.Context, in *TLChannelsLeaveChannel, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsLeaveChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsInviteToChannel(ctx context.Context, in *TLChannelsInviteToChannel, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsInviteToChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsExportInvite(ctx context.Context, in *TLChannelsExportInvite, opts ...grpc.CallOption) (*ExportedChatInvite, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportedChatInvite)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsExportInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsDeleteChannel(ctx context.Context, in *TLChannelsDeleteChannel, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsDeleteChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsToggleInvites(ctx context.Context, in *TLChannelsToggleInvites, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsToggleInvites_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsExportMessageLink(ctx context.Context, in *TLChannelsExportMessageLink, opts ...grpc.CallOption) (*ExportedMessageLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportedMessageLink)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsExportMessageLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsToggleSignatures(ctx context.Context, in *TLChannelsToggleSignatures, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsToggleSignatures_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsUpdatePinnedMessage(ctx context.Context, in *TLChannelsUpdatePinnedMessage, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsUpdatePinnedMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsGetAdminedPublicChannels(ctx context.Context, in *TLChannelsGetAdminedPublicChannels, opts ...grpc.CallOption) (*Messages_Chats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages_Chats)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsGetAdminedPublicChannels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsEditBanned(ctx context.Context, in *TLChannelsEditBanned, opts ...grpc.CallOption) (*Updates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsEditBanned_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsGetAdminLog(ctx context.Context, in *TLChannelsGetAdminLog, opts ...grpc.CallOption) (*Channels_AdminLogResults, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Channels_AdminLogResults)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsGetAdminLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsSetStickers(ctx context.Context, in *TLChannelsSetStickers, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsSetStickers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsReadMessageContents(ctx context.Context, in *TLChannelsReadMessageContents, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCChannels_ChannelsReadMessageContents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCChannelsServer is the server API for RPCChannels service.
// All implementations must embed UnimplementedRPCChannelsServer
// for forward compatibility.
type RPCChannelsServer interface {
	// channels.readHistory#cc104937 channel:InputChannel max_id:int = Bool;
	ChannelsReadHistory(context.Context, *TLChannelsReadHistory) (*Bool, error)
	// channels.deleteMessages#84c1fd4e channel:InputChannel id:Vector<int> = messages.AffectedMessages;
	ChannelsDeleteMessages(context.Context, *TLChannelsDeleteMessages) (*Messages_AffectedMessages, error)
	// channels.deleteUserHistory#d10dd71b channel:InputChannel user_id:InputUser = messages.AffectedHistory;
	ChannelsDeleteUserHistory(context.Context, *TLChannelsDeleteUserHistory) (*Messages_AffectedHistory, error)
	// channels.reportSpam#fe087810 channel:InputChannel user_id:InputUser id:Vector<int> = Bool;
	ChannelsReportSpam(context.Context, *TLChannelsReportSpam) (*Bool, error)
	// channels.getMessages#93d7b347 channel:InputChannel id:Vector<int> = messages.Messages;
	ChannelsGetMessages(context.Context, *TLChannelsGetMessages) (*Messages_Messages, error)
	// channels.getParticipants#24d98f92 channel:InputChannel filter:ChannelParticipantsFilter offset:int limit:int = channels.ChannelParticipants;
	ChannelsGetParticipants(context.Context, *TLChannelsGetParticipants) (*Channels_ChannelParticipants, error)
	// channels.getParticipant#546dd7a6 channel:InputChannel user_id:InputUser = channels.ChannelParticipant;
	ChannelsGetParticipant(context.Context, *TLChannelsGetParticipant) (*Channels_ChannelParticipant, error)
	// channels.getChannels#a7f6bbb id:Vector<InputChannel> = messages.Chats;
	ChannelsGetChannels(context.Context, *TLChannelsGetChannels) (*Messages_Chats, error)
	// channels.getFullChannel#8736a09 channel:InputChannel = messages.ChatFull;
	ChannelsGetFullChannel(context.Context, *TLChannelsGetFullChannel) (*Messages_ChatFull, error)
	// channels.createChannel#f4893d7f flags:# broadcast:flags.0?true megagroup:flags.1?true title:string about:string = Updates;
	ChannelsCreateChannel(context.Context, *TLChannelsCreateChannel) (*Updates, error)
	// channels.editAbout#13e27f1e channel:InputChannel about:string = Bool;
	ChannelsEditAbout(context.Context, *TLChannelsEditAbout) (*Bool, error)
	// channels.editAdmin#20b88214 channel:InputChannel user_id:InputUser admin_rights:ChannelAdminRights = Updates;
	ChannelsEditAdmin(context.Context, *TLChannelsEditAdmin) (*Updates, error)
	// channels.editTitle#566decd0 channel:InputChannel title:string = Updates;
	ChannelsEditTitle(context.Context, *TLChannelsEditTitle) (*Updates, error)
	// channels.editPhoto#f12e57c9 channel:InputChannel photo:InputChatPhoto = Updates;
	ChannelsEditPhoto(context.Context, *TLChannelsEditPhoto) (*Updates, error)
	// channels.checkUsername#10e6bd2c channel:InputChannel username:string = Bool;
	ChannelsCheckUsername(context.Context, *TLChannelsCheckUsername) (*Bool, error)
	// channels.updateUsername#3514b3de channel:InputChannel username:string = Bool;
	ChannelsUpdateUsername(context.Context, *TLChannelsUpdateUsername) (*Bool, error)
	// channels.joinChannel#24b524c5 channel:InputChannel = Updates;
	ChannelsJoinChannel(context.Context, *TLChannelsJoinChannel) (*Updates, error)
	// channels.leaveChannel#f836aa95 channel:InputChannel = Updates;
	ChannelsLeaveChannel(context.Context, *TLChannelsLeaveChannel) (*Updates, error)
	// channels.inviteToChannel#199f3a6c channel:InputChannel users:Vector<InputUser> = Updates;
	ChannelsInviteToChannel(context.Context, *TLChannelsInviteToChannel) (*Updates, error)
	// channels.exportInvite#c7560885 channel:InputChannel = ExportedChatInvite;
	ChannelsExportInvite(context.Context, *TLChannelsExportInvite) (*ExportedChatInvite, error)
	// channels.deleteChannel#c0111fe3 channel:InputChannel = Updates;
	ChannelsDeleteChannel(context.Context, *TLChannelsDeleteChannel) (*Updates, error)
	// channels.toggleInvites#49609307 channel:InputChannel enabled:Bool = Updates;
	ChannelsToggleInvites(context.Context, *TLChannelsToggleInvites) (*Updates, error)
	// channels.exportMessageLink#c846d22d channel:InputChannel id:int = ExportedMessageLink;
	ChannelsExportMessageLink(context.Context, *TLChannelsExportMessageLink) (*ExportedMessageLink, error)
	// channels.toggleSignatures#1f69b606 channel:InputChannel enabled:Bool = Updates;
	ChannelsToggleSignatures(context.Context, *TLChannelsToggleSignatures) (*Updates, error)
	// channels.updatePinnedMessage#a72ded52 flags:# silent:flags.0?true channel:InputChannel id:int = Updates;
	ChannelsUpdatePinnedMessage(context.Context, *TLChannelsUpdatePinnedMessage) (*Updates, error)
	// channels.getAdminedPublicChannels#8d8d82d7 = messages.Chats;
	ChannelsGetAdminedPublicChannels(context.Context, *TLChannelsGetAdminedPublicChannels) (*Messages_Chats, error)
	// channels.editBanned#bfd915cd channel:InputChannel user_id:InputUser banned_rights:ChannelBannedRights = Updates;
	ChannelsEditBanned(context.Context, *TLChannelsEditBanned) (*Updates, error)
	// channels.getAdminLog#33ddf480 flags:# channel:InputChannel q:string events_filter:flags.0?ChannelAdminLogEventsFilter admins:flags.1?Vector<InputUser> max_id:long min_id:long limit:int = channels.AdminLogResults;
	ChannelsGetAdminLog(context.Context, *TLChannelsGetAdminLog) (*Channels_AdminLogResults, error)
	// channels.setStickers#ea8ca4f9 channel:InputChannel stickerset:InputStickerSet = Bool;
	ChannelsSetStickers(context.Context, *TLChannelsSetStickers) (*Bool, error)
	// channels.readMessageContents#eab5dc38 channel:InputChannel id:Vector<int> = Bool;
	ChannelsReadMessageContents(context.Context, *TLChannelsReadMessageContents) (*Bool, error)
	mustEmbedUnimplementedRPCChannelsServer()
}

// UnimplementedRPCChannelsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCChannelsServer struct{}

func (UnimplementedRPCChannelsServer) ChannelsReadHistory(context.Context, *TLChannelsReadHistory) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsReadHistory not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsDeleteMessages(context.Context, *TLChannelsDeleteMessages) (*Messages_AffectedMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsDeleteMessages not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsDeleteUserHistory(context.Context, *TLChannelsDeleteUserHistory) (*Messages_AffectedHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsDeleteUserHistory not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsReportSpam(context.Context, *TLChannelsReportSpam) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsReportSpam not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsGetMessages(context.Context, *TLChannelsGetMessages) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetMessages not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsGetParticipants(context.Context, *TLChannelsGetParticipants) (*Channels_ChannelParticipants, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetParticipants not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsGetParticipant(context.Context, *TLChannelsGetParticipant) (*Channels_ChannelParticipant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetParticipant not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsGetChannels(context.Context, *TLChannelsGetChannels) (*Messages_Chats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetChannels not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsGetFullChannel(context.Context, *TLChannelsGetFullChannel) (*Messages_ChatFull, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetFullChannel not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsCreateChannel(context.Context, *TLChannelsCreateChannel) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsCreateChannel not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsEditAbout(context.Context, *TLChannelsEditAbout) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsEditAbout not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsEditAdmin(context.Context, *TLChannelsEditAdmin) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsEditAdmin not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsEditTitle(context.Context, *TLChannelsEditTitle) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsEditTitle not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsEditPhoto(context.Context, *TLChannelsEditPhoto) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsEditPhoto not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsCheckUsername(context.Context, *TLChannelsCheckUsername) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsCheckUsername not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsUpdateUsername(context.Context, *TLChannelsUpdateUsername) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsUpdateUsername not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsJoinChannel(context.Context, *TLChannelsJoinChannel) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsJoinChannel not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsLeaveChannel(context.Context, *TLChannelsLeaveChannel) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsLeaveChannel not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsInviteToChannel(context.Context, *TLChannelsInviteToChannel) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsInviteToChannel not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsExportInvite(context.Context, *TLChannelsExportInvite) (*ExportedChatInvite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsExportInvite not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsDeleteChannel(context.Context, *TLChannelsDeleteChannel) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsDeleteChannel not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsToggleInvites(context.Context, *TLChannelsToggleInvites) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsToggleInvites not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsExportMessageLink(context.Context, *TLChannelsExportMessageLink) (*ExportedMessageLink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsExportMessageLink not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsToggleSignatures(context.Context, *TLChannelsToggleSignatures) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsToggleSignatures not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsUpdatePinnedMessage(context.Context, *TLChannelsUpdatePinnedMessage) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsUpdatePinnedMessage not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsGetAdminedPublicChannels(context.Context, *TLChannelsGetAdminedPublicChannels) (*Messages_Chats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetAdminedPublicChannels not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsEditBanned(context.Context, *TLChannelsEditBanned) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsEditBanned not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsGetAdminLog(context.Context, *TLChannelsGetAdminLog) (*Channels_AdminLogResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetAdminLog not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsSetStickers(context.Context, *TLChannelsSetStickers) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsSetStickers not implemented")
}
func (UnimplementedRPCChannelsServer) ChannelsReadMessageContents(context.Context, *TLChannelsReadMessageContents) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsReadMessageContents not implemented")
}
func (UnimplementedRPCChannelsServer) mustEmbedUnimplementedRPCChannelsServer() {}
func (UnimplementedRPCChannelsServer) testEmbeddedByValue()                     {}

// UnsafeRPCChannelsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCChannelsServer will
// result in compilation errors.
type UnsafeRPCChannelsServer interface {
	mustEmbedUnimplementedRPCChannelsServer()
}

func RegisterRPCChannelsServer(s grpc.ServiceRegistrar, srv RPCChannelsServer) {
	// If the following call pancis, it indicates UnimplementedRPCChannelsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCChannels_ServiceDesc, srv)
}

func _RPCChannels_ChannelsReadHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsReadHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsReadHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsReadHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsReadHistory(ctx, req.(*TLChannelsReadHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsDeleteMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsDeleteMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsDeleteMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsDeleteMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsDeleteMessages(ctx, req.(*TLChannelsDeleteMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsDeleteUserHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsDeleteUserHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsDeleteUserHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsDeleteUserHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsDeleteUserHistory(ctx, req.(*TLChannelsDeleteUserHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsReportSpam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsReportSpam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsReportSpam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsReportSpam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsReportSpam(ctx, req.(*TLChannelsReportSpam))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsGetMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsGetMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsGetMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsGetMessages(ctx, req.(*TLChannelsGetMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsGetParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetParticipants)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsGetParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsGetParticipants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsGetParticipants(ctx, req.(*TLChannelsGetParticipants))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsGetParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetParticipant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsGetParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsGetParticipant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsGetParticipant(ctx, req.(*TLChannelsGetParticipant))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsGetChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetChannels)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsGetChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsGetChannels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsGetChannels(ctx, req.(*TLChannelsGetChannels))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsGetFullChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetFullChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsGetFullChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsGetFullChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsGetFullChannel(ctx, req.(*TLChannelsGetFullChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsCreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsCreateChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsCreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsCreateChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsCreateChannel(ctx, req.(*TLChannelsCreateChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsEditAbout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsEditAbout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsEditAbout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsEditAbout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsEditAbout(ctx, req.(*TLChannelsEditAbout))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsEditAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsEditAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsEditAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsEditAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsEditAdmin(ctx, req.(*TLChannelsEditAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsEditTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsEditTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsEditTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsEditTitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsEditTitle(ctx, req.(*TLChannelsEditTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsEditPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsEditPhoto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsEditPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsEditPhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsEditPhoto(ctx, req.(*TLChannelsEditPhoto))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsCheckUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsCheckUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsCheckUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsCheckUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsCheckUsername(ctx, req.(*TLChannelsCheckUsername))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsUpdateUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsUpdateUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsUpdateUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsUpdateUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsUpdateUsername(ctx, req.(*TLChannelsUpdateUsername))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsJoinChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsJoinChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsJoinChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsJoinChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsJoinChannel(ctx, req.(*TLChannelsJoinChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsLeaveChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsLeaveChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsLeaveChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsLeaveChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsLeaveChannel(ctx, req.(*TLChannelsLeaveChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsInviteToChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsInviteToChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsInviteToChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsInviteToChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsInviteToChannel(ctx, req.(*TLChannelsInviteToChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsExportInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsExportInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsExportInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsExportInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsExportInvite(ctx, req.(*TLChannelsExportInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsDeleteChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsDeleteChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsDeleteChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsDeleteChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsDeleteChannel(ctx, req.(*TLChannelsDeleteChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsToggleInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsToggleInvites)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsToggleInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsToggleInvites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsToggleInvites(ctx, req.(*TLChannelsToggleInvites))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsExportMessageLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsExportMessageLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsExportMessageLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsExportMessageLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsExportMessageLink(ctx, req.(*TLChannelsExportMessageLink))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsToggleSignatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsToggleSignatures)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsToggleSignatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsToggleSignatures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsToggleSignatures(ctx, req.(*TLChannelsToggleSignatures))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsUpdatePinnedMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsUpdatePinnedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsUpdatePinnedMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsUpdatePinnedMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsUpdatePinnedMessage(ctx, req.(*TLChannelsUpdatePinnedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsGetAdminedPublicChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetAdminedPublicChannels)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsGetAdminedPublicChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsGetAdminedPublicChannels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsGetAdminedPublicChannels(ctx, req.(*TLChannelsGetAdminedPublicChannels))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsEditBanned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsEditBanned)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsEditBanned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsEditBanned_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsEditBanned(ctx, req.(*TLChannelsEditBanned))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsGetAdminLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetAdminLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsGetAdminLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsGetAdminLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsGetAdminLog(ctx, req.(*TLChannelsGetAdminLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsSetStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsSetStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsSetStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsSetStickers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsSetStickers(ctx, req.(*TLChannelsSetStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsReadMessageContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsReadMessageContents)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsReadMessageContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChannels_ChannelsReadMessageContents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsReadMessageContents(ctx, req.(*TLChannelsReadMessageContents))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCChannels_ServiceDesc is the grpc.ServiceDesc for RPCChannels service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCChannels_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCChannels",
	HandlerType: (*RPCChannelsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "channels_readHistory",
			Handler:    _RPCChannels_ChannelsReadHistory_Handler,
		},
		{
			MethodName: "channels_deleteMessages",
			Handler:    _RPCChannels_ChannelsDeleteMessages_Handler,
		},
		{
			MethodName: "channels_deleteUserHistory",
			Handler:    _RPCChannels_ChannelsDeleteUserHistory_Handler,
		},
		{
			MethodName: "channels_reportSpam",
			Handler:    _RPCChannels_ChannelsReportSpam_Handler,
		},
		{
			MethodName: "channels_getMessages",
			Handler:    _RPCChannels_ChannelsGetMessages_Handler,
		},
		{
			MethodName: "channels_getParticipants",
			Handler:    _RPCChannels_ChannelsGetParticipants_Handler,
		},
		{
			MethodName: "channels_getParticipant",
			Handler:    _RPCChannels_ChannelsGetParticipant_Handler,
		},
		{
			MethodName: "channels_getChannels",
			Handler:    _RPCChannels_ChannelsGetChannels_Handler,
		},
		{
			MethodName: "channels_getFullChannel",
			Handler:    _RPCChannels_ChannelsGetFullChannel_Handler,
		},
		{
			MethodName: "channels_createChannel",
			Handler:    _RPCChannels_ChannelsCreateChannel_Handler,
		},
		{
			MethodName: "channels_editAbout",
			Handler:    _RPCChannels_ChannelsEditAbout_Handler,
		},
		{
			MethodName: "channels_editAdmin",
			Handler:    _RPCChannels_ChannelsEditAdmin_Handler,
		},
		{
			MethodName: "channels_editTitle",
			Handler:    _RPCChannels_ChannelsEditTitle_Handler,
		},
		{
			MethodName: "channels_editPhoto",
			Handler:    _RPCChannels_ChannelsEditPhoto_Handler,
		},
		{
			MethodName: "channels_checkUsername",
			Handler:    _RPCChannels_ChannelsCheckUsername_Handler,
		},
		{
			MethodName: "channels_updateUsername",
			Handler:    _RPCChannels_ChannelsUpdateUsername_Handler,
		},
		{
			MethodName: "channels_joinChannel",
			Handler:    _RPCChannels_ChannelsJoinChannel_Handler,
		},
		{
			MethodName: "channels_leaveChannel",
			Handler:    _RPCChannels_ChannelsLeaveChannel_Handler,
		},
		{
			MethodName: "channels_inviteToChannel",
			Handler:    _RPCChannels_ChannelsInviteToChannel_Handler,
		},
		{
			MethodName: "channels_exportInvite",
			Handler:    _RPCChannels_ChannelsExportInvite_Handler,
		},
		{
			MethodName: "channels_deleteChannel",
			Handler:    _RPCChannels_ChannelsDeleteChannel_Handler,
		},
		{
			MethodName: "channels_toggleInvites",
			Handler:    _RPCChannels_ChannelsToggleInvites_Handler,
		},
		{
			MethodName: "channels_exportMessageLink",
			Handler:    _RPCChannels_ChannelsExportMessageLink_Handler,
		},
		{
			MethodName: "channels_toggleSignatures",
			Handler:    _RPCChannels_ChannelsToggleSignatures_Handler,
		},
		{
			MethodName: "channels_updatePinnedMessage",
			Handler:    _RPCChannels_ChannelsUpdatePinnedMessage_Handler,
		},
		{
			MethodName: "channels_getAdminedPublicChannels",
			Handler:    _RPCChannels_ChannelsGetAdminedPublicChannels_Handler,
		},
		{
			MethodName: "channels_editBanned",
			Handler:    _RPCChannels_ChannelsEditBanned_Handler,
		},
		{
			MethodName: "channels_getAdminLog",
			Handler:    _RPCChannels_ChannelsGetAdminLog_Handler,
		},
		{
			MethodName: "channels_setStickers",
			Handler:    _RPCChannels_ChannelsSetStickers_Handler,
		},
		{
			MethodName: "channels_readMessageContents",
			Handler:    _RPCChannels_ChannelsReadMessageContents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCAccount_AccountRegisterDevice_FullMethodName         = "/mtproto.RPCAccount/account_registerDevice"
	RPCAccount_AccountUnregisterDevice_FullMethodName       = "/mtproto.RPCAccount/account_unregisterDevice"
	RPCAccount_AccountUpdateNotifySettings_FullMethodName   = "/mtproto.RPCAccount/account_updateNotifySettings"
	RPCAccount_AccountGetNotifySettings_FullMethodName      = "/mtproto.RPCAccount/account_getNotifySettings"
	RPCAccount_AccountResetNotifySettings_FullMethodName    = "/mtproto.RPCAccount/account_resetNotifySettings"
	RPCAccount_AccountUpdateProfile_FullMethodName          = "/mtproto.RPCAccount/account_updateProfile"
	RPCAccount_AccountUpdateStatus_FullMethodName           = "/mtproto.RPCAccount/account_updateStatus"
	RPCAccount_AccountGetWallPapers_FullMethodName          = "/mtproto.RPCAccount/account_getWallPapers"
	RPCAccount_AccountReportPeer_FullMethodName             = "/mtproto.RPCAccount/account_reportPeer"
	RPCAccount_AccountCheckUsername_FullMethodName          = "/mtproto.RPCAccount/account_checkUsername"
	RPCAccount_AccountUpdateUsername_FullMethodName         = "/mtproto.RPCAccount/account_updateUsername"
	RPCAccount_AccountGetPrivacy_FullMethodName             = "/mtproto.RPCAccount/account_getPrivacy"
	RPCAccount_AccountSetPrivacy_FullMethodName             = "/mtproto.RPCAccount/account_setPrivacy"
	RPCAccount_AccountDeleteAccount_FullMethodName          = "/mtproto.RPCAccount/account_deleteAccount"
	RPCAccount_AccountGetAccountTTL_FullMethodName          = "/mtproto.RPCAccount/account_getAccountTTL"
	RPCAccount_AccountSetAccountTTL_FullMethodName          = "/mtproto.RPCAccount/account_setAccountTTL"
	RPCAccount_AccountSendChangePhoneCode_FullMethodName    = "/mtproto.RPCAccount/account_sendChangePhoneCode"
	RPCAccount_AccountChangePhone_FullMethodName            = "/mtproto.RPCAccount/account_changePhone"
	RPCAccount_AccountUpdateDeviceLocked_FullMethodName     = "/mtproto.RPCAccount/account_updateDeviceLocked"
	RPCAccount_AccountGetAuthorizations_FullMethodName      = "/mtproto.RPCAccount/account_getAuthorizations"
	RPCAccount_AccountResetAuthorization_FullMethodName     = "/mtproto.RPCAccount/account_resetAuthorization"
	RPCAccount_AccountGetPassword_FullMethodName            = "/mtproto.RPCAccount/account_getPassword"
	RPCAccount_AccountGetPasswordSettings_FullMethodName    = "/mtproto.RPCAccount/account_getPasswordSettings"
	RPCAccount_AccountUpdatePasswordSettings_FullMethodName = "/mtproto.RPCAccount/account_updatePasswordSettings"
	RPCAccount_AccountSendConfirmPhoneCode_FullMethodName   = "/mtproto.RPCAccount/account_sendConfirmPhoneCode"
	RPCAccount_AccountConfirmPhone_FullMethodName           = "/mtproto.RPCAccount/account_confirmPhone"
	RPCAccount_AccountGetTmpPassword_FullMethodName         = "/mtproto.RPCAccount/account_getTmpPassword"
)

// RPCAccountClient is the client API for RPCAccount service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCAccountClient interface {
	// account.registerDevice#637ea878 token_type:int token:string = Bool;
	AccountRegisterDevice(ctx context.Context, in *TLAccountRegisterDevice, opts ...grpc.CallOption) (*Bool, error)
	// account.unregisterDevice#65c55b40 token_type:int token:string = Bool;
	AccountUnregisterDevice(ctx context.Context, in *TLAccountUnregisterDevice, opts ...grpc.CallOption) (*Bool, error)
	// account.updateNotifySettings#84be5b93 peer:InputNotifyPeer settings:InputPeerNotifySettings = Bool;
	AccountUpdateNotifySettings(ctx context.Context, in *TLAccountUpdateNotifySettings, opts ...grpc.CallOption) (*Bool, error)
	// account.getNotifySettings#12b3ad31 peer:InputNotifyPeer = PeerNotifySettings;
	AccountGetNotifySettings(ctx context.Context, in *TLAccountGetNotifySettings, opts ...grpc.CallOption) (*PeerNotifySettings, error)
	// account.resetNotifySettings#db7e1747 = Bool;
	AccountResetNotifySettings(ctx context.Context, in *TLAccountResetNotifySettings, opts ...grpc.CallOption) (*Bool, error)
	// account.updateProfile#78515775 flags:# first_name:flags.0?string last_name:flags.1?string about:flags.2?string = User;
	AccountUpdateProfile(ctx context.Context, in *TLAccountUpdateProfile, opts ...grpc.CallOption) (*User, error)
	// account.updateStatus#6628562c offline:Bool = Bool;
	AccountUpdateStatus(ctx context.Context, in *TLAccountUpdateStatus, opts ...grpc.CallOption) (*Bool, error)
	// account.getWallPapers#c04cfac2 = Vector<WallPaper>;
	AccountGetWallPapers(ctx context.Context, in *TLAccountGetWallPapers, opts ...grpc.CallOption) (*Vector_WallPaper, error)
	// account.reportPeer#ae189d5f peer:InputPeer reason:ReportReason = Bool;
	AccountReportPeer(ctx context.Context, in *TLAccountReportPeer, opts ...grpc.CallOption) (*Bool, error)
	// account.checkUsername#2714d86c username:string = Bool;
	AccountCheckUsername(ctx context.Context, in *TLAccountCheckUsername, opts ...grpc.CallOption) (*Bool, error)
	// account.updateUsername#3e0bdd7c username:string = User;
	AccountUpdateUsername(ctx context.Context, in *TLAccountUpdateUsername, opts ...grpc.CallOption) (*User, error)
	// account.getPrivacy#dadbc950 key:InputPrivacyKey = account.PrivacyRules;
	AccountGetPrivacy(ctx context.Context, in *TLAccountGetPrivacy, opts ...grpc.CallOption) (*Account_PrivacyRules, error)
	// account.setPrivacy#c9f81ce8 key:InputPrivacyKey rules:Vector<InputPrivacyRule> = account.PrivacyRules;
	AccountSetPrivacy(ctx context.Context, in *TLAccountSetPrivacy, opts ...grpc.CallOption) (*Account_PrivacyRules, error)
	// account.deleteAccount#418d4e0b reason:string = Bool;
	AccountDeleteAccount(ctx context.Context, in *TLAccountDeleteAccount, opts ...grpc.CallOption) (*Bool, error)
	// account.getAccountTTL#8fc711d = AccountDaysTTL;
	AccountGetAccountTTL(ctx context.Context, in *TLAccountGetAccountTTL, opts ...grpc.CallOption) (*AccountDaysTTL, error)
	// account.setAccountTTL#2442485e ttl:AccountDaysTTL = Bool;
	AccountSetAccountTTL(ctx context.Context, in *TLAccountSetAccountTTL, opts ...grpc.CallOption) (*Bool, error)
	// account.sendChangePhoneCode#8e57deb flags:# allow_flashcall:flags.0?true phone_number:string current_number:flags.0?Bool = auth.SentCode;
	AccountSendChangePhoneCode(ctx context.Context, in *TLAccountSendChangePhoneCode, opts ...grpc.CallOption) (*Auth_SentCode, error)
	// account.changePhone#70c32edb phone_number:string phone_code_hash:string phone_code:string = User;
	AccountChangePhone(ctx context.Context, in *TLAccountChangePhone, opts ...grpc.CallOption) (*User, error)
	// account.updateDeviceLocked#38df3532 period:int = Bool;
	AccountUpdateDeviceLocked(ctx context.Context, in *TLAccountUpdateDeviceLocked, opts ...grpc.CallOption) (*Bool, error)
	// account.getAuthorizations#e320c158 = account.Authorizations;
	AccountGetAuthorizations(ctx context.Context, in *TLAccountGetAuthorizations, opts ...grpc.CallOption) (*Account_Authorizations, error)
	// account.resetAuthorization#df77f3bc hash:long = Bool;
	AccountResetAuthorization(ctx context.Context, in *TLAccountResetAuthorization, opts ...grpc.CallOption) (*Bool, error)
	// account.getPassword#548a30f5 = account.Password;
	AccountGetPassword(ctx context.Context, in *TLAccountGetPassword, opts ...grpc.CallOption) (*Account_Password, error)
	// account.getPasswordSettings#bc8d11bb current_password_hash:bytes = account.PasswordSettings;
	AccountGetPasswordSettings(ctx context.Context, in *TLAccountGetPasswordSettings, opts ...grpc.CallOption) (*Account_PasswordSettings, error)
	// account.updatePasswordSettings#fa7c4b86 current_password_hash:bytes new_settings:account.PasswordInputSettings = Bool;
	AccountUpdatePasswordSettings(ctx context.Context, in *TLAccountUpdatePasswordSettings, opts ...grpc.CallOption) (*Bool, error)
	// account.sendConfirmPhoneCode#1516d7bd flags:# allow_flashcall:flags.0?true hash:string current_number:flags.0?Bool = auth.SentCode;
	AccountSendConfirmPhoneCode(ctx context.Context, in *TLAccountSendConfirmPhoneCode, opts ...grpc.CallOption) (*Auth_SentCode, error)
	// account.confirmPhone#5f2178c3 phone_code_hash:string phone_code:string = Bool;
	AccountConfirmPhone(ctx context.Context, in *TLAccountConfirmPhone, opts ...grpc.CallOption) (*Bool, error)
	// account.getTmpPassword#4a82327e password_hash:bytes period:int = account.TmpPassword;
	AccountGetTmpPassword(ctx context.Context, in *TLAccountGetTmpPassword, opts ...grpc.CallOption) (*Account_TmpPassword, error)
}

type rPCAccountClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCAccountClient(cc grpc.ClientConnInterface) RPCAccountClient {
	return &rPCAccountClient{cc}
}

func (c *rPCAccountClient) AccountRegisterDevice(ctx context.Context, in *TLAccountRegisterDevice, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCAccount_AccountRegisterDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountUnregisterDevice(ctx context.Context, in *TLAccountUnregisterDevice, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCAccount_AccountUnregisterDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountUpdateNotifySettings(ctx context.Context, in *TLAccountUpdateNotifySettings, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCAccount_AccountUpdateNotifySettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountGetNotifySettings(ctx context.Context, in *TLAccountGetNotifySettings, opts ...grpc.CallOption) (*PeerNotifySettings, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PeerNotifySettings)
	err := c.cc.Invoke(ctx, RPCAccount_AccountGetNotifySettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountResetNotifySettings(ctx context.Context, in *TLAccountResetNotifySettings, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCAccount_AccountResetNotifySettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountUpdateProfile(ctx context.Context, in *TLAccountUpdateProfile, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, RPCAccount_AccountUpdateProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountUpdateStatus(ctx context.Context, in *TLAccountUpdateStatus, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCAccount_AccountUpdateStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountGetWallPapers(ctx context.Context, in *TLAccountGetWallPapers, opts ...grpc.CallOption) (*Vector_WallPaper, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_WallPaper)
	err := c.cc.Invoke(ctx, RPCAccount_AccountGetWallPapers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountReportPeer(ctx context.Context, in *TLAccountReportPeer, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCAccount_AccountReportPeer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountCheckUsername(ctx context.Context, in *TLAccountCheckUsername, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCAccount_AccountCheckUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountUpdateUsername(ctx context.Context, in *TLAccountUpdateUsername, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, RPCAccount_AccountUpdateUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountGetPrivacy(ctx context.Context, in *TLAccountGetPrivacy, opts ...grpc.CallOption) (*Account_PrivacyRules, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account_PrivacyRules)
	err := c.cc.Invoke(ctx, RPCAccount_AccountGetPrivacy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountSetPrivacy(ctx context.Context, in *TLAccountSetPrivacy, opts ...grpc.CallOption) (*Account_PrivacyRules, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account_PrivacyRules)
	err := c.cc.Invoke(ctx, RPCAccount_AccountSetPrivacy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountDeleteAccount(ctx context.Context, in *TLAccountDeleteAccount, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCAccount_AccountDeleteAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountGetAccountTTL(ctx context.Context, in *TLAccountGetAccountTTL, opts ...grpc.CallOption) (*AccountDaysTTL, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountDaysTTL)
	err := c.cc.Invoke(ctx, RPCAccount_AccountGetAccountTTL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountSetAccountTTL(ctx context.Context, in *TLAccountSetAccountTTL, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCAccount_AccountSetAccountTTL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountSendChangePhoneCode(ctx context.Context, in *TLAccountSendChangePhoneCode, opts ...grpc.CallOption) (*Auth_SentCode, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Auth_SentCode)
	err := c.cc.Invoke(ctx, RPCAccount_AccountSendChangePhoneCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountChangePhone(ctx context.Context, in *TLAccountChangePhone, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, RPCAccount_AccountChangePhone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountUpdateDeviceLocked(ctx context.Context, in *TLAccountUpdateDeviceLocked, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCAccount_AccountUpdateDeviceLocked_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountGetAuthorizations(ctx context.Context, in *TLAccountGetAuthorizations, opts ...grpc.CallOption) (*Account_Authorizations, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account_Authorizations)
	err := c.cc.Invoke(ctx, RPCAccount_AccountGetAuthorizations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountResetAuthorization(ctx context.Context, in *TLAccountResetAuthorization, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCAccount_AccountResetAuthorization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountGetPassword(ctx context.Context, in *TLAccountGetPassword, opts ...grpc.CallOption) (*Account_Password, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account_Password)
	err := c.cc.Invoke(ctx, RPCAccount_AccountGetPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountGetPasswordSettings(ctx context.Context, in *TLAccountGetPasswordSettings, opts ...grpc.CallOption) (*Account_PasswordSettings, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account_PasswordSettings)
	err := c.cc.Invoke(ctx, RPCAccount_AccountGetPasswordSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountUpdatePasswordSettings(ctx context.Context, in *TLAccountUpdatePasswordSettings, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCAccount_AccountUpdatePasswordSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountSendConfirmPhoneCode(ctx context.Context, in *TLAccountSendConfirmPhoneCode, opts ...grpc.CallOption) (*Auth_SentCode, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Auth_SentCode)
	err := c.cc.Invoke(ctx, RPCAccount_AccountSendConfirmPhoneCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountConfirmPhone(ctx context.Context, in *TLAccountConfirmPhone, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCAccount_AccountConfirmPhone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountGetTmpPassword(ctx context.Context, in *TLAccountGetTmpPassword, opts ...grpc.CallOption) (*Account_TmpPassword, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account_TmpPassword)
	err := c.cc.Invoke(ctx, RPCAccount_AccountGetTmpPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCAccountServer is the server API for RPCAccount service.
// All implementations must embed UnimplementedRPCAccountServer
// for forward compatibility.
type RPCAccountServer interface {
	// account.registerDevice#637ea878 token_type:int token:string = Bool;
	AccountRegisterDevice(context.Context, *TLAccountRegisterDevice) (*Bool, error)
	// account.unregisterDevice#65c55b40 token_type:int token:string = Bool;
	AccountUnregisterDevice(context.Context, *TLAccountUnregisterDevice) (*Bool, error)
	// account.updateNotifySettings#84be5b93 peer:InputNotifyPeer settings:InputPeerNotifySettings = Bool;
	AccountUpdateNotifySettings(context.Context, *TLAccountUpdateNotifySettings) (*Bool, error)
	// account.getNotifySettings#12b3ad31 peer:InputNotifyPeer = PeerNotifySettings;
	AccountGetNotifySettings(context.Context, *TLAccountGetNotifySettings) (*PeerNotifySettings, error)
	// account.resetNotifySettings#db7e1747 = Bool;
	AccountResetNotifySettings(context.Context, *TLAccountResetNotifySettings) (*Bool, error)
	// account.updateProfile#78515775 flags:# first_name:flags.0?string last_name:flags.1?string about:flags.2?string = User;
	AccountUpdateProfile(context.Context, *TLAccountUpdateProfile) (*User, error)
	// account.updateStatus#6628562c offline:Bool = Bool;
	AccountUpdateStatus(context.Context, *TLAccountUpdateStatus) (*Bool, error)
	// account.getWallPapers#c04cfac2 = Vector<WallPaper>;
	AccountGetWallPapers(context.Context, *TLAccountGetWallPapers) (*Vector_WallPaper, error)
	// account.reportPeer#ae189d5f peer:InputPeer reason:ReportReason = Bool;
	AccountReportPeer(context.Context, *TLAccountReportPeer) (*Bool, error)
	// account.checkUsername#2714d86c username:string = Bool;
	AccountCheckUsername(context.Context, *TLAccountCheckUsername) (*Bool, error)
	// account.updateUsername#3e0bdd7c username:string = User;
	AccountUpdateUsername(context.Context, *TLAccountUpdateUsername) (*User, error)
	// account.getPrivacy#dadbc950 key:InputPrivacyKey = account.PrivacyRules;
	AccountGetPrivacy(context.Context, *TLAccountGetPrivacy) (*Account_PrivacyRules, error)
	// account.setPrivacy#c9f81ce8 key:InputPrivacyKey rules:Vector<InputPrivacyRule> = account.PrivacyRules;
	AccountSetPrivacy(context.Context, *TLAccountSetPrivacy) (*Account_PrivacyRules, error)
	// account.deleteAccount#418d4e0b reason:string = Bool;
	AccountDeleteAccount(context.Context, *TLAccountDeleteAccount) (*Bool, error)
	// account.getAccountTTL#8fc711d = AccountDaysTTL;
	AccountGetAccountTTL(context.Context, *TLAccountGetAccountTTL) (*AccountDaysTTL, error)
	// account.setAccountTTL#2442485e ttl:AccountDaysTTL = Bool;
	AccountSetAccountTTL(context.Context, *TLAccountSetAccountTTL) (*Bool, error)
	// account.sendChangePhoneCode#8e57deb flags:# allow_flashcall:flags.0?true phone_number:string current_number:flags.0?Bool = auth.SentCode;
	AccountSendChangePhoneCode(context.Context, *TLAccountSendChangePhoneCode) (*Auth_SentCode, error)
	// account.changePhone#70c32edb phone_number:string phone_code_hash:string phone_code:string = User;
	AccountChangePhone(context.Context, *TLAccountChangePhone) (*User, error)
	// account.updateDeviceLocked#38df3532 period:int = Bool;
	AccountUpdateDeviceLocked(context.Context, *TLAccountUpdateDeviceLocked) (*Bool, error)
	// account.getAuthorizations#e320c158 = account.Authorizations;
	AccountGetAuthorizations(context.Context, *TLAccountGetAuthorizations) (*Account_Authorizations, error)
	// account.resetAuthorization#df77f3bc hash:long = Bool;
	AccountResetAuthorization(context.Context, *TLAccountResetAuthorization) (*Bool, error)
	// account.getPassword#548a30f5 = account.Password;
	AccountGetPassword(context.Context, *TLAccountGetPassword) (*Account_Password, error)
	// account.getPasswordSettings#bc8d11bb current_password_hash:bytes = account.PasswordSettings;
	AccountGetPasswordSettings(context.Context, *TLAccountGetPasswordSettings) (*Account_PasswordSettings, error)
	// account.updatePasswordSettings#fa7c4b86 current_password_hash:bytes new_settings:account.PasswordInputSettings = Bool;
	AccountUpdatePasswordSettings(context.Context, *TLAccountUpdatePasswordSettings) (*Bool, error)
	// account.sendConfirmPhoneCode#1516d7bd flags:# allow_flashcall:flags.0?true hash:string current_number:flags.0?Bool = auth.SentCode;
	AccountSendConfirmPhoneCode(context.Context, *TLAccountSendConfirmPhoneCode) (*Auth_SentCode, error)
	// account.confirmPhone#5f2178c3 phone_code_hash:string phone_code:string = Bool;
	AccountConfirmPhone(context.Context, *TLAccountConfirmPhone) (*Bool, error)
	// account.getTmpPassword#4a82327e password_hash:bytes period:int = account.TmpPassword;
	AccountGetTmpPassword(context.Context, *TLAccountGetTmpPassword) (*Account_TmpPassword, error)
	mustEmbedUnimplementedRPCAccountServer()
}

// UnimplementedRPCAccountServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCAccountServer struct{}

func (UnimplementedRPCAccountServer) AccountRegisterDevice(context.Context, *TLAccountRegisterDevice) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountRegisterDevice not implemented")
}
func (UnimplementedRPCAccountServer) AccountUnregisterDevice(context.Context, *TLAccountUnregisterDevice) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUnregisterDevice not implemented")
}
func (UnimplementedRPCAccountServer) AccountUpdateNotifySettings(context.Context, *TLAccountUpdateNotifySettings) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUpdateNotifySettings not implemented")
}
func (UnimplementedRPCAccountServer) AccountGetNotifySettings(context.Context, *TLAccountGetNotifySettings) (*PeerNotifySettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetNotifySettings not implemented")
}
func (UnimplementedRPCAccountServer) AccountResetNotifySettings(context.Context, *TLAccountResetNotifySettings) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountResetNotifySettings not implemented")
}
func (UnimplementedRPCAccountServer) AccountUpdateProfile(context.Context, *TLAccountUpdateProfile) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUpdateProfile not implemented")
}
func (UnimplementedRPCAccountServer) AccountUpdateStatus(context.Context, *TLAccountUpdateStatus) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUpdateStatus not implemented")
}
func (UnimplementedRPCAccountServer) AccountGetWallPapers(context.Context, *TLAccountGetWallPapers) (*Vector_WallPaper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetWallPapers not implemented")
}
func (UnimplementedRPCAccountServer) AccountReportPeer(context.Context, *TLAccountReportPeer) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountReportPeer not implemented")
}
func (UnimplementedRPCAccountServer) AccountCheckUsername(context.Context, *TLAccountCheckUsername) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountCheckUsername not implemented")
}
func (UnimplementedRPCAccountServer) AccountUpdateUsername(context.Context, *TLAccountUpdateUsername) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUpdateUsername not implemented")
}
func (UnimplementedRPCAccountServer) AccountGetPrivacy(context.Context, *TLAccountGetPrivacy) (*Account_PrivacyRules, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetPrivacy not implemented")
}
func (UnimplementedRPCAccountServer) AccountSetPrivacy(context.Context, *TLAccountSetPrivacy) (*Account_PrivacyRules, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSetPrivacy not implemented")
}
func (UnimplementedRPCAccountServer) AccountDeleteAccount(context.Context, *TLAccountDeleteAccount) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountDeleteAccount not implemented")
}
func (UnimplementedRPCAccountServer) AccountGetAccountTTL(context.Context, *TLAccountGetAccountTTL) (*AccountDaysTTL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetAccountTTL not implemented")
}
func (UnimplementedRPCAccountServer) AccountSetAccountTTL(context.Context, *TLAccountSetAccountTTL) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSetAccountTTL not implemented")
}
func (UnimplementedRPCAccountServer) AccountSendChangePhoneCode(context.Context, *TLAccountSendChangePhoneCode) (*Auth_SentCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSendChangePhoneCode not implemented")
}
func (UnimplementedRPCAccountServer) AccountChangePhone(context.Context, *TLAccountChangePhone) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountChangePhone not implemented")
}
func (UnimplementedRPCAccountServer) AccountUpdateDeviceLocked(context.Context, *TLAccountUpdateDeviceLocked) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUpdateDeviceLocked not implemented")
}
func (UnimplementedRPCAccountServer) AccountGetAuthorizations(context.Context, *TLAccountGetAuthorizations) (*Account_Authorizations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetAuthorizations not implemented")
}
func (UnimplementedRPCAccountServer) AccountResetAuthorization(context.Context, *TLAccountResetAuthorization) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountResetAuthorization not implemented")
}
func (UnimplementedRPCAccountServer) AccountGetPassword(context.Context, *TLAccountGetPassword) (*Account_Password, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetPassword not implemented")
}
func (UnimplementedRPCAccountServer) AccountGetPasswordSettings(context.Context, *TLAccountGetPasswordSettings) (*Account_PasswordSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetPasswordSettings not implemented")
}
func (UnimplementedRPCAccountServer) AccountUpdatePasswordSettings(context.Context, *TLAccountUpdatePasswordSettings) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUpdatePasswordSettings not implemented")
}
func (UnimplementedRPCAccountServer) AccountSendConfirmPhoneCode(context.Context, *TLAccountSendConfirmPhoneCode) (*Auth_SentCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSendConfirmPhoneCode not implemented")
}
func (UnimplementedRPCAccountServer) AccountConfirmPhone(context.Context, *TLAccountConfirmPhone) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountConfirmPhone not implemented")
}
func (UnimplementedRPCAccountServer) AccountGetTmpPassword(context.Context, *TLAccountGetTmpPassword) (*Account_TmpPassword, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetTmpPassword not implemented")
}
func (UnimplementedRPCAccountServer) mustEmbedUnimplementedRPCAccountServer() {}
func (UnimplementedRPCAccountServer) testEmbeddedByValue()                    {}

// UnsafeRPCAccountServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCAccountServer will
// result in compilation errors.
type UnsafeRPCAccountServer interface {
	mustEmbedUnimplementedRPCAccountServer()
}

func RegisterRPCAccountServer(s grpc.ServiceRegistrar, srv RPCAccountServer) {
	// If the following call pancis, it indicates UnimplementedRPCAccountServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCAccount_ServiceDesc, srv)
}

func _RPCAccount_AccountRegisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountRegisterDevice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountRegisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAccount_AccountRegisterDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountRegisterDevice(ctx, req.(*TLAccountRegisterDevice))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountUnregisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUnregisterDevice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountUnregisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAccount_AccountUnregisterDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountUnregisterDevice(ctx, req.(*TLAccountUnregisterDevice))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountUpdateNotifySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUpdateNotifySettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountUpdateNotifySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAccount_AccountUpdateNotifySettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountUpdateNotifySettings(ctx, req.(*TLAccountUpdateNotifySettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountGetNotifySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetNotifySettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountGetNotifySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAccount_AccountGetNotifySettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountGetNotifySettings(ctx, req.(*TLAccountGetNotifySettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountResetNotifySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountResetNotifySettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountResetNotifySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAccount_AccountResetNotifySettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountResetNotifySettings(ctx, req.(*TLAccountResetNotifySettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountUpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUpdateProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountUpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAccount_AccountUpdateProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountUpdateProfile(ctx, req.(*TLAccountUpdateProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountUpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUpdateStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountUpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAccount_AccountUpdateStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountUpdateStatus(ctx, req.(*TLAccountUpdateStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountGetWallPapers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetWallPapers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountGetWallPapers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAccount_AccountGetWallPapers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountGetWallPapers(ctx, req.(*TLAccountGetWallPapers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountReportPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountReportPeer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountReportPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAccount_AccountReportPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountReportPeer(ctx, req.(*TLAccountReportPeer))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountCheckUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountCheckUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountCheckUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAccount_AccountCheckUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountCheckUsername(ctx, req.(*TLAccountCheckUsername))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountUpdateUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUpdateUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountUpdateUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAccount_AccountUpdateUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountUpdateUsername(ctx, req.(*TLAccountUpdateUsername))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountGetPrivacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetPrivacy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountGetPrivacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAccount_AccountGetPrivacy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountGetPrivacy(ctx, req.(*TLAccountGetPrivacy))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountSetPrivacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSetPrivacy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountSetPrivacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAccount_AccountSetPrivacy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountSetPrivacy(ctx, req.(*TLAccountSetPrivacy))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountDeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountDeleteAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountDeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAccount_AccountDeleteAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountDeleteAccount(ctx, req.(*TLAccountDeleteAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountGetAccountTTL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetAccountTTL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountGetAccountTTL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAccount_AccountGetAccountTTL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountGetAccountTTL(ctx, req.(*TLAccountGetAccountTTL))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountSetAccountTTL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSetAccountTTL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountSetAccountTTL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAccount_AccountSetAccountTTL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountSetAccountTTL(ctx, req.(*TLAccountSetAccountTTL))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountSendChangePhoneCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSendChangePhoneCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountSendChangePhoneCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAccount_AccountSendChangePhoneCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountSendChangePhoneCode(ctx, req.(*TLAccountSendChangePhoneCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountChangePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountChangePhone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountChangePhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAccount_AccountChangePhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountChangePhone(ctx, req.(*TLAccountChangePhone))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountUpdateDeviceLocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUpdateDeviceLocked)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountUpdateDeviceLocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAccount_AccountUpdateDeviceLocked_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountUpdateDeviceLocked(ctx, req.(*TLAccountUpdateDeviceLocked))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountGetAuthorizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetAuthorizations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountGetAuthorizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAccount_AccountGetAuthorizations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountGetAuthorizations(ctx, req.(*TLAccountGetAuthorizations))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountResetAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountResetAuthorization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountResetAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAccount_AccountResetAuthorization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountResetAuthorization(ctx, req.(*TLAccountResetAuthorization))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountGetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountGetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAccount_AccountGetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountGetPassword(ctx, req.(*TLAccountGetPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountGetPasswordSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetPasswordSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountGetPasswordSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAccount_AccountGetPasswordSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountGetPasswordSettings(ctx, req.(*TLAccountGetPasswordSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountUpdatePasswordSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUpdatePasswordSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountUpdatePasswordSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAccount_AccountUpdatePasswordSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountUpdatePasswordSettings(ctx, req.(*TLAccountUpdatePasswordSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountSendConfirmPhoneCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSendConfirmPhoneCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountSendConfirmPhoneCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAccount_AccountSendConfirmPhoneCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountSendConfirmPhoneCode(ctx, req.(*TLAccountSendConfirmPhoneCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountConfirmPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountConfirmPhone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountConfirmPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAccount_AccountConfirmPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountConfirmPhone(ctx, req.(*TLAccountConfirmPhone))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountGetTmpPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetTmpPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountGetTmpPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCAccount_AccountGetTmpPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountGetTmpPassword(ctx, req.(*TLAccountGetTmpPassword))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCAccount_ServiceDesc is the grpc.ServiceDesc for RPCAccount service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCAccount_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCAccount",
	HandlerType: (*RPCAccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "account_registerDevice",
			Handler:    _RPCAccount_AccountRegisterDevice_Handler,
		},
		{
			MethodName: "account_unregisterDevice",
			Handler:    _RPCAccount_AccountUnregisterDevice_Handler,
		},
		{
			MethodName: "account_updateNotifySettings",
			Handler:    _RPCAccount_AccountUpdateNotifySettings_Handler,
		},
		{
			MethodName: "account_getNotifySettings",
			Handler:    _RPCAccount_AccountGetNotifySettings_Handler,
		},
		{
			MethodName: "account_resetNotifySettings",
			Handler:    _RPCAccount_AccountResetNotifySettings_Handler,
		},
		{
			MethodName: "account_updateProfile",
			Handler:    _RPCAccount_AccountUpdateProfile_Handler,
		},
		{
			MethodName: "account_updateStatus",
			Handler:    _RPCAccount_AccountUpdateStatus_Handler,
		},
		{
			MethodName: "account_getWallPapers",
			Handler:    _RPCAccount_AccountGetWallPapers_Handler,
		},
		{
			MethodName: "account_reportPeer",
			Handler:    _RPCAccount_AccountReportPeer_Handler,
		},
		{
			MethodName: "account_checkUsername",
			Handler:    _RPCAccount_AccountCheckUsername_Handler,
		},
		{
			MethodName: "account_updateUsername",
			Handler:    _RPCAccount_AccountUpdateUsername_Handler,
		},
		{
			MethodName: "account_getPrivacy",
			Handler:    _RPCAccount_AccountGetPrivacy_Handler,
		},
		{
			MethodName: "account_setPrivacy",
			Handler:    _RPCAccount_AccountSetPrivacy_Handler,
		},
		{
			MethodName: "account_deleteAccount",
			Handler:    _RPCAccount_AccountDeleteAccount_Handler,
		},
		{
			MethodName: "account_getAccountTTL",
			Handler:    _RPCAccount_AccountGetAccountTTL_Handler,
		},
		{
			MethodName: "account_setAccountTTL",
			Handler:    _RPCAccount_AccountSetAccountTTL_Handler,
		},
		{
			MethodName: "account_sendChangePhoneCode",
			Handler:    _RPCAccount_AccountSendChangePhoneCode_Handler,
		},
		{
			MethodName: "account_changePhone",
			Handler:    _RPCAccount_AccountChangePhone_Handler,
		},
		{
			MethodName: "account_updateDeviceLocked",
			Handler:    _RPCAccount_AccountUpdateDeviceLocked_Handler,
		},
		{
			MethodName: "account_getAuthorizations",
			Handler:    _RPCAccount_AccountGetAuthorizations_Handler,
		},
		{
			MethodName: "account_resetAuthorization",
			Handler:    _RPCAccount_AccountResetAuthorization_Handler,
		},
		{
			MethodName: "account_getPassword",
			Handler:    _RPCAccount_AccountGetPassword_Handler,
		},
		{
			MethodName: "account_getPasswordSettings",
			Handler:    _RPCAccount_AccountGetPasswordSettings_Handler,
		},
		{
			MethodName: "account_updatePasswordSettings",
			Handler:    _RPCAccount_AccountUpdatePasswordSettings_Handler,
		},
		{
			MethodName: "account_sendConfirmPhoneCode",
			Handler:    _RPCAccount_AccountSendConfirmPhoneCode_Handler,
		},
		{
			MethodName: "account_confirmPhone",
			Handler:    _RPCAccount_AccountConfirmPhone_Handler,
		},
		{
			MethodName: "account_getTmpPassword",
			Handler:    _RPCAccount_AccountGetTmpPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCUpdates_UpdatesGetState_FullMethodName             = "/mtproto.RPCUpdates/updates_getState"
	RPCUpdates_UpdatesGetDifference_FullMethodName        = "/mtproto.RPCUpdates/updates_getDifference"
	RPCUpdates_UpdatesGetChannelDifference_FullMethodName = "/mtproto.RPCUpdates/updates_getChannelDifference"
)

// RPCUpdatesClient is the client API for RPCUpdates service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCUpdatesClient interface {
	// updates.getState#edd4882a = updates.State;
	UpdatesGetState(ctx context.Context, in *TLUpdatesGetState, opts ...grpc.CallOption) (*Updates_State, error)
	// updates.getDifference#25939651 flags:# pts:int pts_total_limit:flags.0?int date:int qts:int = updates.Difference;
	UpdatesGetDifference(ctx context.Context, in *TLUpdatesGetDifference, opts ...grpc.CallOption) (*Updates_Difference, error)
	// updates.getChannelDifference#3173d78 flags:# force:flags.0?true channel:InputChannel filter:ChannelMessagesFilter pts:int limit:int = updates.ChannelDifference;
	UpdatesGetChannelDifference(ctx context.Context, in *TLUpdatesGetChannelDifference, opts ...grpc.CallOption) (*Updates_ChannelDifference, error)
}

type rPCUpdatesClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCUpdatesClient(cc grpc.ClientConnInterface) RPCUpdatesClient {
	return &rPCUpdatesClient{cc}
}

func (c *rPCUpdatesClient) UpdatesGetState(ctx context.Context, in *TLUpdatesGetState, opts ...grpc.CallOption) (*Updates_State, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates_State)
	err := c.cc.Invoke(ctx, RPCUpdates_UpdatesGetState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUpdatesClient) UpdatesGetDifference(ctx context.Context, in *TLUpdatesGetDifference, opts ...grpc.CallOption) (*Updates_Difference, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates_Difference)
	err := c.cc.Invoke(ctx, RPCUpdates_UpdatesGetDifference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUpdatesClient) UpdatesGetChannelDifference(ctx context.Context, in *TLUpdatesGetChannelDifference, opts ...grpc.CallOption) (*Updates_ChannelDifference, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Updates_ChannelDifference)
	err := c.cc.Invoke(ctx, RPCUpdates_UpdatesGetChannelDifference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCUpdatesServer is the server API for RPCUpdates service.
// All implementations must embed UnimplementedRPCUpdatesServer
// for forward compatibility.
type RPCUpdatesServer interface {
	// updates.getState#edd4882a = updates.State;
	UpdatesGetState(context.Context, *TLUpdatesGetState) (*Updates_State, error)
	// updates.getDifference#25939651 flags:# pts:int pts_total_limit:flags.0?int date:int qts:int = updates.Difference;
	UpdatesGetDifference(context.Context, *TLUpdatesGetDifference) (*Updates_Difference, error)
	// updates.getChannelDifference#3173d78 flags:# force:flags.0?true channel:InputChannel filter:ChannelMessagesFilter pts:int limit:int = updates.ChannelDifference;
	UpdatesGetChannelDifference(context.Context, *TLUpdatesGetChannelDifference) (*Updates_ChannelDifference, error)
	mustEmbedUnimplementedRPCUpdatesServer()
}

// UnimplementedRPCUpdatesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCUpdatesServer struct{}

func (UnimplementedRPCUpdatesServer) UpdatesGetState(context.Context, *TLUpdatesGetState) (*Updates_State, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatesGetState not implemented")
}
func (UnimplementedRPCUpdatesServer) UpdatesGetDifference(context.Context, *TLUpdatesGetDifference) (*Updates_Difference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatesGetDifference not implemented")
}
func (UnimplementedRPCUpdatesServer) UpdatesGetChannelDifference(context.Context, *TLUpdatesGetChannelDifference) (*Updates_ChannelDifference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatesGetChannelDifference not implemented")
}
func (UnimplementedRPCUpdatesServer) mustEmbedUnimplementedRPCUpdatesServer() {}
func (UnimplementedRPCUpdatesServer) testEmbeddedByValue()                    {}

// UnsafeRPCUpdatesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCUpdatesServer will
// result in compilation errors.
type UnsafeRPCUpdatesServer interface {
	mustEmbedUnimplementedRPCUpdatesServer()
}

func RegisterRPCUpdatesServer(s grpc.ServiceRegistrar, srv RPCUpdatesServer) {
	// If the following call pancis, it indicates UnimplementedRPCUpdatesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCUpdates_ServiceDesc, srv)
}

func _RPCUpdates_UpdatesGetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUpdatesGetState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUpdatesServer).UpdatesGetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUpdates_UpdatesGetState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUpdatesServer).UpdatesGetState(ctx, req.(*TLUpdatesGetState))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUpdates_UpdatesGetDifference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUpdatesGetDifference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUpdatesServer).UpdatesGetDifference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUpdates_UpdatesGetDifference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUpdatesServer).UpdatesGetDifference(ctx, req.(*TLUpdatesGetDifference))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUpdates_UpdatesGetChannelDifference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUpdatesGetChannelDifference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUpdatesServer).UpdatesGetChannelDifference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUpdates_UpdatesGetChannelDifference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUpdatesServer).UpdatesGetChannelDifference(ctx, req.(*TLUpdatesGetChannelDifference))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCUpdates_ServiceDesc is the grpc.ServiceDesc for RPCUpdates service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCUpdates_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCUpdates",
	HandlerType: (*RPCUpdatesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "updates_getState",
			Handler:    _RPCUpdates_UpdatesGetState_Handler,
		},
		{
			MethodName: "updates_getDifference",
			Handler:    _RPCUpdates_UpdatesGetDifference_Handler,
		},
		{
			MethodName: "updates_getChannelDifference",
			Handler:    _RPCUpdates_UpdatesGetChannelDifference_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCBots_BotsSendCustomRequest_FullMethodName      = "/mtproto.RPCBots/bots_sendCustomRequest"
	RPCBots_BotsAnswerWebhookJSONQuery_FullMethodName = "/mtproto.RPCBots/bots_answerWebhookJSONQuery"
)

// RPCBotsClient is the client API for RPCBots service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCBotsClient interface {
	// bots.sendCustomRequest#aa2769ed custom_method:string params:DataJSON = DataJSON;
	BotsSendCustomRequest(ctx context.Context, in *TLBotsSendCustomRequest, opts ...grpc.CallOption) (*DataJSON, error)
	// bots.answerWebhookJSONQuery#e6213f4d query_id:long data:DataJSON = Bool;
	BotsAnswerWebhookJSONQuery(ctx context.Context, in *TLBotsAnswerWebhookJSONQuery, opts ...grpc.CallOption) (*Bool, error)
}

type rPCBotsClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCBotsClient(cc grpc.ClientConnInterface) RPCBotsClient {
	return &rPCBotsClient{cc}
}

func (c *rPCBotsClient) BotsSendCustomRequest(ctx context.Context, in *TLBotsSendCustomRequest, opts ...grpc.CallOption) (*DataJSON, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataJSON)
	err := c.cc.Invoke(ctx, RPCBots_BotsSendCustomRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCBotsClient) BotsAnswerWebhookJSONQuery(ctx context.Context, in *TLBotsAnswerWebhookJSONQuery, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, RPCBots_BotsAnswerWebhookJSONQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCBotsServer is the server API for RPCBots service.
// All implementations must embed UnimplementedRPCBotsServer
// for forward compatibility.
type RPCBotsServer interface {
	// bots.sendCustomRequest#aa2769ed custom_method:string params:DataJSON = DataJSON;
	BotsSendCustomRequest(context.Context, *TLBotsSendCustomRequest) (*DataJSON, error)
	// bots.answerWebhookJSONQuery#e6213f4d query_id:long data:DataJSON = Bool;
	BotsAnswerWebhookJSONQuery(context.Context, *TLBotsAnswerWebhookJSONQuery) (*Bool, error)
	mustEmbedUnimplementedRPCBotsServer()
}

// UnimplementedRPCBotsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCBotsServer struct{}

func (UnimplementedRPCBotsServer) BotsSendCustomRequest(context.Context, *TLBotsSendCustomRequest) (*DataJSON, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotsSendCustomRequest not implemented")
}
func (UnimplementedRPCBotsServer) BotsAnswerWebhookJSONQuery(context.Context, *TLBotsAnswerWebhookJSONQuery) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotsAnswerWebhookJSONQuery not implemented")
}
func (UnimplementedRPCBotsServer) mustEmbedUnimplementedRPCBotsServer() {}
func (UnimplementedRPCBotsServer) testEmbeddedByValue()                 {}

// UnsafeRPCBotsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCBotsServer will
// result in compilation errors.
type UnsafeRPCBotsServer interface {
	mustEmbedUnimplementedRPCBotsServer()
}

func RegisterRPCBotsServer(s grpc.ServiceRegistrar, srv RPCBotsServer) {
	// If the following call pancis, it indicates UnimplementedRPCBotsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCBots_ServiceDesc, srv)
}

func _RPCBots_BotsSendCustomRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLBotsSendCustomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBotsServer).BotsSendCustomRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBots_BotsSendCustomRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBotsServer).BotsSendCustomRequest(ctx, req.(*TLBotsSendCustomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCBots_BotsAnswerWebhookJSONQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLBotsAnswerWebhookJSONQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBotsServer).BotsAnswerWebhookJSONQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCBots_BotsAnswerWebhookJSONQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBotsServer).BotsAnswerWebhookJSONQuery(ctx, req.(*TLBotsAnswerWebhookJSONQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCBots_ServiceDesc is the grpc.ServiceDesc for RPCBots service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCBots_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCBots",
	HandlerType: (*RPCBotsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "bots_sendCustomRequest",
			Handler:    _RPCBots_BotsSendCustomRequest_Handler,
		},
		{
			MethodName: "bots_answerWebhookJSONQuery",
			Handler:    _RPCBots_BotsAnswerWebhookJSONQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

const (
	RPCLangpack_LangpackGetLangPack_FullMethodName   = "/mtproto.RPCLangpack/langpack_getLangPack"
	RPCLangpack_LangpackGetStrings_FullMethodName    = "/mtproto.RPCLangpack/langpack_getStrings"
	RPCLangpack_LangpackGetDifference_FullMethodName = "/mtproto.RPCLangpack/langpack_getDifference"
	RPCLangpack_LangpackGetLanguages_FullMethodName  = "/mtproto.RPCLangpack/langpack_getLanguages"
)

// RPCLangpackClient is the client API for RPCLangpack service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCLangpackClient interface {
	// langpack.getLangPack#9ab5c58e lang_code:string = LangPackDifference;
	LangpackGetLangPack(ctx context.Context, in *TLLangpackGetLangPack, opts ...grpc.CallOption) (*LangPackDifference, error)
	// langpack.getStrings#2e1ee318 lang_code:string keys:Vector<string> = Vector<LangPackString>;
	LangpackGetStrings(ctx context.Context, in *TLLangpackGetStrings, opts ...grpc.CallOption) (*Vector_LangPackString, error)
	// langpack.getDifference#b2e4d7d from_version:int = LangPackDifference;
	LangpackGetDifference(ctx context.Context, in *TLLangpackGetDifference, opts ...grpc.CallOption) (*LangPackDifference, error)
	// langpack.getLanguages#800fd57d = Vector<LangPackLanguage>;
	LangpackGetLanguages(ctx context.Context, in *TLLangpackGetLanguages, opts ...grpc.CallOption) (*Vector_LangPackLanguage, error)
}

type rPCLangpackClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCLangpackClient(cc grpc.ClientConnInterface) RPCLangpackClient {
	return &rPCLangpackClient{cc}
}

func (c *rPCLangpackClient) LangpackGetLangPack(ctx context.Context, in *TLLangpackGetLangPack, opts ...grpc.CallOption) (*LangPackDifference, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LangPackDifference)
	err := c.cc.Invoke(ctx, RPCLangpack_LangpackGetLangPack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCLangpackClient) LangpackGetStrings(ctx context.Context, in *TLLangpackGetStrings, opts ...grpc.CallOption) (*Vector_LangPackString, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_LangPackString)
	err := c.cc.Invoke(ctx, RPCLangpack_LangpackGetStrings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCLangpackClient) LangpackGetDifference(ctx context.Context, in *TLLangpackGetDifference, opts ...grpc.CallOption) (*LangPackDifference, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LangPackDifference)
	err := c.cc.Invoke(ctx, RPCLangpack_LangpackGetDifference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCLangpackClient) LangpackGetLanguages(ctx context.Context, in *TLLangpackGetLanguages, opts ...grpc.CallOption) (*Vector_LangPackLanguage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vector_LangPackLanguage)
	err := c.cc.Invoke(ctx, RPCLangpack_LangpackGetLanguages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCLangpackServer is the server API for RPCLangpack service.
// All implementations must embed UnimplementedRPCLangpackServer
// for forward compatibility.
type RPCLangpackServer interface {
	// langpack.getLangPack#9ab5c58e lang_code:string = LangPackDifference;
	LangpackGetLangPack(context.Context, *TLLangpackGetLangPack) (*LangPackDifference, error)
	// langpack.getStrings#2e1ee318 lang_code:string keys:Vector<string> = Vector<LangPackString>;
	LangpackGetStrings(context.Context, *TLLangpackGetStrings) (*Vector_LangPackString, error)
	// langpack.getDifference#b2e4d7d from_version:int = LangPackDifference;
	LangpackGetDifference(context.Context, *TLLangpackGetDifference) (*LangPackDifference, error)
	// langpack.getLanguages#800fd57d = Vector<LangPackLanguage>;
	LangpackGetLanguages(context.Context, *TLLangpackGetLanguages) (*Vector_LangPackLanguage, error)
	mustEmbedUnimplementedRPCLangpackServer()
}

// UnimplementedRPCLangpackServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRPCLangpackServer struct{}

func (UnimplementedRPCLangpackServer) LangpackGetLangPack(context.Context, *TLLangpackGetLangPack) (*LangPackDifference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LangpackGetLangPack not implemented")
}
func (UnimplementedRPCLangpackServer) LangpackGetStrings(context.Context, *TLLangpackGetStrings) (*Vector_LangPackString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LangpackGetStrings not implemented")
}
func (UnimplementedRPCLangpackServer) LangpackGetDifference(context.Context, *TLLangpackGetDifference) (*LangPackDifference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LangpackGetDifference not implemented")
}
func (UnimplementedRPCLangpackServer) LangpackGetLanguages(context.Context, *TLLangpackGetLanguages) (*Vector_LangPackLanguage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LangpackGetLanguages not implemented")
}
func (UnimplementedRPCLangpackServer) mustEmbedUnimplementedRPCLangpackServer() {}
func (UnimplementedRPCLangpackServer) testEmbeddedByValue()                     {}

// UnsafeRPCLangpackServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCLangpackServer will
// result in compilation errors.
type UnsafeRPCLangpackServer interface {
	mustEmbedUnimplementedRPCLangpackServer()
}

func RegisterRPCLangpackServer(s grpc.ServiceRegistrar, srv RPCLangpackServer) {
	// If the following call pancis, it indicates UnimplementedRPCLangpackServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RPCLangpack_ServiceDesc, srv)
}

func _RPCLangpack_LangpackGetLangPack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLLangpackGetLangPack)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCLangpackServer).LangpackGetLangPack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCLangpack_LangpackGetLangPack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCLangpackServer).LangpackGetLangPack(ctx, req.(*TLLangpackGetLangPack))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCLangpack_LangpackGetStrings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLLangpackGetStrings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCLangpackServer).LangpackGetStrings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCLangpack_LangpackGetStrings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCLangpackServer).LangpackGetStrings(ctx, req.(*TLLangpackGetStrings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCLangpack_LangpackGetDifference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLLangpackGetDifference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCLangpackServer).LangpackGetDifference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCLangpack_LangpackGetDifference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCLangpackServer).LangpackGetDifference(ctx, req.(*TLLangpackGetDifference))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCLangpack_LangpackGetLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLLangpackGetLanguages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCLangpackServer).LangpackGetLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCLangpack_LangpackGetLanguages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCLangpackServer).LangpackGetLanguages(ctx, req.(*TLLangpackGetLanguages))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCLangpack_ServiceDesc is the grpc.ServiceDesc for RPCLangpack service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCLangpack_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCLangpack",
	HandlerType: (*RPCLangpackServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "langpack_getLangPack",
			Handler:    _RPCLangpack_LangpackGetLangPack_Handler,
		},
		{
			MethodName: "langpack_getStrings",
			Handler:    _RPCLangpack_LangpackGetStrings_Handler,
		},
		{
			MethodName: "langpack_getDifference",
			Handler:    _RPCLangpack_LangpackGetDifference_Handler,
		},
		{
			MethodName: "langpack_getLanguages",
			Handler:    _RPCLangpack_LangpackGetLanguages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}
